
Simple_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000e0c  00000ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000a8  008000a8  00000ee8  2**0
                  ALLOC
  3 .stab         000018b4  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00002cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c30  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000447  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000550  00000000  00000000  00003e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  000043c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0b  00000000  00000000  00004b5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 12 05 	call	0xa24	; 0xa24 <main>
  8a:	0c 94 04 07 	jmp	0xe08	; 0xe08 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#endif

void Delay_ms(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000) * F_CPU )/2;
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	4a e7       	ldi	r20, 0x7A	; 122
  98:	54 e4       	ldi	r21, 0x44	; 68
  9a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__divsf3>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	34 e2       	ldi	r19, 0x24	; 36
  a2:	44 e7       	ldi	r20, 0x74	; 116
  a4:	59 e4       	ldi	r21, 0x49	; 73
  a6:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	5f e3       	ldi	r21, 0x3F	; 63
  b2:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3>
  b6:	0e 94 24 06 	call	0xc48	; 0xc48 <__fixunssfsi>
  ba:	46 2f       	mov	r20, r22
  bc:	57 2f       	mov	r21, r23
  be:	68 2f       	mov	r22, r24
  c0:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
  c2:	41 15       	cp	r20, r1
  c4:	51 05       	cpc	r21, r1
  c6:	61 05       	cpc	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	59 f0       	breq	.+22     	; 0xe2 <Delay_ms+0x50>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	dc 01       	movw	r26, r24
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	a1 1d       	adc	r26, r1
  d6:	b1 1d       	adc	r27, r1
  d8:	84 17       	cp	r24, r20
  da:	95 07       	cpc	r25, r21
  dc:	a6 07       	cpc	r26, r22
  de:	b7 07       	cpc	r27, r23
  e0:	c1 f7       	brne	.-16     	; 0xd2 <Delay_ms+0x40>
  e2:	08 95       	ret

000000e4 <Delay_us>:
}

void Delay_us(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000000) * F_CPU )/2;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	34 e2       	ldi	r19, 0x24	; 36
  e8:	44 e7       	ldi	r20, 0x74	; 116
  ea:	59 e4       	ldi	r21, 0x49	; 73
  ec:	0e 94 bc 05 	call	0xb78	; 0xb78 <__divsf3>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	34 e2       	ldi	r19, 0x24	; 36
  f4:	44 e7       	ldi	r20, 0x74	; 116
  f6:	59 e4       	ldi	r21, 0x49	; 73
  f8:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	5f e3       	ldi	r21, 0x3F	; 63
 104:	0e 94 a1 06 	call	0xd42	; 0xd42 <__mulsf3>
 108:	0e 94 24 06 	call	0xc48	; 0xc48 <__fixunssfsi>
 10c:	46 2f       	mov	r20, r22
 10e:	57 2f       	mov	r21, r23
 110:	68 2f       	mov	r22, r24
 112:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
 114:	41 15       	cp	r20, r1
 116:	51 05       	cpc	r21, r1
 118:	61 05       	cpc	r22, r1
 11a:	71 05       	cpc	r23, r1
 11c:	59 f0       	breq	.+22     	; 0x134 <Delay_us+0x50>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	dc 01       	movw	r26, r24
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	84 17       	cp	r24, r20
 12c:	95 07       	cpc	r25, r21
 12e:	a6 07       	cpc	r26, r22
 130:	b7 07       	cpc	r27, r23
 132:	c1 f7       	brne	.-16     	; 0x124 <Delay_us+0x40>
 134:	08 95       	ret

00000136 <MDIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    switch(Copy_u8Port)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	49 f1       	breq	.+82     	; 0x18c <MDIO_voidSetPinDirection+0x56>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	38 f0       	brcs	.+14     	; 0x14c <MDIO_voidSetPinDirection+0x16>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	09 f4       	brne	.+2      	; 0x144 <MDIO_voidSetPinDirection+0xe>
 142:	44 c0       	rjmp	.+136    	; 0x1cc <MDIO_voidSetPinDirection+0x96>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	09 f0       	breq	.+2      	; 0x14a <MDIO_voidSetPinDirection+0x14>
 148:	7e c0       	rjmp	.+252    	; 0x246 <MDIO_voidSetPinDirection+0x110>
 14a:	5f c0       	rjmp	.+190    	; 0x20a <MDIO_voidSetPinDirection+0xd4>
	{
		case DIOA : 
		if (Copy_u8Direction==INPUT)
 14c:	44 23       	and	r20, r20
 14e:	71 f4       	brne	.+28     	; 0x16c <MDIO_voidSetPinDirection+0x36>
		{
			CLR_BIT(DDRA,Copy_u8Pin);
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <MDIO_voidSetPinDirection+0x28>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <MDIO_voidSetPinDirection+0x24>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	6a bb       	out	0x1a, r22	; 26
 16a:	08 95       	ret
		} 
		else if (Copy_u8Direction==OUTPUT)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <MDIO_voidSetPinDirection+0x3c>
 170:	6a c0       	rjmp	.+212    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRA,Copy_u8Pin);
 172:	2a b3       	in	r18, 0x1a	; 26
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <MDIO_voidSetPinDirection+0x4a>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <MDIO_voidSetPinDirection+0x46>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	6a bb       	out	0x1a, r22	; 26
 18a:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOB :
		if (Copy_u8Direction==INPUT)
 18c:	44 23       	and	r20, r20
 18e:	71 f4       	brne	.+28     	; 0x1ac <MDIO_voidSetPinDirection+0x76>
		{
			CLR_BIT(DDRB,Copy_u8Pin);
 190:	27 b3       	in	r18, 0x17	; 23
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <MDIO_voidSetPinDirection+0x68>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <MDIO_voidSetPinDirection+0x64>
 1a2:	ba 01       	movw	r22, r20
 1a4:	60 95       	com	r22
 1a6:	62 23       	and	r22, r18
 1a8:	67 bb       	out	0x17, r22	; 23
 1aa:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <MDIO_voidSetPinDirection+0x7c>
 1b0:	4a c0       	rjmp	.+148    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRB,Copy_u8Pin);
 1b2:	27 b3       	in	r18, 0x17	; 23
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <MDIO_voidSetPinDirection+0x8a>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <MDIO_voidSetPinDirection+0x86>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	67 bb       	out	0x17, r22	; 23
 1ca:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOC :
		if (Copy_u8Direction==INPUT)
 1cc:	44 23       	and	r20, r20
 1ce:	71 f4       	brne	.+28     	; 0x1ec <MDIO_voidSetPinDirection+0xb6>
		{
			CLR_BIT(DDRC,Copy_u8Pin);
 1d0:	24 b3       	in	r18, 0x14	; 20
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	ac 01       	movw	r20, r24
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <MDIO_voidSetPinDirection+0xa8>
 1da:	44 0f       	add	r20, r20
 1dc:	55 1f       	adc	r21, r21
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <MDIO_voidSetPinDirection+0xa4>
 1e2:	ba 01       	movw	r22, r20
 1e4:	60 95       	com	r22
 1e6:	62 23       	and	r22, r18
 1e8:	64 bb       	out	0x14, r22	; 20
 1ea:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	59 f5       	brne	.+86     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRC,Copy_u8Pin);
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MDIO_voidSetPinDirection+0xc8>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MDIO_voidSetPinDirection+0xc4>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	64 bb       	out	0x14, r22	; 20
 208:	08 95       	ret
			/* error */
		}
		break;
			
		case DIOD :
		if (Copy_u8Direction==INPUT)
 20a:	44 23       	and	r20, r20
 20c:	71 f4       	brne	.+28     	; 0x22a <MDIO_voidSetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,Copy_u8Pin);
 20e:	21 b3       	in	r18, 0x11	; 17
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <MDIO_voidSetPinDirection+0xe6>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <MDIO_voidSetPinDirection+0xe2>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	61 bb       	out	0x11, r22	; 17
 228:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	61 f4       	brne	.+24     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRD,Copy_u8Pin);
 22e:	21 b3       	in	r18, 0x11	; 17
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <MDIO_voidSetPinDirection+0x106>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <MDIO_voidSetPinDirection+0x102>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	61 bb       	out	0x11, r22	; 17
 246:	08 95       	ret

00000248 <MDIO_voidSetPortDirection>:
	}
}
void MDIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{

  switch(Copy_u8Port)
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	81 f0       	breq	.+32     	; 0x26c <MDIO_voidSetPortDirection+0x24>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	28 f0       	brcs	.+10     	; 0x25a <MDIO_voidSetPortDirection+0x12>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	a9 f0       	breq	.+42     	; 0x27e <MDIO_voidSetPortDirection+0x36>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	21 f5       	brne	.+72     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
 258:	1b c0       	rjmp	.+54     	; 0x290 <MDIO_voidSetPortDirection+0x48>
  {
	  case DIOA :
	  if (Copy_u8Direction==INPUT)
 25a:	66 23       	and	r22, r22
 25c:	11 f4       	brne	.+4      	; 0x262 <MDIO_voidSetPortDirection+0x1a>
	  {
		  DDRA=0x00;
 25e:	1a ba       	out	0x1a, r1	; 26
 260:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 262:	61 30       	cpi	r22, 0x01	; 1
 264:	e9 f4       	brne	.+58     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRA=0xFF;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	8a bb       	out	0x1a, r24	; 26
 26a:	08 95       	ret
	  {
	    /* error */
	  }
	  break;
	  case DIOB :
	  if (Copy_u8Direction==INPUT)
 26c:	66 23       	and	r22, r22
 26e:	11 f4       	brne	.+4      	; 0x274 <MDIO_voidSetPortDirection+0x2c>
	  {
		  DDRB=0x00;
 270:	17 ba       	out	0x17, r1	; 23
 272:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 274:	61 30       	cpi	r22, 0x01	; 1
 276:	a1 f4       	brne	.+40     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRB=0xFF;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	87 bb       	out	0x17, r24	; 23
 27c:	08 95       	ret
	  {
		  /* error */
	  }
	  break;	
	  case DIOC :
	  if (Copy_u8Direction==INPUT)
 27e:	66 23       	and	r22, r22
 280:	11 f4       	brne	.+4      	; 0x286 <MDIO_voidSetPortDirection+0x3e>
	  {
		  DDRC=0x00;
 282:	14 ba       	out	0x14, r1	; 20
 284:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	59 f4       	brne	.+22     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRC=0xFF;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	84 bb       	out	0x14, r24	; 20
 28e:	08 95       	ret
	  {
		  /* error */
	  }
	  break;
	  case DIOD :
	  if (Copy_u8Direction==INPUT)
 290:	66 23       	and	r22, r22
 292:	11 f4       	brne	.+4      	; 0x298 <MDIO_voidSetPortDirection+0x50>
	  {
		  DDRD=0x00;
 294:	11 ba       	out	0x11, r1	; 17
 296:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRD=0xFF;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	81 bb       	out	0x11, r24	; 17
 2a0:	08 95       	ret

000002a2 <MDIO_voidSetPinValue>:

}

void MDIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    switch(Copy_u8Port)
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	49 f1       	breq	.+82     	; 0x2f8 <MDIO_voidSetPinValue+0x56>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	38 f0       	brcs	.+14     	; 0x2b8 <MDIO_voidSetPinValue+0x16>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <MDIO_voidSetPinValue+0xe>
 2ae:	44 c0       	rjmp	.+136    	; 0x338 <MDIO_voidSetPinValue+0x96>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <MDIO_voidSetPinValue+0x14>
 2b4:	7e c0       	rjmp	.+252    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
 2b6:	5f c0       	rjmp	.+190    	; 0x376 <MDIO_voidSetPinValue+0xd4>
    {
	    case DIOA :
	    if (Copy_u8Value==LOW)
 2b8:	44 23       	and	r20, r20
 2ba:	71 f4       	brne	.+28     	; 0x2d8 <MDIO_voidSetPinValue+0x36>
	    {
		    CLR_BIT(PORTA,Copy_u8Pin);
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ac 01       	movw	r20, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <MDIO_voidSetPinValue+0x28>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <MDIO_voidSetPinValue+0x24>
 2ce:	ba 01       	movw	r22, r20
 2d0:	60 95       	com	r22
 2d2:	62 23       	and	r22, r18
 2d4:	6b bb       	out	0x1b, r22	; 27
 2d6:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	09 f0       	breq	.+2      	; 0x2de <MDIO_voidSetPinValue+0x3c>
 2dc:	6a c0       	rjmp	.+212    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTA,Copy_u8Pin);
 2de:	2b b3       	in	r18, 0x1b	; 27
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	ac 01       	movw	r20, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <MDIO_voidSetPinValue+0x4a>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <MDIO_voidSetPinValue+0x46>
 2f0:	ba 01       	movw	r22, r20
 2f2:	62 2b       	or	r22, r18
 2f4:	6b bb       	out	0x1b, r22	; 27
 2f6:	08 95       	ret
		    /* error */
	    }
	    break;
	    
	    case DIOB :
	    if (Copy_u8Value==LOW)
 2f8:	44 23       	and	r20, r20
 2fa:	71 f4       	brne	.+28     	; 0x318 <MDIO_voidSetPinValue+0x76>
	    {
		    CLR_BIT(PORTB,Copy_u8Pin);
 2fc:	28 b3       	in	r18, 0x18	; 24
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	ac 01       	movw	r20, r24
 304:	02 c0       	rjmp	.+4      	; 0x30a <MDIO_voidSetPinValue+0x68>
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <MDIO_voidSetPinValue+0x64>
 30e:	ba 01       	movw	r22, r20
 310:	60 95       	com	r22
 312:	62 23       	and	r22, r18
 314:	68 bb       	out	0x18, r22	; 24
 316:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	09 f0       	breq	.+2      	; 0x31e <MDIO_voidSetPinValue+0x7c>
 31c:	4a c0       	rjmp	.+148    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTB,Copy_u8Pin);
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ac 01       	movw	r20, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <MDIO_voidSetPinValue+0x8a>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <MDIO_voidSetPinValue+0x86>
 330:	ba 01       	movw	r22, r20
 332:	62 2b       	or	r22, r18
 334:	68 bb       	out	0x18, r22	; 24
 336:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOC :
	    if (Copy_u8Value==LOW)
 338:	44 23       	and	r20, r20
 33a:	71 f4       	brne	.+28     	; 0x358 <MDIO_voidSetPinValue+0xb6>
	    {
		    CLR_BIT(PORTC,Copy_u8Pin);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <MDIO_voidSetPinValue+0xa8>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <MDIO_voidSetPinValue+0xa4>
 34e:	ba 01       	movw	r22, r20
 350:	60 95       	com	r22
 352:	62 23       	and	r22, r18
 354:	65 bb       	out	0x15, r22	; 21
 356:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	59 f5       	brne	.+86     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTC,Copy_u8Pin);
 35c:	25 b3       	in	r18, 0x15	; 21
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <MDIO_voidSetPinValue+0xc8>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <MDIO_voidSetPinValue+0xc4>
 36e:	ba 01       	movw	r22, r20
 370:	62 2b       	or	r22, r18
 372:	65 bb       	out	0x15, r22	; 21
 374:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOD :
	    if (Copy_u8Value==LOW)
 376:	44 23       	and	r20, r20
 378:	71 f4       	brne	.+28     	; 0x396 <MDIO_voidSetPinValue+0xf4>
	    {
		    CLR_BIT(PORTD,Copy_u8Pin);
 37a:	22 b3       	in	r18, 0x12	; 18
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <MDIO_voidSetPinValue+0xe6>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <MDIO_voidSetPinValue+0xe2>
 38c:	ba 01       	movw	r22, r20
 38e:	60 95       	com	r22
 390:	62 23       	and	r22, r18
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	61 f4       	brne	.+24     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTD,Copy_u8Pin);
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MDIO_voidSetPinValue+0x106>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MDIO_voidSetPinValue+0x102>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 2b       	or	r22, r18
 3b0:	62 bb       	out	0x12, r22	; 18
 3b2:	08 95       	ret

000003b4 <MDIO_u8GetPinValue>:
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
	 switch(Copy_u8Port)
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	89 f0       	breq	.+34     	; 0x3da <MDIO_u8GetPinValue+0x26>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <MDIO_u8GetPinValue+0x12>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	b9 f0       	breq	.+46     	; 0x3ee <MDIO_u8GetPinValue+0x3a>
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	49 f5       	brne	.+82     	; 0x416 <MDIO_u8GetPinValue+0x62>
 3c4:	1e c0       	rjmp	.+60     	; 0x402 <MDIO_u8GetPinValue+0x4e>
	 {
		 case DIOA :
		 Local_u8value=GET_BIT(PINA,Copy_u8Pin);
 3c6:	29 b3       	in	r18, 0x19	; 25
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	c9 01       	movw	r24, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <MDIO_u8GetPinValue+0x1e>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <MDIO_u8GetPinValue+0x1a>
 3d6:	81 70       	andi	r24, 0x01	; 1
		 break;
 3d8:	08 95       	ret
		 case DIOB :
		 Local_u8value=GET_BIT(PINB,Copy_u8Pin);
 3da:	26 b3       	in	r18, 0x16	; 22
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <MDIO_u8GetPinValue+0x32>
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <MDIO_u8GetPinValue+0x2e>
 3ea:	81 70       	andi	r24, 0x01	; 1
		 break;
 3ec:	08 95       	ret
		 case DIOC :
		 Local_u8value=GET_BIT(PINC,Copy_u8Pin);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	c9 01       	movw	r24, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MDIO_u8GetPinValue+0x46>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MDIO_u8GetPinValue+0x42>
 3fe:	81 70       	andi	r24, 0x01	; 1
		 break;
 400:	08 95       	ret
		 case DIOD :
		 Local_u8value=GET_BIT(PIND,Copy_u8Pin);
 402:	20 b3       	in	r18, 0x10	; 16
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	c9 01       	movw	r24, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <MDIO_u8GetPinValue+0x5a>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <MDIO_u8GetPinValue+0x56>
 412:	81 70       	andi	r24, 0x01	; 1
		 break;		 		 
 414:	08 95       	ret
	    
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
 416:	80 e0       	ldi	r24, 0x00	; 0
		 break;		 		 
		 default: break;
		 
	 }
	 return Local_u8value;
}
 418:	08 95       	ret

0000041a <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	switch(Copy_u8Port)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	49 f0       	breq	.+18     	; 0x430 <MDIO_voidSetPortValue+0x16>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	28 f0       	brcs	.+10     	; 0x42c <MDIO_voidSetPortValue+0x12>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	39 f0       	breq	.+14     	; 0x434 <MDIO_voidSetPortValue+0x1a>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	41 f4       	brne	.+16     	; 0x43a <MDIO_voidSetPortValue+0x20>
 42a:	06 c0       	rjmp	.+12     	; 0x438 <MDIO_voidSetPortValue+0x1e>
	{
		case DIOA :
		PORTA=Copy_u8Value;
 42c:	6b bb       	out	0x1b, r22	; 27
		break;
 42e:	08 95       	ret
		case DIOB :
		PORTB=Copy_u8Value;
 430:	68 bb       	out	0x18, r22	; 24
		break;	
 432:	08 95       	ret
		case DIOC :
		PORTC=Copy_u8Value;
 434:	65 bb       	out	0x15, r22	; 21
		break;
 436:	08 95       	ret
		case DIOD :
		PORTD=Copy_u8Value;
 438:	62 bb       	out	0x12, r22	; 18
 43a:	08 95       	ret

0000043c <MDIO_voidTogglePin>:
	}
}

void MDIO_voidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	a1 f0       	breq	.+40     	; 0x468 <MDIO_voidTogglePin+0x2c>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	28 f0       	brcs	.+10     	; 0x44e <MDIO_voidTogglePin+0x12>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	e9 f0       	breq	.+58     	; 0x482 <MDIO_voidTogglePin+0x46>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	a1 f5       	brne	.+104    	; 0x4b4 <MDIO_voidTogglePin+0x78>
 44c:	27 c0       	rjmp	.+78     	; 0x49c <MDIO_voidTogglePin+0x60>
	{
		
		case DIOA :
		TOG_BIT(PORTA,Copy_u8Pin);
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <MDIO_voidTogglePin+0x20>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <MDIO_voidTogglePin+0x1c>
 460:	ba 01       	movw	r22, r20
 462:	62 27       	eor	r22, r18
 464:	6b bb       	out	0x1b, r22	; 27
		break;
 466:	08 95       	ret
		case DIOB :
		TOG_BIT(PORTB,Copy_u8Pin);
 468:	28 b3       	in	r18, 0x18	; 24
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <MDIO_voidTogglePin+0x3a>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <MDIO_voidTogglePin+0x36>
 47a:	ba 01       	movw	r22, r20
 47c:	62 27       	eor	r22, r18
 47e:	68 bb       	out	0x18, r22	; 24
		break;
 480:	08 95       	ret
		case DIOC :
		TOG_BIT(PORTC,Copy_u8Pin);
 482:	25 b3       	in	r18, 0x15	; 21
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	ac 01       	movw	r20, r24
 48a:	02 c0       	rjmp	.+4      	; 0x490 <MDIO_voidTogglePin+0x54>
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <MDIO_voidTogglePin+0x50>
 494:	ba 01       	movw	r22, r20
 496:	62 27       	eor	r22, r18
 498:	65 bb       	out	0x15, r22	; 21
		break;
 49a:	08 95       	ret
		case DIOD :
		TOG_BIT(PORTD,Copy_u8Pin);
 49c:	22 b3       	in	r18, 0x12	; 18
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	ac 01       	movw	r20, r24
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <MDIO_voidTogglePin+0x6e>
 4a6:	44 0f       	add	r20, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <MDIO_voidTogglePin+0x6a>
 4ae:	ba 01       	movw	r22, r20
 4b0:	62 27       	eor	r22, r18
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <MDIO_voidTogglePort>:
	}
}

void MDIO_voidTogglePort(u8 Copy_u8Port)
{
	    switch(Copy_u8Port)
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	59 f0       	breq	.+22     	; 0x4d0 <MDIO_voidTogglePort+0x1a>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	28 f0       	brcs	.+10     	; 0x4c8 <MDIO_voidTogglePort+0x12>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <MDIO_voidTogglePort+0x22>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	81 f4       	brne	.+32     	; 0x4e6 <MDIO_voidTogglePort+0x30>
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <MDIO_voidTogglePort+0x2a>
		{
		case DIOA :
		PORTA=~PORTA;
 4c8:	8b b3       	in	r24, 0x1b	; 27
 4ca:	80 95       	com	r24
 4cc:	8b bb       	out	0x1b, r24	; 27
		break;
 4ce:	08 95       	ret
		case DIOB :
		PORTB=~PORTB;
 4d0:	88 b3       	in	r24, 0x18	; 24
 4d2:	80 95       	com	r24
 4d4:	88 bb       	out	0x18, r24	; 24
		break;
 4d6:	08 95       	ret
		case DIOC :
		PORTC=~PORTC;
 4d8:	85 b3       	in	r24, 0x15	; 21
 4da:	80 95       	com	r24
 4dc:	85 bb       	out	0x15, r24	; 21
		break;
 4de:	08 95       	ret
		case DIOD :
		PORTD=~PORTD;
 4e0:	82 b3       	in	r24, 0x12	; 18
 4e2:	80 95       	com	r24
 4e4:	82 bb       	out	0x12, r24	; 18
 4e6:	08 95       	ret

000004e8 <MDIO_voidEnablePullUp>:
		}			
}

void MDIO_voidEnablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	a1 f0       	breq	.+40     	; 0x514 <MDIO_voidEnablePullUp+0x2c>
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	28 f0       	brcs	.+10     	; 0x4fa <MDIO_voidEnablePullUp+0x12>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	e9 f0       	breq	.+58     	; 0x52e <MDIO_voidEnablePullUp+0x46>
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	a1 f5       	brne	.+104    	; 0x560 <MDIO_voidEnablePullUp+0x78>
 4f8:	27 c0       	rjmp	.+78     	; 0x548 <MDIO_voidEnablePullUp+0x60>
	{
		case DIOA : 
		SET_BIT(PORTA,Copy_u8Pin);
 4fa:	2b b3       	in	r18, 0x1b	; 27
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <MDIO_voidEnablePullUp+0x20>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <MDIO_voidEnablePullUp+0x1c>
 50c:	ba 01       	movw	r22, r20
 50e:	62 2b       	or	r22, r18
 510:	6b bb       	out	0x1b, r22	; 27
		break;
 512:	08 95       	ret
		case DIOB :
		SET_BIT(PORTB,Copy_u8Pin);
 514:	28 b3       	in	r18, 0x18	; 24
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	ac 01       	movw	r20, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <MDIO_voidEnablePullUp+0x3a>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <MDIO_voidEnablePullUp+0x36>
 526:	ba 01       	movw	r22, r20
 528:	62 2b       	or	r22, r18
 52a:	68 bb       	out	0x18, r22	; 24
		break;
 52c:	08 95       	ret
		case DIOC :
		SET_BIT(PORTC,Copy_u8Pin);
 52e:	25 b3       	in	r18, 0x15	; 21
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	ac 01       	movw	r20, r24
 536:	02 c0       	rjmp	.+4      	; 0x53c <MDIO_voidEnablePullUp+0x54>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <MDIO_voidEnablePullUp+0x50>
 540:	ba 01       	movw	r22, r20
 542:	62 2b       	or	r22, r18
 544:	65 bb       	out	0x15, r22	; 21
		break;
 546:	08 95       	ret
		case DIOD :
		SET_BIT(PORTD,Copy_u8Pin);
 548:	22 b3       	in	r18, 0x12	; 18
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	ac 01       	movw	r20, r24
 550:	02 c0       	rjmp	.+4      	; 0x556 <MDIO_voidEnablePullUp+0x6e>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <MDIO_voidEnablePullUp+0x6a>
 55a:	ba 01       	movw	r22, r20
 55c:	62 2b       	or	r22, r18
 55e:	62 bb       	out	0x12, r22	; 18
 560:	08 95       	ret

00000562 <MDIO_voidDisablePullUp>:
	}
}

void MDIO_voidDisablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
		switch(Copy_u8Port)
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	a9 f0       	breq	.+42     	; 0x590 <MDIO_voidDisablePullUp+0x2e>
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	28 f0       	brcs	.+10     	; 0x574 <MDIO_voidDisablePullUp+0x12>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	f9 f0       	breq	.+62     	; 0x5ac <MDIO_voidDisablePullUp+0x4a>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	c1 f5       	brne	.+112    	; 0x5e2 <MDIO_voidDisablePullUp+0x80>
 572:	2a c0       	rjmp	.+84     	; 0x5c8 <MDIO_voidDisablePullUp+0x66>
		{
			case DIOA :
			CLR_BIT(PORTA,Copy_u8Pin);
 574:	2b b3       	in	r18, 0x1b	; 27
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	ac 01       	movw	r20, r24
 57c:	02 c0       	rjmp	.+4      	; 0x582 <MDIO_voidDisablePullUp+0x20>
 57e:	44 0f       	add	r20, r20
 580:	55 1f       	adc	r21, r21
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <MDIO_voidDisablePullUp+0x1c>
 586:	ba 01       	movw	r22, r20
 588:	60 95       	com	r22
 58a:	62 23       	and	r22, r18
 58c:	6b bb       	out	0x1b, r22	; 27
			break;
 58e:	08 95       	ret
			case DIOB :
			CLR_BIT(PORTB,Copy_u8Pin);
 590:	28 b3       	in	r18, 0x18	; 24
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	ac 01       	movw	r20, r24
 598:	02 c0       	rjmp	.+4      	; 0x59e <MDIO_voidDisablePullUp+0x3c>
 59a:	44 0f       	add	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <MDIO_voidDisablePullUp+0x38>
 5a2:	ba 01       	movw	r22, r20
 5a4:	60 95       	com	r22
 5a6:	62 23       	and	r22, r18
 5a8:	68 bb       	out	0x18, r22	; 24
			break;
 5aa:	08 95       	ret
			case DIOC :
			CLR_BIT(PORTC,Copy_u8Pin);
 5ac:	25 b3       	in	r18, 0x15	; 21
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	ac 01       	movw	r20, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <MDIO_voidDisablePullUp+0x58>
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <MDIO_voidDisablePullUp+0x54>
 5be:	ba 01       	movw	r22, r20
 5c0:	60 95       	com	r22
 5c2:	62 23       	and	r22, r18
 5c4:	65 bb       	out	0x15, r22	; 21
			break;
 5c6:	08 95       	ret
			case DIOD :
			CLR_BIT(PORTD,Copy_u8Pin);
 5c8:	22 b3       	in	r18, 0x12	; 18
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <MDIO_voidDisablePullUp+0x74>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <MDIO_voidDisablePullUp+0x70>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	62 bb       	out	0x12, r22	; 18
 5e2:	08 95       	ret

000005e4 <MDIO_voidWriteLowNibble>:
		}
}

void MDIO_voidWriteLowNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value&=0x0f;
 5e4:	6f 70       	andi	r22, 0x0F	; 15
	switch(Copy_u8Port)
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	71 f0       	breq	.+28     	; 0x606 <MDIO_voidWriteLowNibble+0x22>
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	28 f0       	brcs	.+10     	; 0x5f8 <MDIO_voidWriteLowNibble+0x14>
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	89 f0       	breq	.+34     	; 0x614 <MDIO_voidWriteLowNibble+0x30>
 5f2:	83 30       	cpi	r24, 0x03	; 3
 5f4:	e1 f4       	brne	.+56     	; 0x62e <MDIO_voidWriteLowNibble+0x4a>
 5f6:	15 c0       	rjmp	.+42     	; 0x622 <MDIO_voidWriteLowNibble+0x3e>
	{
		case DIOA :
		PORTA&=0xf0;
 5f8:	8b b3       	in	r24, 0x1b	; 27
 5fa:	80 7f       	andi	r24, 0xF0	; 240
 5fc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
 5fe:	8b b3       	in	r24, 0x1b	; 27
 600:	68 2b       	or	r22, r24
 602:	6b bb       	out	0x1b, r22	; 27
		break;
 604:	08 95       	ret
		case DIOB :
		PORTB&=0xf0;
 606:	88 b3       	in	r24, 0x18	; 24
 608:	80 7f       	andi	r24, 0xF0	; 240
 60a:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
 60c:	88 b3       	in	r24, 0x18	; 24
 60e:	68 2b       	or	r22, r24
 610:	68 bb       	out	0x18, r22	; 24
		break;
 612:	08 95       	ret
		case DIOC :
		PORTC&=0xf0;
 614:	85 b3       	in	r24, 0x15	; 21
 616:	80 7f       	andi	r24, 0xF0	; 240
 618:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
 61a:	85 b3       	in	r24, 0x15	; 21
 61c:	68 2b       	or	r22, r24
 61e:	65 bb       	out	0x15, r22	; 21
		break;
 620:	08 95       	ret
		case DIOD :
		PORTD&=0xf0;
 622:	82 b3       	in	r24, 0x12	; 18
 624:	80 7f       	andi	r24, 0xF0	; 240
 626:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
 628:	82 b3       	in	r24, 0x12	; 18
 62a:	68 2b       	or	r22, r24
 62c:	62 bb       	out	0x12, r22	; 18
 62e:	08 95       	ret

00000630 <MDIO_voidWriteHighNibble>:
	
}

void MDIO_voidWriteHighNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value<<=4;
 630:	62 95       	swap	r22
 632:	60 7f       	andi	r22, 0xF0	; 240
	switch(Copy_u8Port)
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	71 f0       	breq	.+28     	; 0x654 <MDIO_voidWriteHighNibble+0x24>
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	28 f0       	brcs	.+10     	; 0x646 <MDIO_voidWriteHighNibble+0x16>
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	89 f0       	breq	.+34     	; 0x662 <MDIO_voidWriteHighNibble+0x32>
 640:	83 30       	cpi	r24, 0x03	; 3
 642:	e1 f4       	brne	.+56     	; 0x67c <MDIO_voidWriteHighNibble+0x4c>
 644:	15 c0       	rjmp	.+42     	; 0x670 <MDIO_voidWriteHighNibble+0x40>
	{
		case DIOA :
		PORTA&=0x0f;
 646:	8b b3       	in	r24, 0x1b	; 27
 648:	8f 70       	andi	r24, 0x0F	; 15
 64a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
 64c:	8b b3       	in	r24, 0x1b	; 27
 64e:	68 2b       	or	r22, r24
 650:	6b bb       	out	0x1b, r22	; 27
		break;
 652:	08 95       	ret
		case DIOB :
		PORTB&=0x0f;
 654:	88 b3       	in	r24, 0x18	; 24
 656:	8f 70       	andi	r24, 0x0F	; 15
 658:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
 65a:	88 b3       	in	r24, 0x18	; 24
 65c:	68 2b       	or	r22, r24
 65e:	68 bb       	out	0x18, r22	; 24
		break;
 660:	08 95       	ret
		case DIOC :
		PORTC&=0x0f;
 662:	85 b3       	in	r24, 0x15	; 21
 664:	8f 70       	andi	r24, 0x0F	; 15
 666:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
 668:	85 b3       	in	r24, 0x15	; 21
 66a:	68 2b       	or	r22, r24
 66c:	65 bb       	out	0x15, r22	; 21
		break;
 66e:	08 95       	ret
		case DIOD :
		PORTD&=0x0f;
 670:	82 b3       	in	r24, 0x12	; 18
 672:	8f 70       	andi	r24, 0x0F	; 15
 674:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
 676:	82 b3       	in	r24, 0x12	; 18
 678:	68 2b       	or	r22, r24
 67a:	62 bb       	out	0x12, r22	; 18
 67c:	08 95       	ret

0000067e <MINT_voidSetGlobalInterrupt>:

#include "Interupt_interface.h"
#include "Interrupt_private.h"
void MINT_voidSetGlobalInterrupt(void)
{
	SET_BIT(SREG,7);
 67e:	8f b7       	in	r24, 0x3f	; 63
 680:	80 68       	ori	r24, 0x80	; 128
 682:	8f bf       	out	0x3f, r24	; 63
}
 684:	08 95       	ret

00000686 <MINT_voidClrGlobalInterrupt>:

void MINT_voidClrGlobalInterrupt(void)
{
	CLR_BIT(SREG,7);
 686:	8f b7       	in	r24, 0x3f	; 63
 688:	8f 77       	andi	r24, 0x7F	; 127
 68a:	8f bf       	out	0x3f, r24	; 63
}
 68c:	08 95       	ret

0000068e <MINT_voidEnableExtInterrupt>:

void MINT_voidEnableExtInterrupt(u8 Copy_u8INTNumber)
{
	switch(Copy_u8INTNumber)
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	49 f0       	breq	.+18     	; 0x6a4 <MINT_voidEnableExtInterrupt+0x16>
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	18 f0       	brcs	.+6      	; 0x69c <MINT_voidEnableExtInterrupt+0xe>
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	61 f4       	brne	.+24     	; 0x6b2 <MINT_voidEnableExtInterrupt+0x24>
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <MINT_voidEnableExtInterrupt+0x1e>
	{
		case 0 : SET_BIT(GICR,6); break;
 69c:	8b b7       	in	r24, 0x3b	; 59
 69e:	80 64       	ori	r24, 0x40	; 64
 6a0:	8b bf       	out	0x3b, r24	; 59
 6a2:	08 95       	ret
		case 1 : SET_BIT(GICR,7); break;
 6a4:	8b b7       	in	r24, 0x3b	; 59
 6a6:	80 68       	ori	r24, 0x80	; 128
 6a8:	8b bf       	out	0x3b, r24	; 59
 6aa:	08 95       	ret
		case 2 : SET_BIT(GICR,5); break;
 6ac:	8b b7       	in	r24, 0x3b	; 59
 6ae:	80 62       	ori	r24, 0x20	; 32
 6b0:	8b bf       	out	0x3b, r24	; 59
 6b2:	08 95       	ret

000006b4 <MINT_voidDisableExtInterrupt>:
		default: break;
	}
}
void MINT_voidDisableExtInterrupt(u8 Copy_u8INTNumber)
{
		switch(Copy_u8INTNumber)
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	49 f0       	breq	.+18     	; 0x6ca <MINT_voidDisableExtInterrupt+0x16>
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	18 f0       	brcs	.+6      	; 0x6c2 <MINT_voidDisableExtInterrupt+0xe>
 6bc:	82 30       	cpi	r24, 0x02	; 2
 6be:	61 f4       	brne	.+24     	; 0x6d8 <MINT_voidDisableExtInterrupt+0x24>
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <MINT_voidDisableExtInterrupt+0x1e>
		{
			case 0 : CLR_BIT(GICR,6); break;
 6c2:	8b b7       	in	r24, 0x3b	; 59
 6c4:	8f 7b       	andi	r24, 0xBF	; 191
 6c6:	8b bf       	out	0x3b, r24	; 59
 6c8:	08 95       	ret
			case 1 : CLR_BIT(GICR,7); break;
 6ca:	8b b7       	in	r24, 0x3b	; 59
 6cc:	8f 77       	andi	r24, 0x7F	; 127
 6ce:	8b bf       	out	0x3b, r24	; 59
 6d0:	08 95       	ret
			case 2 : CLR_BIT(GICR,5); break;
 6d2:	8b b7       	in	r24, 0x3b	; 59
 6d4:	8f 7d       	andi	r24, 0xDF	; 223
 6d6:	8b bf       	out	0x3b, r24	; 59
 6d8:	08 95       	ret

000006da <MINT_voidSetSenseControlMode>:
			default: break;
		}
}
void MINT_voidSetSenseControlMode(u8 Copy_u8INTNumber,u8 Copy_u8Mode)
{
	if (Copy_u8INTNumber==0)
 6da:	88 23       	and	r24, r24
 6dc:	31 f5       	brne	.+76     	; 0x72a <MINT_voidSetSenseControlMode+0x50>
	{
		switch(Copy_u8Mode)
 6de:	61 30       	cpi	r22, 0x01	; 1
 6e0:	79 f0       	breq	.+30     	; 0x700 <MINT_voidSetSenseControlMode+0x26>
 6e2:	61 30       	cpi	r22, 0x01	; 1
 6e4:	30 f0       	brcs	.+12     	; 0x6f2 <MINT_voidSetSenseControlMode+0x18>
 6e6:	62 30       	cpi	r22, 0x02	; 2
 6e8:	91 f0       	breq	.+36     	; 0x70e <MINT_voidSetSenseControlMode+0x34>
 6ea:	63 30       	cpi	r22, 0x03	; 3
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <MINT_voidSetSenseControlMode+0x16>
 6ee:	52 c0       	rjmp	.+164    	; 0x794 <MINT_voidSetSenseControlMode+0xba>
 6f0:	15 c0       	rjmp	.+42     	; 0x71c <MINT_voidSetSenseControlMode+0x42>
		{
			case LOW_LEVEL_SENSE_MODE : 
			CLR_BIT(MCUCR,0);
 6f2:	85 b7       	in	r24, 0x35	; 53
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
 6f8:	85 b7       	in	r24, 0x35	; 53
 6fa:	8d 7f       	andi	r24, 0xFD	; 253
 6fc:	85 bf       	out	0x35, r24	; 53
			break;
 6fe:	08 95       	ret
			case ANY_LOGICAL_CHANGE_MODE :
			SET_BIT(MCUCR,0);
 700:	85 b7       	in	r24, 0x35	; 53
 702:	81 60       	ori	r24, 0x01	; 1
 704:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
 706:	85 b7       	in	r24, 0x35	; 53
 708:	8d 7f       	andi	r24, 0xFD	; 253
 70a:	85 bf       	out	0x35, r24	; 53
			break;			
 70c:	08 95       	ret
			case FALLING_EDGE_MODE :
			CLR_BIT(MCUCR,0);
 70e:	85 b7       	in	r24, 0x35	; 53
 710:	8e 7f       	andi	r24, 0xFE	; 254
 712:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
 714:	85 b7       	in	r24, 0x35	; 53
 716:	82 60       	ori	r24, 0x02	; 2
 718:	85 bf       	out	0x35, r24	; 53
			break;
 71a:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCR,0);
 71c:	85 b7       	in	r24, 0x35	; 53
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
 722:	85 b7       	in	r24, 0x35	; 53
 724:	82 60       	ori	r24, 0x02	; 2
 726:	85 bf       	out	0x35, r24	; 53
			break;
 728:	08 95       	ret
			default: break;					
		}
	}
	else if (Copy_u8INTNumber==1)
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	29 f5       	brne	.+74     	; 0x778 <MINT_voidSetSenseControlMode+0x9e>
	{
		switch(Copy_u8Mode)
 72e:	61 30       	cpi	r22, 0x01	; 1
 730:	71 f0       	breq	.+28     	; 0x74e <MINT_voidSetSenseControlMode+0x74>
 732:	61 30       	cpi	r22, 0x01	; 1
 734:	28 f0       	brcs	.+10     	; 0x740 <MINT_voidSetSenseControlMode+0x66>
 736:	62 30       	cpi	r22, 0x02	; 2
 738:	89 f0       	breq	.+34     	; 0x75c <MINT_voidSetSenseControlMode+0x82>
 73a:	63 30       	cpi	r22, 0x03	; 3
 73c:	59 f5       	brne	.+86     	; 0x794 <MINT_voidSetSenseControlMode+0xba>
 73e:	15 c0       	rjmp	.+42     	; 0x76a <MINT_voidSetSenseControlMode+0x90>
		{
			case LOW_LEVEL_SENSE_MODE :
			CLR_BIT(MCUCR,2);
 740:	85 b7       	in	r24, 0x35	; 53
 742:	8b 7f       	andi	r24, 0xFB	; 251
 744:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
 746:	85 b7       	in	r24, 0x35	; 53
 748:	87 7f       	andi	r24, 0xF7	; 247
 74a:	85 bf       	out	0x35, r24	; 53
			break;
 74c:	08 95       	ret
			case ANY_LOGICAL_CHANGE_MODE :
			SET_BIT(MCUCR,2);
 74e:	85 b7       	in	r24, 0x35	; 53
 750:	84 60       	ori	r24, 0x04	; 4
 752:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
 754:	85 b7       	in	r24, 0x35	; 53
 756:	87 7f       	andi	r24, 0xF7	; 247
 758:	85 bf       	out	0x35, r24	; 53
			break;
 75a:	08 95       	ret
			case FALLING_EDGE_MODE :
			CLR_BIT(MCUCR,2);
 75c:	85 b7       	in	r24, 0x35	; 53
 75e:	8b 7f       	andi	r24, 0xFB	; 251
 760:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
 762:	85 b7       	in	r24, 0x35	; 53
 764:	88 60       	ori	r24, 0x08	; 8
 766:	85 bf       	out	0x35, r24	; 53
			break;
 768:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCR,2);
 76a:	85 b7       	in	r24, 0x35	; 53
 76c:	84 60       	ori	r24, 0x04	; 4
 76e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
 770:	85 b7       	in	r24, 0x35	; 53
 772:	88 60       	ori	r24, 0x08	; 8
 774:	85 bf       	out	0x35, r24	; 53
			break;
 776:	08 95       	ret
			default: break;
		}		

	}
	else if (Copy_u8INTNumber==2)
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	61 f4       	brne	.+24     	; 0x794 <MINT_voidSetSenseControlMode+0xba>
	{
		switch(Copy_u8Mode)
 77c:	62 30       	cpi	r22, 0x02	; 2
 77e:	19 f0       	breq	.+6      	; 0x786 <MINT_voidSetSenseControlMode+0xac>
 780:	63 30       	cpi	r22, 0x03	; 3
 782:	41 f4       	brne	.+16     	; 0x794 <MINT_voidSetSenseControlMode+0xba>
 784:	04 c0       	rjmp	.+8      	; 0x78e <MINT_voidSetSenseControlMode+0xb4>
		{
			case FALLING_EDGE_MODE : 
			CLR_BIT(MCUCSR,6);
 786:	84 b7       	in	r24, 0x34	; 52
 788:	8f 7b       	andi	r24, 0xBF	; 191
 78a:	84 bf       	out	0x34, r24	; 52
			break;
 78c:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCSR,6);
 78e:	84 b7       	in	r24, 0x34	; 52
 790:	80 64       	ori	r24, 0x40	; 64
 792:	84 bf       	out	0x34, r24	; 52
 794:	08 95       	ret

00000796 <HKEYPAD_voidInit>:


void HKEYPAD_voidInit(void)
{
   /* define first four pins as output pins */
   MDIO_voidSetPinDirection(KEYPAD_PORT,0,OUTPUT);	
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	41 e0       	ldi	r20, 0x01	; 1
 79c:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,1,OUTPUT);
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,2,OUTPUT);
 7aa:	83 e0       	ldi	r24, 0x03	; 3
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,3,OUTPUT);
 7b4:	83 e0       	ldi	r24, 0x03	; 3
 7b6:	63 e0       	ldi	r22, 0x03	; 3
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   /* define second four pins as input pins */
   MDIO_voidSetPinDirection(KEYPAD_PORT,4,INPUT);
 7be:	83 e0       	ldi	r24, 0x03	; 3
 7c0:	64 e0       	ldi	r22, 0x04	; 4
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,5,INPUT);
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	65 e0       	ldi	r22, 0x05	; 5
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,6,INPUT);
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	66 e0       	ldi	r22, 0x06	; 6
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,7,INPUT); 
 7dc:	83 e0       	ldi	r24, 0x03	; 3
 7de:	67 e0       	ldi	r22, 0x07	; 7
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   /* Enable internal pull up for input pins */
   MDIO_voidEnablePullUp(KEYPAD_PORT,4);  
 7e6:	83 e0       	ldi	r24, 0x03	; 3
 7e8:	64 e0       	ldi	r22, 0x04	; 4
 7ea:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,5); 
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	65 e0       	ldi	r22, 0x05	; 5
 7f2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,6); 
 7f6:	83 e0       	ldi	r24, 0x03	; 3
 7f8:	66 e0       	ldi	r22, 0x06	; 6
 7fa:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,7); 
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	67 e0       	ldi	r22, 0x07	; 7
 802:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MDIO_voidEnablePullUp>
}
 806:	08 95       	ret

00000808 <HKEYPAD_u8Read>:

u8 HKEYPAD_u8Read(void)
{
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
 814:	60 97       	sbiw	r28, 0x10	; 16
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	f8 94       	cli
 81a:	de bf       	out	0x3e, r29	; 62
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	cd bf       	out	0x3d, r28	; 61
 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 820:	de 01       	movw	r26, r28
 822:	11 96       	adiw	r26, 0x01	; 1
 824:	e0 e6       	ldi	r30, 0x60	; 96
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 e1       	ldi	r24, 0x10	; 16
 82a:	01 90       	ld	r0, Z+
 82c:	0d 92       	st	X+, r0
 82e:	81 50       	subi	r24, 0x01	; 1
 830:	e1 f7       	brne	.-8      	; 0x82a <HKEYPAD_u8Read+0x22>
 u8 row,coloumn,x;
 u8 returnval=0xff;
 for(row=0;row<4;row++)
 832:	00 e0       	ldi	r16, 0x00	; 0
 {
	 MDIO_voidSetPinValue(DIOD,0,1);
 834:	83 e0       	ldi	r24, 0x03	; 3
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	41 e0       	ldi	r20, 0x01	; 1
 83a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,1,1);
 83e:	83 e0       	ldi	r24, 0x03	; 3
 840:	61 e0       	ldi	r22, 0x01	; 1
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,2,1);
 848:	83 e0       	ldi	r24, 0x03	; 3
 84a:	62 e0       	ldi	r22, 0x02	; 2
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,3,1);
 852:	83 e0       	ldi	r24, 0x03	; 3
 854:	63 e0       	ldi	r22, 0x03	; 3
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,row,0);
 85c:	83 e0       	ldi	r24, 0x03	; 3
 85e:	60 2f       	mov	r22, r16
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	 
	 for(coloumn=0;coloumn<4;coloumn++)
 866:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 x=MDIO_u8GetPinValue(DIOD,(coloumn+4));
 868:	61 2f       	mov	r22, r17
 86a:	6c 5f       	subi	r22, 0xFC	; 252
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MDIO_u8GetPinValue>
		 if(x==0)
 872:	88 23       	and	r24, r24
 874:	61 f4       	brne	.+24     	; 0x88e <__stack+0x2f>
		 {
			 returnval=arr[row][coloumn];
 876:	e0 2f       	mov	r30, r16
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	ee 0f       	add	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	ee 0f       	add	r30, r30
 880:	ff 1f       	adc	r31, r31
 882:	e1 0f       	add	r30, r17
 884:	f1 1d       	adc	r31, r1
 886:	ec 0f       	add	r30, r28
 888:	fd 1f       	adc	r31, r29
 88a:	81 81       	ldd	r24, Z+1	; 0x01
 88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
	 MDIO_voidSetPinValue(DIOD,1,1);
	 MDIO_voidSetPinValue(DIOD,2,1);
	 MDIO_voidSetPinValue(DIOD,3,1);
	 MDIO_voidSetPinValue(DIOD,row,0);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
 88e:	1f 5f       	subi	r17, 0xFF	; 255
 890:	14 30       	cpi	r17, 0x04	; 4
 892:	51 f7       	brne	.-44     	; 0x868 <__stack+0x9>
 894:	0b c0       	rjmp	.+22     	; 0x8ac <__stack+0x4d>
		 break;
	 }
 }
 return returnval ;
		
 896:	60 96       	adiw	r28, 0x10	; 16
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	f8 94       	cli
 89c:	de bf       	out	0x3e, r29	; 62
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	cd bf       	out	0x3d, r28	; 61
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret
u8 HKEYPAD_u8Read(void)
{
 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 u8 row,coloumn,x;
 u8 returnval=0xff;
 for(row=0;row<4;row++)
 8ac:	0f 5f       	subi	r16, 0xFF	; 255
 8ae:	04 30       	cpi	r16, 0x04	; 4
 8b0:	09 f6       	brne	.-126    	; 0x834 <HKEYPAD_u8Read+0x2c>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	f0 cf       	rjmp	.-32     	; 0x896 <__stack+0x37>

000008b6 <HLCD_voidSendFallingEdge>:
   #endif
   
}

 void HLCD_voidSendFallingEdge(u8 Copy_u8Port)
{
 8b6:	cf 93       	push	r28
 8b8:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(Copy_u8Port,EN,HIGH);
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_ms(4);
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	80 e8       	ldi	r24, 0x80	; 128
 8c8:	90 e4       	ldi	r25, 0x40	; 64
 8ca:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	MDIO_voidSetPinValue(Copy_u8Port,EN,LOW);
 8ce:	8c 2f       	mov	r24, r28
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	40 e0       	ldi	r20, 0x00	; 0
 8d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_ms(4);	
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	80 e8       	ldi	r24, 0x80	; 128
 8de:	90 e4       	ldi	r25, 0x40	; 64
 8e0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 8e4:	cf 91       	pop	r28
 8e6:	08 95       	ret

000008e8 <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8Command)
{
 8e8:	68 2f       	mov	r22, r24
	#if   LCD_MODE == EIGHT_BITS_MODE 
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Command);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,LOW);
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	61 e0       	ldi	r22, 0x01	; 1
 8f4:	40 e0       	ldi	r20, 0x00	; 0
 8f6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <HLCD_voidSendFallingEdge>
	HLCD_voidSendFallingEdge(DIOB);
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Command);
	HLCD_voidSendFallingEdge(DIOB);
	Delay_ms(2);
	#endif
}
 900:	08 95       	ret

00000902 <HLCD_voidInit>:
#include "LCD_config.h"

void HLCD_voidInit(void)
{
	/* WAIT 400MS */
	Delay_ms(400);
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	88 ec       	ldi	r24, 0xC8	; 200
 908:	93 e4       	ldi	r25, 0x43	; 67
 90a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/* define EN , RS , RW as output pins */
    MDIO_voidSetPinDirection(DIOB,EN,OUTPUT);
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	41 e0       	ldi	r20, 0x01	; 1
 914:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RS,OUTPUT);
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	61 e0       	ldi	r22, 0x01	; 1
 91c:	41 e0       	ldi	r20, 0x01	; 1
 91e:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RW,OUTPUT);
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	62 e0       	ldi	r22, 0x02	; 2
 926:	41 e0       	ldi	r20, 0x01	; 1
 928:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   #if   LCD_MODE == EIGHT_BITS_MODE
   /* define lcd port as output */
   MDIO_voidSetPortDirection(LCD_PORT,OUTPUT);  
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	61 e0       	ldi	r22, 0x01	; 1
 930:	0e 94 24 01 	call	0x248	; 0x248 <MDIO_voidSetPortDirection>
   MDIO_voidSetPinValue(DIOB,RW,LOW); // set RW BIN WITH 0 TO WRITE
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	62 e0       	ldi	r22, 0x02	; 2
 938:	40 e0       	ldi	r20, 0x00	; 0
 93a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
   HLCD_voidSendCommand(EIGHT_BITS_CMD);  // to set the LCD at eight bit mode
 93e:	88 e3       	ldi	r24, 0x38	; 56
 940:	0e 94 74 04 	call	0x8e8	; 0x8e8 <HLCD_voidSendCommand>
   Delay_ms(4);
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	80 e8       	ldi	r24, 0x80	; 128
 94a:	90 e4       	ldi	r25, 0x40	; 64
 94c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF); 
 950:	8c e0       	ldi	r24, 0x0C	; 12
 952:	0e 94 74 04 	call	0x8e8	; 0x8e8 <HLCD_voidSendCommand>
   Delay_ms(4);
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	80 e8       	ldi	r24, 0x80	; 128
 95c:	90 e4       	ldi	r25, 0x40	; 64
 95e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(CLR_SCREEN_CMD);
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	0e 94 74 04 	call	0x8e8	; 0x8e8 <HLCD_voidSendCommand>
   Delay_ms(20);
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	80 ea       	ldi	r24, 0xA0	; 160
 96e:	91 e4       	ldi	r25, 0x41	; 65
 970:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(ENTRY_MODE_CMD);
 974:	86 e0       	ldi	r24, 0x06	; 6
 976:	0e 94 74 04 	call	0x8e8	; 0x8e8 <HLCD_voidSendCommand>
   Delay_ms(4);  
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	80 e8       	ldi	r24, 0x80	; 128
 980:	90 e4       	ldi	r25, 0x40	; 64
 982:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   Delay_ms(4);
   
   
   #endif
   
}
 986:	08 95       	ret

00000988 <HLCD_voidSendChar>:
	Delay_ms(2);
	#endif
}

void HLCD_voidSendChar(u8 Copy_u8Char)
{
 988:	68 2f       	mov	r22, r24
	#if   LCD_MODE== EIGHT_BITS_MODE
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Char); // Write char on port
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,HIGH);      // set RS pin to write data
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	61 e0       	ldi	r22, 0x01	; 1
 994:	41 e0       	ldi	r20, 0x01	; 1
 996:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);    // enable LCD
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <HLCD_voidSendFallingEdge>
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Char);
	HLCD_voidSendFallingEdge(DIOB);	
	Delay_ms(2);
	#endif
	
}
 9a0:	08 95       	ret

000009a2 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8pString)
{
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	8c 01       	movw	r16, r24
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
 9aa:	fc 01       	movw	r30, r24
 9ac:	80 81       	ld	r24, Z
 9ae:	88 23       	and	r24, r24
 9b0:	51 f0       	breq	.+20     	; 0x9c6 <HLCD_voidSendString+0x24>
 9b2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
 9b4:	0e 94 c4 04 	call	0x988	; 0x988 <HLCD_voidSendChar>
}

void HLCD_voidSendString(u8 *Copy_u8pString)
{
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
 9b8:	cf 5f       	subi	r28, 0xFF	; 255
 9ba:	f8 01       	movw	r30, r16
 9bc:	ec 0f       	add	r30, r28
 9be:	f1 1d       	adc	r31, r1
 9c0:	80 81       	ld	r24, Z
 9c2:	88 23       	and	r24, r24
 9c4:	b9 f7       	brne	.-18     	; 0x9b4 <HLCD_voidSendString+0x12>
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
	}
}
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	08 95       	ret

000009ce <HLCD_voidClearScreen>:

void HLCD_voidClearScreen(void)
{
	HLCD_voidSendCommand(CLR_SCREEN_CMD);
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <HLCD_voidSendCommand>
	Delay_ms(20);
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	80 ea       	ldi	r24, 0xA0	; 160
 9da:	91 e4       	ldi	r25, 0x41	; 65
 9dc:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 9e0:	08 95       	ret

000009e2 <HLCD_voidMoveCursor>:

void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
 9e2:	28 2f       	mov	r18, r24
 9e4:	21 50       	subi	r18, 0x01	; 1
 9e6:	22 30       	cpi	r18, 0x02	; 2
 9e8:	70 f4       	brcc	.+28     	; 0xa06 <HLCD_voidMoveCursor+0x24>
 9ea:	66 23       	and	r22, r22
 9ec:	71 f0       	breq	.+28     	; 0xa0a <HLCD_voidMoveCursor+0x28>
 9ee:	61 31       	cpi	r22, 0x11	; 17
 9f0:	70 f4       	brcc	.+28     	; 0xa0e <HLCD_voidMoveCursor+0x2c>
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
	}
	else if(Copy_u8Row==1)
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	19 f4       	brne	.+6      	; 0x9fc <HLCD_voidMoveCursor+0x1a>
	{
		Local_u8ReqLocation=0x80+Copy_u8Col-1;
 9f6:	96 2f       	mov	r25, r22
 9f8:	91 58       	subi	r25, 0x81	; 129
 9fa:	0a c0       	rjmp	.+20     	; 0xa10 <HLCD_voidMoveCursor+0x2e>
	}
	else if (Copy_u8Row==2)
 9fc:	82 30       	cpi	r24, 0x02	; 2
 9fe:	41 f4       	brne	.+16     	; 0xa10 <HLCD_voidMoveCursor+0x2e>
	{
		Local_u8ReqLocation=0xc0+Copy_u8Col-1;
 a00:	96 2f       	mov	r25, r22
 a02:	91 54       	subi	r25, 0x41	; 65
 a04:	05 c0       	rjmp	.+10     	; 0xa10 <HLCD_voidMoveCursor+0x2e>
void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
 a06:	90 e8       	ldi	r25, 0x80	; 128
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <HLCD_voidMoveCursor+0x2e>
 a0a:	90 e8       	ldi	r25, 0x80	; 128
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <HLCD_voidMoveCursor+0x2e>
 a0e:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		// do nothing
	}
	HLCD_voidSendCommand(Local_u8ReqLocation);
 a10:	89 2f       	mov	r24, r25
 a12:	0e 94 74 04 	call	0x8e8	; 0x8e8 <HLCD_voidSendCommand>
	Delay_ms(2);
 a16:	60 e0       	ldi	r22, 0x00	; 0
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	90 e4       	ldi	r25, 0x40	; 64
 a1e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	
 a22:	08 95       	ret

00000a24 <main>:
volatile u32 counter=0;
volatile u32 flag=0;


int main(void)
{
 a24:	cf 92       	push	r12
 a26:	df 92       	push	r13
 a28:	ef 92       	push	r14
 a2a:	ff 92       	push	r15
	HLCD_voidInit();
 a2c:	0e 94 81 04 	call	0x902	; 0x902 <HLCD_voidInit>
	HKEYPAD_voidInit();
 a30:	0e 94 cb 03 	call	0x796	; 0x796 <HKEYPAD_voidInit>
	HLCD_voidSendString("Guess the number");
 a34:	80 e7       	ldi	r24, 0x70	; 112
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HLCD_voidSendString>
	HLCD_voidMoveCursor(2,1);
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	61 e0       	ldi	r22, 0x01	; 1
 a40:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <HLCD_voidMoveCursor>
	HLCD_voidSendString("3+?=8");
 a44:	81 e8       	ldi	r24, 0x81	; 129
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HLCD_voidSendString>
	MTIMER0_voidInit();
 a4c:	0e 94 a4 05 	call	0xb48	; 0xb48 <MTIMER0_voidInit>
	MTIMER0_voidEnableInterrupt();
 a50:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MTIMER0_voidEnableInterrupt>
	u8 status;
	do 
	{
		if (counter>=1000)
		{
			flag=1;
 a54:	cc 24       	eor	r12, r12
 a56:	dd 24       	eor	r13, r13
 a58:	76 01       	movw	r14, r12
 a5a:	c3 94       	inc	r12
	MTIMER0_voidInit();
	MTIMER0_voidEnableInterrupt();
	u8 status;
	do 
	{
		if (counter>=1000)
 a5c:	80 91 ac 00 	lds	r24, 0x00AC
 a60:	90 91 ad 00 	lds	r25, 0x00AD
 a64:	a0 91 ae 00 	lds	r26, 0x00AE
 a68:	b0 91 af 00 	lds	r27, 0x00AF
 a6c:	88 3e       	cpi	r24, 0xE8	; 232
 a6e:	23 e0       	ldi	r18, 0x03	; 3
 a70:	92 07       	cpc	r25, r18
 a72:	20 e0       	ldi	r18, 0x00	; 0
 a74:	a2 07       	cpc	r26, r18
 a76:	20 e0       	ldi	r18, 0x00	; 0
 a78:	b2 07       	cpc	r27, r18
 a7a:	40 f0       	brcs	.+16     	; 0xa8c <main+0x68>
		{
			flag=1;
 a7c:	c0 92 a8 00 	sts	0x00A8, r12
 a80:	d0 92 a9 00 	sts	0x00A9, r13
 a84:	e0 92 aa 00 	sts	0x00AA, r14
 a88:	f0 92 ab 00 	sts	0x00AB, r15
		}
		
		status=HKEYPAD_u8Read();
 a8c:	0e 94 04 04 	call	0x808	; 0x808 <HKEYPAD_u8Read>
	} while ( (status==0xff) && (flag==0) );
 a90:	8f 3f       	cpi	r24, 0xFF	; 255
 a92:	b9 f4       	brne	.+46     	; 0xac2 <main+0x9e>
 a94:	80 91 a8 00 	lds	r24, 0x00A8
 a98:	90 91 a9 00 	lds	r25, 0x00A9
 a9c:	a0 91 aa 00 	lds	r26, 0x00AA
 aa0:	b0 91 ab 00 	lds	r27, 0x00AB
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	a1 05       	cpc	r26, r1
 aa8:	b1 05       	cpc	r27, r1
 aaa:	c1 f2       	breq	.-80     	; 0xa5c <main+0x38>
	if (status==0xff)
	{
		HLCD_voidClearScreen();
 aac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <HLCD_voidClearScreen>
		HLCD_voidMoveCursor(2,4);
 ab0:	82 e0       	ldi	r24, 0x02	; 2
 ab2:	64 e0       	ldi	r22, 0x04	; 4
 ab4:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <HLCD_voidMoveCursor>
		HLCD_voidSendString("Time over");
 ab8:	87 e8       	ldi	r24, 0x87	; 135
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HLCD_voidSendString>
 ac0:	17 c0       	rjmp	.+46     	; 0xaf0 <main+0xcc>
	}
	else if (status=='5')
 ac2:	85 33       	cpi	r24, 0x35	; 53
 ac4:	59 f4       	brne	.+22     	; 0xadc <main+0xb8>
	{
		HLCD_voidClearScreen();
 ac6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <HLCD_voidClearScreen>
		HLCD_voidMoveCursor(2,4);
 aca:	82 e0       	ldi	r24, 0x02	; 2
 acc:	64 e0       	ldi	r22, 0x04	; 4
 ace:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <HLCD_voidMoveCursor>
		HLCD_voidSendString("Great");		
 ad2:	81 e9       	ldi	r24, 0x91	; 145
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HLCD_voidSendString>
 ada:	0a c0       	rjmp	.+20     	; 0xaf0 <main+0xcc>
	}
	else
	{
		HLCD_voidClearScreen();
 adc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <HLCD_voidClearScreen>
		HLCD_voidMoveCursor(2,1);
 ae0:	82 e0       	ldi	r24, 0x02	; 2
 ae2:	61 e0       	ldi	r22, 0x01	; 1
 ae4:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <HLCD_voidMoveCursor>
		HLCD_voidSendString("Try another time");		
 ae8:	87 e9       	ldi	r24, 0x97	; 151
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <HLCD_voidSendString>
	}
	

}
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	ff 90       	pop	r15
 af6:	ef 90       	pop	r14
 af8:	df 90       	pop	r13
 afa:	cf 90       	pop	r12
 afc:	08 95       	ret

00000afe <__vector_10>:
/* ISR for timer 0 compare match */
void __vector_10(void)__attribute__((signal,used));
void __vector_10(void)
{
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	8f 93       	push	r24
 b0a:	9f 93       	push	r25
 b0c:	af 93       	push	r26
 b0e:	bf 93       	push	r27
	
	counter++;
 b10:	80 91 ac 00 	lds	r24, 0x00AC
 b14:	90 91 ad 00 	lds	r25, 0x00AD
 b18:	a0 91 ae 00 	lds	r26, 0x00AE
 b1c:	b0 91 af 00 	lds	r27, 0x00AF
 b20:	01 96       	adiw	r24, 0x01	; 1
 b22:	a1 1d       	adc	r26, r1
 b24:	b1 1d       	adc	r27, r1
 b26:	80 93 ac 00 	sts	0x00AC, r24
 b2a:	90 93 ad 00 	sts	0x00AD, r25
 b2e:	a0 93 ae 00 	sts	0x00AE, r26
 b32:	b0 93 af 00 	sts	0x00AF, r27
 b36:	bf 91       	pop	r27
 b38:	af 91       	pop	r26
 b3a:	9f 91       	pop	r25
 b3c:	8f 91       	pop	r24
 b3e:	0f 90       	pop	r0
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	0f 90       	pop	r0
 b44:	1f 90       	pop	r1
 b46:	18 95       	reti

00000b48 <MTIMER0_voidInit>:
  #elif TIMER0_CLOCK == CPU_DIV_BY_256
  CLR_BIT(TCCR0,0);
  CLR_BIT(TCCR0,1);
  SET_BIT(TCCR0,2);  
  #elif TIMER0_CLOCK == CPU_DIV_BY_1024
  SET_BIT(TCCR0,0);
 b48:	83 b7       	in	r24, 0x33	; 51
 b4a:	81 60       	ori	r24, 0x01	; 1
 b4c:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,1);
 b4e:	83 b7       	in	r24, 0x33	; 51
 b50:	8d 7f       	andi	r24, 0xFD	; 253
 b52:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,2);  
 b54:	83 b7       	in	r24, 0x33	; 51
 b56:	84 60       	ori	r24, 0x04	; 4
 b58:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,3);
  #elif TIMER0_MODE == PHASE_CORRECT_PWM_MODE
  SET_BIT(TCCR0,6);
  CLR_BIT(TCCR0,3);  
  #elif TIMER0_MODE == CTC_MODE
  CLR_BIT(TCCR0,6);
 b5a:	83 b7       	in	r24, 0x33	; 51
 b5c:	8f 7b       	andi	r24, 0xBF	; 191
 b5e:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,3);  
 b60:	83 b7       	in	r24, 0x33	; 51
 b62:	88 60       	ori	r24, 0x08	; 8
 b64:	83 bf       	out	0x33, r24	; 51
  #elif TIMER0_MODE == FAST_PWM_MODE
  SET_BIT(TCCR0,6);
  SET_BIT(TCCR0,3);  
  #endif	
  	OCR0=80;
 b66:	80 e5       	ldi	r24, 0x50	; 80
 b68:	8c bf       	out	0x3c, r24	; 60
}
 b6a:	08 95       	ret

00000b6c <MTIMER0_voidEnableInterrupt>:

void MTIMER0_voidEnableInterrupt(void)
{
	MINT_voidSetGlobalInterrupt(); 
 b6c:	0e 94 3f 03 	call	0x67e	; 0x67e <MINT_voidSetGlobalInterrupt>
	
  #if   TIMER0_MODE == OVER_FLOW_MODE
  SET_BIT(TIMSK,0);  //enable interrupt in case of overflow
  #elif TIMER0_MODE == CTC_MODE
  SET_BIT(TIMSK,1); //enable interrupt in case of compare match
 b70:	89 b7       	in	r24, 0x39	; 57
 b72:	82 60       	ori	r24, 0x02	; 2
 b74:	89 bf       	out	0x39, r24	; 57
  #endif	
 b76:	08 95       	ret

00000b78 <__divsf3>:
 b78:	0c d0       	rcall	.+24     	; 0xb92 <__divsf3x>
 b7a:	a9 c0       	rjmp	.+338    	; 0xcce <__fp_round>
 b7c:	a1 d0       	rcall	.+322    	; 0xcc0 <__fp_pscB>
 b7e:	40 f0       	brcs	.+16     	; 0xb90 <__divsf3+0x18>
 b80:	98 d0       	rcall	.+304    	; 0xcb2 <__fp_pscA>
 b82:	30 f0       	brcs	.+12     	; 0xb90 <__divsf3+0x18>
 b84:	21 f4       	brne	.+8      	; 0xb8e <__divsf3+0x16>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	19 f0       	breq	.+6      	; 0xb90 <__divsf3+0x18>
 b8a:	8a c0       	rjmp	.+276    	; 0xca0 <__fp_inf>
 b8c:	51 11       	cpse	r21, r1
 b8e:	d3 c0       	rjmp	.+422    	; 0xd36 <__fp_szero>
 b90:	8d c0       	rjmp	.+282    	; 0xcac <__fp_nan>

00000b92 <__divsf3x>:
 b92:	ae d0       	rcall	.+348    	; 0xcf0 <__fp_split3>
 b94:	98 f3       	brcs	.-26     	; 0xb7c <__divsf3+0x4>

00000b96 <__divsf3_pse>:
 b96:	99 23       	and	r25, r25
 b98:	c9 f3       	breq	.-14     	; 0xb8c <__divsf3+0x14>
 b9a:	55 23       	and	r21, r21
 b9c:	b1 f3       	breq	.-20     	; 0xb8a <__divsf3+0x12>
 b9e:	95 1b       	sub	r25, r21
 ba0:	55 0b       	sbc	r21, r21
 ba2:	bb 27       	eor	r27, r27
 ba4:	aa 27       	eor	r26, r26
 ba6:	62 17       	cp	r22, r18
 ba8:	73 07       	cpc	r23, r19
 baa:	84 07       	cpc	r24, r20
 bac:	38 f0       	brcs	.+14     	; 0xbbc <__divsf3_pse+0x26>
 bae:	9f 5f       	subi	r25, 0xFF	; 255
 bb0:	5f 4f       	sbci	r21, 0xFF	; 255
 bb2:	22 0f       	add	r18, r18
 bb4:	33 1f       	adc	r19, r19
 bb6:	44 1f       	adc	r20, r20
 bb8:	aa 1f       	adc	r26, r26
 bba:	a9 f3       	breq	.-22     	; 0xba6 <__divsf3_pse+0x10>
 bbc:	33 d0       	rcall	.+102    	; 0xc24 <__divsf3_pse+0x8e>
 bbe:	0e 2e       	mov	r0, r30
 bc0:	3a f0       	brmi	.+14     	; 0xbd0 <__divsf3_pse+0x3a>
 bc2:	e0 e8       	ldi	r30, 0x80	; 128
 bc4:	30 d0       	rcall	.+96     	; 0xc26 <__divsf3_pse+0x90>
 bc6:	91 50       	subi	r25, 0x01	; 1
 bc8:	50 40       	sbci	r21, 0x00	; 0
 bca:	e6 95       	lsr	r30
 bcc:	00 1c       	adc	r0, r0
 bce:	ca f7       	brpl	.-14     	; 0xbc2 <__divsf3_pse+0x2c>
 bd0:	29 d0       	rcall	.+82     	; 0xc24 <__divsf3_pse+0x8e>
 bd2:	fe 2f       	mov	r31, r30
 bd4:	27 d0       	rcall	.+78     	; 0xc24 <__divsf3_pse+0x8e>
 bd6:	66 0f       	add	r22, r22
 bd8:	77 1f       	adc	r23, r23
 bda:	88 1f       	adc	r24, r24
 bdc:	bb 1f       	adc	r27, r27
 bde:	26 17       	cp	r18, r22
 be0:	37 07       	cpc	r19, r23
 be2:	48 07       	cpc	r20, r24
 be4:	ab 07       	cpc	r26, r27
 be6:	b0 e8       	ldi	r27, 0x80	; 128
 be8:	09 f0       	breq	.+2      	; 0xbec <__divsf3_pse+0x56>
 bea:	bb 0b       	sbc	r27, r27
 bec:	80 2d       	mov	r24, r0
 bee:	bf 01       	movw	r22, r30
 bf0:	ff 27       	eor	r31, r31
 bf2:	93 58       	subi	r25, 0x83	; 131
 bf4:	5f 4f       	sbci	r21, 0xFF	; 255
 bf6:	2a f0       	brmi	.+10     	; 0xc02 <__divsf3_pse+0x6c>
 bf8:	9e 3f       	cpi	r25, 0xFE	; 254
 bfa:	51 05       	cpc	r21, r1
 bfc:	68 f0       	brcs	.+26     	; 0xc18 <__divsf3_pse+0x82>
 bfe:	50 c0       	rjmp	.+160    	; 0xca0 <__fp_inf>
 c00:	9a c0       	rjmp	.+308    	; 0xd36 <__fp_szero>
 c02:	5f 3f       	cpi	r21, 0xFF	; 255
 c04:	ec f3       	brlt	.-6      	; 0xc00 <__divsf3_pse+0x6a>
 c06:	98 3e       	cpi	r25, 0xE8	; 232
 c08:	dc f3       	brlt	.-10     	; 0xc00 <__divsf3_pse+0x6a>
 c0a:	86 95       	lsr	r24
 c0c:	77 95       	ror	r23
 c0e:	67 95       	ror	r22
 c10:	b7 95       	ror	r27
 c12:	f7 95       	ror	r31
 c14:	9f 5f       	subi	r25, 0xFF	; 255
 c16:	c9 f7       	brne	.-14     	; 0xc0a <__divsf3_pse+0x74>
 c18:	88 0f       	add	r24, r24
 c1a:	91 1d       	adc	r25, r1
 c1c:	96 95       	lsr	r25
 c1e:	87 95       	ror	r24
 c20:	97 f9       	bld	r25, 7
 c22:	08 95       	ret
 c24:	e1 e0       	ldi	r30, 0x01	; 1
 c26:	66 0f       	add	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	bb 1f       	adc	r27, r27
 c2e:	62 17       	cp	r22, r18
 c30:	73 07       	cpc	r23, r19
 c32:	84 07       	cpc	r24, r20
 c34:	ba 07       	cpc	r27, r26
 c36:	20 f0       	brcs	.+8      	; 0xc40 <__divsf3_pse+0xaa>
 c38:	62 1b       	sub	r22, r18
 c3a:	73 0b       	sbc	r23, r19
 c3c:	84 0b       	sbc	r24, r20
 c3e:	ba 0b       	sbc	r27, r26
 c40:	ee 1f       	adc	r30, r30
 c42:	88 f7       	brcc	.-30     	; 0xc26 <__divsf3_pse+0x90>
 c44:	e0 95       	com	r30
 c46:	08 95       	ret

00000c48 <__fixunssfsi>:
 c48:	5b d0       	rcall	.+182    	; 0xd00 <__fp_splitA>
 c4a:	88 f0       	brcs	.+34     	; 0xc6e <__fixunssfsi+0x26>
 c4c:	9f 57       	subi	r25, 0x7F	; 127
 c4e:	90 f0       	brcs	.+36     	; 0xc74 <__fixunssfsi+0x2c>
 c50:	b9 2f       	mov	r27, r25
 c52:	99 27       	eor	r25, r25
 c54:	b7 51       	subi	r27, 0x17	; 23
 c56:	a0 f0       	brcs	.+40     	; 0xc80 <__fixunssfsi+0x38>
 c58:	d1 f0       	breq	.+52     	; 0xc8e <__fixunssfsi+0x46>
 c5a:	66 0f       	add	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	88 1f       	adc	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	1a f0       	brmi	.+6      	; 0xc6a <__fixunssfsi+0x22>
 c64:	ba 95       	dec	r27
 c66:	c9 f7       	brne	.-14     	; 0xc5a <__fixunssfsi+0x12>
 c68:	12 c0       	rjmp	.+36     	; 0xc8e <__fixunssfsi+0x46>
 c6a:	b1 30       	cpi	r27, 0x01	; 1
 c6c:	81 f0       	breq	.+32     	; 0xc8e <__fixunssfsi+0x46>
 c6e:	62 d0       	rcall	.+196    	; 0xd34 <__fp_zero>
 c70:	b1 e0       	ldi	r27, 0x01	; 1
 c72:	08 95       	ret
 c74:	5f c0       	rjmp	.+190    	; 0xd34 <__fp_zero>
 c76:	67 2f       	mov	r22, r23
 c78:	78 2f       	mov	r23, r24
 c7a:	88 27       	eor	r24, r24
 c7c:	b8 5f       	subi	r27, 0xF8	; 248
 c7e:	39 f0       	breq	.+14     	; 0xc8e <__fixunssfsi+0x46>
 c80:	b9 3f       	cpi	r27, 0xF9	; 249
 c82:	cc f3       	brlt	.-14     	; 0xc76 <__fixunssfsi+0x2e>
 c84:	86 95       	lsr	r24
 c86:	77 95       	ror	r23
 c88:	67 95       	ror	r22
 c8a:	b3 95       	inc	r27
 c8c:	d9 f7       	brne	.-10     	; 0xc84 <__fixunssfsi+0x3c>
 c8e:	3e f4       	brtc	.+14     	; 0xc9e <__fixunssfsi+0x56>
 c90:	90 95       	com	r25
 c92:	80 95       	com	r24
 c94:	70 95       	com	r23
 c96:	61 95       	neg	r22
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	08 95       	ret

00000ca0 <__fp_inf>:
 ca0:	97 f9       	bld	r25, 7
 ca2:	9f 67       	ori	r25, 0x7F	; 127
 ca4:	80 e8       	ldi	r24, 0x80	; 128
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	08 95       	ret

00000cac <__fp_nan>:
 cac:	9f ef       	ldi	r25, 0xFF	; 255
 cae:	80 ec       	ldi	r24, 0xC0	; 192
 cb0:	08 95       	ret

00000cb2 <__fp_pscA>:
 cb2:	00 24       	eor	r0, r0
 cb4:	0a 94       	dec	r0
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	09 06       	cpc	r0, r25
 cbe:	08 95       	ret

00000cc0 <__fp_pscB>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	12 16       	cp	r1, r18
 cc6:	13 06       	cpc	r1, r19
 cc8:	14 06       	cpc	r1, r20
 cca:	05 06       	cpc	r0, r21
 ccc:	08 95       	ret

00000cce <__fp_round>:
 cce:	09 2e       	mov	r0, r25
 cd0:	03 94       	inc	r0
 cd2:	00 0c       	add	r0, r0
 cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0xc>
 cd6:	88 23       	and	r24, r24
 cd8:	52 f0       	brmi	.+20     	; 0xcee <__fp_round+0x20>
 cda:	bb 0f       	add	r27, r27
 cdc:	40 f4       	brcc	.+16     	; 0xcee <__fp_round+0x20>
 cde:	bf 2b       	or	r27, r31
 ce0:	11 f4       	brne	.+4      	; 0xce6 <__fp_round+0x18>
 ce2:	60 ff       	sbrs	r22, 0
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <__fp_round+0x20>
 ce6:	6f 5f       	subi	r22, 0xFF	; 255
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	08 95       	ret

00000cf0 <__fp_split3>:
 cf0:	57 fd       	sbrc	r21, 7
 cf2:	90 58       	subi	r25, 0x80	; 128
 cf4:	44 0f       	add	r20, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	59 f0       	breq	.+22     	; 0xd10 <__fp_splitA+0x10>
 cfa:	5f 3f       	cpi	r21, 0xFF	; 255
 cfc:	71 f0       	breq	.+28     	; 0xd1a <__fp_splitA+0x1a>
 cfe:	47 95       	ror	r20

00000d00 <__fp_splitA>:
 d00:	88 0f       	add	r24, r24
 d02:	97 fb       	bst	r25, 7
 d04:	99 1f       	adc	r25, r25
 d06:	61 f0       	breq	.+24     	; 0xd20 <__fp_splitA+0x20>
 d08:	9f 3f       	cpi	r25, 0xFF	; 255
 d0a:	79 f0       	breq	.+30     	; 0xd2a <__fp_splitA+0x2a>
 d0c:	87 95       	ror	r24
 d0e:	08 95       	ret
 d10:	12 16       	cp	r1, r18
 d12:	13 06       	cpc	r1, r19
 d14:	14 06       	cpc	r1, r20
 d16:	55 1f       	adc	r21, r21
 d18:	f2 cf       	rjmp	.-28     	; 0xcfe <__fp_split3+0xe>
 d1a:	46 95       	lsr	r20
 d1c:	f1 df       	rcall	.-30     	; 0xd00 <__fp_splitA>
 d1e:	08 c0       	rjmp	.+16     	; 0xd30 <__fp_splitA+0x30>
 d20:	16 16       	cp	r1, r22
 d22:	17 06       	cpc	r1, r23
 d24:	18 06       	cpc	r1, r24
 d26:	99 1f       	adc	r25, r25
 d28:	f1 cf       	rjmp	.-30     	; 0xd0c <__fp_splitA+0xc>
 d2a:	86 95       	lsr	r24
 d2c:	71 05       	cpc	r23, r1
 d2e:	61 05       	cpc	r22, r1
 d30:	08 94       	sec
 d32:	08 95       	ret

00000d34 <__fp_zero>:
 d34:	e8 94       	clt

00000d36 <__fp_szero>:
 d36:	bb 27       	eor	r27, r27
 d38:	66 27       	eor	r22, r22
 d3a:	77 27       	eor	r23, r23
 d3c:	cb 01       	movw	r24, r22
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret

00000d42 <__mulsf3>:
 d42:	0b d0       	rcall	.+22     	; 0xd5a <__mulsf3x>
 d44:	c4 cf       	rjmp	.-120    	; 0xcce <__fp_round>
 d46:	b5 df       	rcall	.-150    	; 0xcb2 <__fp_pscA>
 d48:	28 f0       	brcs	.+10     	; 0xd54 <__mulsf3+0x12>
 d4a:	ba df       	rcall	.-140    	; 0xcc0 <__fp_pscB>
 d4c:	18 f0       	brcs	.+6      	; 0xd54 <__mulsf3+0x12>
 d4e:	95 23       	and	r25, r21
 d50:	09 f0       	breq	.+2      	; 0xd54 <__mulsf3+0x12>
 d52:	a6 cf       	rjmp	.-180    	; 0xca0 <__fp_inf>
 d54:	ab cf       	rjmp	.-170    	; 0xcac <__fp_nan>
 d56:	11 24       	eor	r1, r1
 d58:	ee cf       	rjmp	.-36     	; 0xd36 <__fp_szero>

00000d5a <__mulsf3x>:
 d5a:	ca df       	rcall	.-108    	; 0xcf0 <__fp_split3>
 d5c:	a0 f3       	brcs	.-24     	; 0xd46 <__mulsf3+0x4>

00000d5e <__mulsf3_pse>:
 d5e:	95 9f       	mul	r25, r21
 d60:	d1 f3       	breq	.-12     	; 0xd56 <__mulsf3+0x14>
 d62:	95 0f       	add	r25, r21
 d64:	50 e0       	ldi	r21, 0x00	; 0
 d66:	55 1f       	adc	r21, r21
 d68:	62 9f       	mul	r22, r18
 d6a:	f0 01       	movw	r30, r0
 d6c:	72 9f       	mul	r23, r18
 d6e:	bb 27       	eor	r27, r27
 d70:	f0 0d       	add	r31, r0
 d72:	b1 1d       	adc	r27, r1
 d74:	63 9f       	mul	r22, r19
 d76:	aa 27       	eor	r26, r26
 d78:	f0 0d       	add	r31, r0
 d7a:	b1 1d       	adc	r27, r1
 d7c:	aa 1f       	adc	r26, r26
 d7e:	64 9f       	mul	r22, r20
 d80:	66 27       	eor	r22, r22
 d82:	b0 0d       	add	r27, r0
 d84:	a1 1d       	adc	r26, r1
 d86:	66 1f       	adc	r22, r22
 d88:	82 9f       	mul	r24, r18
 d8a:	22 27       	eor	r18, r18
 d8c:	b0 0d       	add	r27, r0
 d8e:	a1 1d       	adc	r26, r1
 d90:	62 1f       	adc	r22, r18
 d92:	73 9f       	mul	r23, r19
 d94:	b0 0d       	add	r27, r0
 d96:	a1 1d       	adc	r26, r1
 d98:	62 1f       	adc	r22, r18
 d9a:	83 9f       	mul	r24, r19
 d9c:	a0 0d       	add	r26, r0
 d9e:	61 1d       	adc	r22, r1
 da0:	22 1f       	adc	r18, r18
 da2:	74 9f       	mul	r23, r20
 da4:	33 27       	eor	r19, r19
 da6:	a0 0d       	add	r26, r0
 da8:	61 1d       	adc	r22, r1
 daa:	23 1f       	adc	r18, r19
 dac:	84 9f       	mul	r24, r20
 dae:	60 0d       	add	r22, r0
 db0:	21 1d       	adc	r18, r1
 db2:	82 2f       	mov	r24, r18
 db4:	76 2f       	mov	r23, r22
 db6:	6a 2f       	mov	r22, r26
 db8:	11 24       	eor	r1, r1
 dba:	9f 57       	subi	r25, 0x7F	; 127
 dbc:	50 40       	sbci	r21, 0x00	; 0
 dbe:	8a f0       	brmi	.+34     	; 0xde2 <__mulsf3_pse+0x84>
 dc0:	e1 f0       	breq	.+56     	; 0xdfa <__mulsf3_pse+0x9c>
 dc2:	88 23       	and	r24, r24
 dc4:	4a f0       	brmi	.+18     	; 0xdd8 <__mulsf3_pse+0x7a>
 dc6:	ee 0f       	add	r30, r30
 dc8:	ff 1f       	adc	r31, r31
 dca:	bb 1f       	adc	r27, r27
 dcc:	66 1f       	adc	r22, r22
 dce:	77 1f       	adc	r23, r23
 dd0:	88 1f       	adc	r24, r24
 dd2:	91 50       	subi	r25, 0x01	; 1
 dd4:	50 40       	sbci	r21, 0x00	; 0
 dd6:	a9 f7       	brne	.-22     	; 0xdc2 <__mulsf3_pse+0x64>
 dd8:	9e 3f       	cpi	r25, 0xFE	; 254
 dda:	51 05       	cpc	r21, r1
 ddc:	70 f0       	brcs	.+28     	; 0xdfa <__mulsf3_pse+0x9c>
 dde:	60 cf       	rjmp	.-320    	; 0xca0 <__fp_inf>
 de0:	aa cf       	rjmp	.-172    	; 0xd36 <__fp_szero>
 de2:	5f 3f       	cpi	r21, 0xFF	; 255
 de4:	ec f3       	brlt	.-6      	; 0xde0 <__mulsf3_pse+0x82>
 de6:	98 3e       	cpi	r25, 0xE8	; 232
 de8:	dc f3       	brlt	.-10     	; 0xde0 <__mulsf3_pse+0x82>
 dea:	86 95       	lsr	r24
 dec:	77 95       	ror	r23
 dee:	67 95       	ror	r22
 df0:	b7 95       	ror	r27
 df2:	f7 95       	ror	r31
 df4:	e7 95       	ror	r30
 df6:	9f 5f       	subi	r25, 0xFF	; 255
 df8:	c1 f7       	brne	.-16     	; 0xdea <__mulsf3_pse+0x8c>
 dfa:	fe 2b       	or	r31, r30
 dfc:	88 0f       	add	r24, r24
 dfe:	91 1d       	adc	r25, r1
 e00:	96 95       	lsr	r25
 e02:	87 95       	ror	r24
 e04:	97 f9       	bld	r25, 7
 e06:	08 95       	ret

00000e08 <_exit>:
 e08:	f8 94       	cli

00000e0a <__stop_program>:
 e0a:	ff cf       	rjmp	.-2      	; 0xe0a <__stop_program>
