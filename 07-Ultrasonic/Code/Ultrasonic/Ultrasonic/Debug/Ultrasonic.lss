
Ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000010a8  0000113c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800098  00800098  00001174  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000032c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010bd  00000000  00000000  00003488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d1  00000000  00000000  00004545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000826  00000000  00000000  00004a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000523c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000acf  00000000  00000000  00005b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 06 	call	0xcca	; 0xcca <main>
      8a:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#endif

void Delay_ms(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000) * F_CPU )/2;
      92:	20 e0       	ldi	r18, 0x00	; 0
      94:	30 e0       	ldi	r19, 0x00	; 0
      96:	4a e7       	ldi	r20, 0x7A	; 122
      98:	54 e4       	ldi	r21, 0x44	; 68
      9a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	34 e2       	ldi	r19, 0x24	; 36
      a2:	44 e7       	ldi	r20, 0x74	; 116
      a4:	59 e4       	ldi	r21, 0x49	; 73
      a6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	5f e3       	ldi	r21, 0x3F	; 63
      b2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
      b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fixunssfsi>
      ba:	46 2f       	mov	r20, r22
      bc:	57 2f       	mov	r21, r23
      be:	68 2f       	mov	r22, r24
      c0:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
      c2:	41 15       	cp	r20, r1
      c4:	51 05       	cpc	r21, r1
      c6:	61 05       	cpc	r22, r1
      c8:	71 05       	cpc	r23, r1
      ca:	59 f0       	breq	.+22     	; 0xe2 <Delay_ms+0x50>
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	dc 01       	movw	r26, r24
      d2:	01 96       	adiw	r24, 0x01	; 1
      d4:	a1 1d       	adc	r26, r1
      d6:	b1 1d       	adc	r27, r1
      d8:	84 17       	cp	r24, r20
      da:	95 07       	cpc	r25, r21
      dc:	a6 07       	cpc	r26, r22
      de:	b7 07       	cpc	r27, r23
      e0:	c1 f7       	brne	.-16     	; 0xd2 <Delay_ms+0x40>
      e2:	08 95       	ret

000000e4 <Delay_us>:
}

void Delay_us(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000000) * F_CPU )/2;
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	34 e2       	ldi	r19, 0x24	; 36
      e8:	44 e7       	ldi	r20, 0x74	; 116
      ea:	59 e4       	ldi	r21, 0x49	; 73
      ec:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	34 e2       	ldi	r19, 0x24	; 36
      f4:	44 e7       	ldi	r20, 0x74	; 116
      f6:	59 e4       	ldi	r21, 0x49	; 73
      f8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	5f e3       	ldi	r21, 0x3F	; 63
     104:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
     108:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fixunssfsi>
     10c:	46 2f       	mov	r20, r22
     10e:	57 2f       	mov	r21, r23
     110:	68 2f       	mov	r22, r24
     112:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
     114:	41 15       	cp	r20, r1
     116:	51 05       	cpc	r21, r1
     118:	61 05       	cpc	r22, r1
     11a:	71 05       	cpc	r23, r1
     11c:	59 f0       	breq	.+22     	; 0x134 <Delay_us+0x50>
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	dc 01       	movw	r26, r24
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	84 17       	cp	r24, r20
     12c:	95 07       	cpc	r25, r21
     12e:	a6 07       	cpc	r26, r22
     130:	b7 07       	cpc	r27, r23
     132:	c1 f7       	brne	.-16     	; 0x124 <Delay_us+0x40>
     134:	08 95       	ret

00000136 <MDIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    switch(Copy_u8Port)
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	49 f1       	breq	.+82     	; 0x18c <MDIO_voidSetPinDirection+0x56>
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	38 f0       	brcs	.+14     	; 0x14c <MDIO_voidSetPinDirection+0x16>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	09 f4       	brne	.+2      	; 0x144 <MDIO_voidSetPinDirection+0xe>
     142:	44 c0       	rjmp	.+136    	; 0x1cc <MDIO_voidSetPinDirection+0x96>
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	09 f0       	breq	.+2      	; 0x14a <MDIO_voidSetPinDirection+0x14>
     148:	7e c0       	rjmp	.+252    	; 0x246 <MDIO_voidSetPinDirection+0x110>
     14a:	5f c0       	rjmp	.+190    	; 0x20a <MDIO_voidSetPinDirection+0xd4>
	{
		case DIOA : 
		if (Copy_u8Direction==INPUT)
     14c:	44 23       	and	r20, r20
     14e:	71 f4       	brne	.+28     	; 0x16c <MDIO_voidSetPinDirection+0x36>
		{
			CLR_BIT(DDRA,Copy_u8Pin);
     150:	2a b3       	in	r18, 0x1a	; 26
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	ac 01       	movw	r20, r24
     158:	02 c0       	rjmp	.+4      	; 0x15e <MDIO_voidSetPinDirection+0x28>
     15a:	44 0f       	add	r20, r20
     15c:	55 1f       	adc	r21, r21
     15e:	6a 95       	dec	r22
     160:	e2 f7       	brpl	.-8      	; 0x15a <MDIO_voidSetPinDirection+0x24>
     162:	ba 01       	movw	r22, r20
     164:	60 95       	com	r22
     166:	62 23       	and	r22, r18
     168:	6a bb       	out	0x1a, r22	; 26
     16a:	08 95       	ret
		} 
		else if (Copy_u8Direction==OUTPUT)
     16c:	41 30       	cpi	r20, 0x01	; 1
     16e:	09 f0       	breq	.+2      	; 0x172 <MDIO_voidSetPinDirection+0x3c>
     170:	6a c0       	rjmp	.+212    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRA,Copy_u8Pin);
     172:	2a b3       	in	r18, 0x1a	; 26
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	ac 01       	movw	r20, r24
     17a:	02 c0       	rjmp	.+4      	; 0x180 <MDIO_voidSetPinDirection+0x4a>
     17c:	44 0f       	add	r20, r20
     17e:	55 1f       	adc	r21, r21
     180:	6a 95       	dec	r22
     182:	e2 f7       	brpl	.-8      	; 0x17c <MDIO_voidSetPinDirection+0x46>
     184:	ba 01       	movw	r22, r20
     186:	62 2b       	or	r22, r18
     188:	6a bb       	out	0x1a, r22	; 26
     18a:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOB :
		if (Copy_u8Direction==INPUT)
     18c:	44 23       	and	r20, r20
     18e:	71 f4       	brne	.+28     	; 0x1ac <MDIO_voidSetPinDirection+0x76>
		{
			CLR_BIT(DDRB,Copy_u8Pin);
     190:	27 b3       	in	r18, 0x17	; 23
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	ac 01       	movw	r20, r24
     198:	02 c0       	rjmp	.+4      	; 0x19e <MDIO_voidSetPinDirection+0x68>
     19a:	44 0f       	add	r20, r20
     19c:	55 1f       	adc	r21, r21
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <MDIO_voidSetPinDirection+0x64>
     1a2:	ba 01       	movw	r22, r20
     1a4:	60 95       	com	r22
     1a6:	62 23       	and	r22, r18
     1a8:	67 bb       	out	0x17, r22	; 23
     1aa:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
     1ac:	41 30       	cpi	r20, 0x01	; 1
     1ae:	09 f0       	breq	.+2      	; 0x1b2 <MDIO_voidSetPinDirection+0x7c>
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRB,Copy_u8Pin);
     1b2:	27 b3       	in	r18, 0x17	; 23
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	ac 01       	movw	r20, r24
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <MDIO_voidSetPinDirection+0x8a>
     1bc:	44 0f       	add	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	e2 f7       	brpl	.-8      	; 0x1bc <MDIO_voidSetPinDirection+0x86>
     1c4:	ba 01       	movw	r22, r20
     1c6:	62 2b       	or	r22, r18
     1c8:	67 bb       	out	0x17, r22	; 23
     1ca:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOC :
		if (Copy_u8Direction==INPUT)
     1cc:	44 23       	and	r20, r20
     1ce:	71 f4       	brne	.+28     	; 0x1ec <MDIO_voidSetPinDirection+0xb6>
		{
			CLR_BIT(DDRC,Copy_u8Pin);
     1d0:	24 b3       	in	r18, 0x14	; 20
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	ac 01       	movw	r20, r24
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <MDIO_voidSetPinDirection+0xa8>
     1da:	44 0f       	add	r20, r20
     1dc:	55 1f       	adc	r21, r21
     1de:	6a 95       	dec	r22
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <MDIO_voidSetPinDirection+0xa4>
     1e2:	ba 01       	movw	r22, r20
     1e4:	60 95       	com	r22
     1e6:	62 23       	and	r22, r18
     1e8:	64 bb       	out	0x14, r22	; 20
     1ea:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
     1ec:	41 30       	cpi	r20, 0x01	; 1
     1ee:	59 f5       	brne	.+86     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRC,Copy_u8Pin);
     1f0:	24 b3       	in	r18, 0x14	; 20
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	ac 01       	movw	r20, r24
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MDIO_voidSetPinDirection+0xc8>
     1fa:	44 0f       	add	r20, r20
     1fc:	55 1f       	adc	r21, r21
     1fe:	6a 95       	dec	r22
     200:	e2 f7       	brpl	.-8      	; 0x1fa <MDIO_voidSetPinDirection+0xc4>
     202:	ba 01       	movw	r22, r20
     204:	62 2b       	or	r22, r18
     206:	64 bb       	out	0x14, r22	; 20
     208:	08 95       	ret
			/* error */
		}
		break;
			
		case DIOD :
		if (Copy_u8Direction==INPUT)
     20a:	44 23       	and	r20, r20
     20c:	71 f4       	brne	.+28     	; 0x22a <MDIO_voidSetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,Copy_u8Pin);
     20e:	21 b3       	in	r18, 0x11	; 17
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <MDIO_voidSetPinDirection+0xe6>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <MDIO_voidSetPinDirection+0xe2>
     220:	ba 01       	movw	r22, r20
     222:	60 95       	com	r22
     224:	62 23       	and	r22, r18
     226:	61 bb       	out	0x11, r22	; 17
     228:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	61 f4       	brne	.+24     	; 0x246 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRD,Copy_u8Pin);
     22e:	21 b3       	in	r18, 0x11	; 17
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <MDIO_voidSetPinDirection+0x106>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <MDIO_voidSetPinDirection+0x102>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	61 bb       	out	0x11, r22	; 17
     246:	08 95       	ret

00000248 <MDIO_voidSetPortDirection>:
	}
}
void MDIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{

  switch(Copy_u8Port)
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	81 f0       	breq	.+32     	; 0x26c <MDIO_voidSetPortDirection+0x24>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	28 f0       	brcs	.+10     	; 0x25a <MDIO_voidSetPortDirection+0x12>
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	a9 f0       	breq	.+42     	; 0x27e <MDIO_voidSetPortDirection+0x36>
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	21 f5       	brne	.+72     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
     258:	1b c0       	rjmp	.+54     	; 0x290 <MDIO_voidSetPortDirection+0x48>
  {
	  case DIOA :
	  if (Copy_u8Direction==INPUT)
     25a:	66 23       	and	r22, r22
     25c:	11 f4       	brne	.+4      	; 0x262 <MDIO_voidSetPortDirection+0x1a>
	  {
		  DDRA=0x00;
     25e:	1a ba       	out	0x1a, r1	; 26
     260:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     262:	61 30       	cpi	r22, 0x01	; 1
     264:	e9 f4       	brne	.+58     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRA=0xFF;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	8a bb       	out	0x1a, r24	; 26
     26a:	08 95       	ret
	  {
	    /* error */
	  }
	  break;
	  case DIOB :
	  if (Copy_u8Direction==INPUT)
     26c:	66 23       	and	r22, r22
     26e:	11 f4       	brne	.+4      	; 0x274 <MDIO_voidSetPortDirection+0x2c>
	  {
		  DDRB=0x00;
     270:	17 ba       	out	0x17, r1	; 23
     272:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     274:	61 30       	cpi	r22, 0x01	; 1
     276:	a1 f4       	brne	.+40     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRB=0xFF;
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	87 bb       	out	0x17, r24	; 23
     27c:	08 95       	ret
	  {
		  /* error */
	  }
	  break;	
	  case DIOC :
	  if (Copy_u8Direction==INPUT)
     27e:	66 23       	and	r22, r22
     280:	11 f4       	brne	.+4      	; 0x286 <MDIO_voidSetPortDirection+0x3e>
	  {
		  DDRC=0x00;
     282:	14 ba       	out	0x14, r1	; 20
     284:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     286:	61 30       	cpi	r22, 0x01	; 1
     288:	59 f4       	brne	.+22     	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRC=0xFF;
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	84 bb       	out	0x14, r24	; 20
     28e:	08 95       	ret
	  {
		  /* error */
	  }
	  break;
	  case DIOD :
	  if (Copy_u8Direction==INPUT)
     290:	66 23       	and	r22, r22
     292:	11 f4       	brne	.+4      	; 0x298 <MDIO_voidSetPortDirection+0x50>
	  {
		  DDRD=0x00;
     294:	11 ba       	out	0x11, r1	; 17
     296:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     298:	61 30       	cpi	r22, 0x01	; 1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRD=0xFF;
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	81 bb       	out	0x11, r24	; 17
     2a0:	08 95       	ret

000002a2 <MDIO_voidSetPinValue>:

}

void MDIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    switch(Copy_u8Port)
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	49 f1       	breq	.+82     	; 0x2f8 <MDIO_voidSetPinValue+0x56>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	38 f0       	brcs	.+14     	; 0x2b8 <MDIO_voidSetPinValue+0x16>
     2aa:	82 30       	cpi	r24, 0x02	; 2
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <MDIO_voidSetPinValue+0xe>
     2ae:	44 c0       	rjmp	.+136    	; 0x338 <MDIO_voidSetPinValue+0x96>
     2b0:	83 30       	cpi	r24, 0x03	; 3
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <MDIO_voidSetPinValue+0x14>
     2b4:	7e c0       	rjmp	.+252    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
     2b6:	5f c0       	rjmp	.+190    	; 0x376 <MDIO_voidSetPinValue+0xd4>
    {
	    case DIOA :
	    if (Copy_u8Value==LOW)
     2b8:	44 23       	and	r20, r20
     2ba:	71 f4       	brne	.+28     	; 0x2d8 <MDIO_voidSetPinValue+0x36>
	    {
		    CLR_BIT(PORTA,Copy_u8Pin);
     2bc:	2b b3       	in	r18, 0x1b	; 27
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ac 01       	movw	r20, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <MDIO_voidSetPinValue+0x28>
     2c6:	44 0f       	add	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <MDIO_voidSetPinValue+0x24>
     2ce:	ba 01       	movw	r22, r20
     2d0:	60 95       	com	r22
     2d2:	62 23       	and	r22, r18
     2d4:	6b bb       	out	0x1b, r22	; 27
     2d6:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     2d8:	41 30       	cpi	r20, 0x01	; 1
     2da:	09 f0       	breq	.+2      	; 0x2de <MDIO_voidSetPinValue+0x3c>
     2dc:	6a c0       	rjmp	.+212    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTA,Copy_u8Pin);
     2de:	2b b3       	in	r18, 0x1b	; 27
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	ac 01       	movw	r20, r24
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <MDIO_voidSetPinValue+0x4a>
     2e8:	44 0f       	add	r20, r20
     2ea:	55 1f       	adc	r21, r21
     2ec:	6a 95       	dec	r22
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <MDIO_voidSetPinValue+0x46>
     2f0:	ba 01       	movw	r22, r20
     2f2:	62 2b       	or	r22, r18
     2f4:	6b bb       	out	0x1b, r22	; 27
     2f6:	08 95       	ret
		    /* error */
	    }
	    break;
	    
	    case DIOB :
	    if (Copy_u8Value==LOW)
     2f8:	44 23       	and	r20, r20
     2fa:	71 f4       	brne	.+28     	; 0x318 <MDIO_voidSetPinValue+0x76>
	    {
		    CLR_BIT(PORTB,Copy_u8Pin);
     2fc:	28 b3       	in	r18, 0x18	; 24
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	ac 01       	movw	r20, r24
     304:	02 c0       	rjmp	.+4      	; 0x30a <MDIO_voidSetPinValue+0x68>
     306:	44 0f       	add	r20, r20
     308:	55 1f       	adc	r21, r21
     30a:	6a 95       	dec	r22
     30c:	e2 f7       	brpl	.-8      	; 0x306 <MDIO_voidSetPinValue+0x64>
     30e:	ba 01       	movw	r22, r20
     310:	60 95       	com	r22
     312:	62 23       	and	r22, r18
     314:	68 bb       	out	0x18, r22	; 24
     316:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     318:	41 30       	cpi	r20, 0x01	; 1
     31a:	09 f0       	breq	.+2      	; 0x31e <MDIO_voidSetPinValue+0x7c>
     31c:	4a c0       	rjmp	.+148    	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTB,Copy_u8Pin);
     31e:	28 b3       	in	r18, 0x18	; 24
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	ac 01       	movw	r20, r24
     326:	02 c0       	rjmp	.+4      	; 0x32c <MDIO_voidSetPinValue+0x8a>
     328:	44 0f       	add	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	e2 f7       	brpl	.-8      	; 0x328 <MDIO_voidSetPinValue+0x86>
     330:	ba 01       	movw	r22, r20
     332:	62 2b       	or	r22, r18
     334:	68 bb       	out	0x18, r22	; 24
     336:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOC :
	    if (Copy_u8Value==LOW)
     338:	44 23       	and	r20, r20
     33a:	71 f4       	brne	.+28     	; 0x358 <MDIO_voidSetPinValue+0xb6>
	    {
		    CLR_BIT(PORTC,Copy_u8Pin);
     33c:	25 b3       	in	r18, 0x15	; 21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <MDIO_voidSetPinValue+0xa8>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <MDIO_voidSetPinValue+0xa4>
     34e:	ba 01       	movw	r22, r20
     350:	60 95       	com	r22
     352:	62 23       	and	r22, r18
     354:	65 bb       	out	0x15, r22	; 21
     356:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     358:	41 30       	cpi	r20, 0x01	; 1
     35a:	59 f5       	brne	.+86     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTC,Copy_u8Pin);
     35c:	25 b3       	in	r18, 0x15	; 21
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	ac 01       	movw	r20, r24
     364:	02 c0       	rjmp	.+4      	; 0x36a <MDIO_voidSetPinValue+0xc8>
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	6a 95       	dec	r22
     36c:	e2 f7       	brpl	.-8      	; 0x366 <MDIO_voidSetPinValue+0xc4>
     36e:	ba 01       	movw	r22, r20
     370:	62 2b       	or	r22, r18
     372:	65 bb       	out	0x15, r22	; 21
     374:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOD :
	    if (Copy_u8Value==LOW)
     376:	44 23       	and	r20, r20
     378:	71 f4       	brne	.+28     	; 0x396 <MDIO_voidSetPinValue+0xf4>
	    {
		    CLR_BIT(PORTD,Copy_u8Pin);
     37a:	22 b3       	in	r18, 0x12	; 18
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ac 01       	movw	r20, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <MDIO_voidSetPinValue+0xe6>
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <MDIO_voidSetPinValue+0xe2>
     38c:	ba 01       	movw	r22, r20
     38e:	60 95       	com	r22
     390:	62 23       	and	r22, r18
     392:	62 bb       	out	0x12, r22	; 18
     394:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     396:	41 30       	cpi	r20, 0x01	; 1
     398:	61 f4       	brne	.+24     	; 0x3b2 <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTD,Copy_u8Pin);
     39a:	22 b3       	in	r18, 0x12	; 18
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	ac 01       	movw	r20, r24
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MDIO_voidSetPinValue+0x106>
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MDIO_voidSetPinValue+0x102>
     3ac:	ba 01       	movw	r22, r20
     3ae:	62 2b       	or	r22, r18
     3b0:	62 bb       	out	0x12, r22	; 18
     3b2:	08 95       	ret

000003b4 <MDIO_u8GetPinValue>:
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
	 switch(Copy_u8Port)
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	89 f0       	breq	.+34     	; 0x3da <MDIO_u8GetPinValue+0x26>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	28 f0       	brcs	.+10     	; 0x3c6 <MDIO_u8GetPinValue+0x12>
     3bc:	82 30       	cpi	r24, 0x02	; 2
     3be:	b9 f0       	breq	.+46     	; 0x3ee <MDIO_u8GetPinValue+0x3a>
     3c0:	83 30       	cpi	r24, 0x03	; 3
     3c2:	49 f5       	brne	.+82     	; 0x416 <MDIO_u8GetPinValue+0x62>
     3c4:	1e c0       	rjmp	.+60     	; 0x402 <MDIO_u8GetPinValue+0x4e>
	 {
		 case DIOA :
		 Local_u8value=GET_BIT(PINA,Copy_u8Pin);
     3c6:	29 b3       	in	r18, 0x19	; 25
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	c9 01       	movw	r24, r18
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <MDIO_u8GetPinValue+0x1e>
     3ce:	95 95       	asr	r25
     3d0:	87 95       	ror	r24
     3d2:	6a 95       	dec	r22
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <MDIO_u8GetPinValue+0x1a>
     3d6:	81 70       	andi	r24, 0x01	; 1
		 break;
     3d8:	08 95       	ret
		 case DIOB :
		 Local_u8value=GET_BIT(PINB,Copy_u8Pin);
     3da:	26 b3       	in	r18, 0x16	; 22
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	c9 01       	movw	r24, r18
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <MDIO_u8GetPinValue+0x32>
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <MDIO_u8GetPinValue+0x2e>
     3ea:	81 70       	andi	r24, 0x01	; 1
		 break;
     3ec:	08 95       	ret
		 case DIOC :
		 Local_u8value=GET_BIT(PINC,Copy_u8Pin);
     3ee:	23 b3       	in	r18, 0x13	; 19
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MDIO_u8GetPinValue+0x46>
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	6a 95       	dec	r22
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MDIO_u8GetPinValue+0x42>
     3fe:	81 70       	andi	r24, 0x01	; 1
		 break;
     400:	08 95       	ret
		 case DIOD :
		 Local_u8value=GET_BIT(PIND,Copy_u8Pin);
     402:	20 b3       	in	r18, 0x10	; 16
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	c9 01       	movw	r24, r18
     408:	02 c0       	rjmp	.+4      	; 0x40e <MDIO_u8GetPinValue+0x5a>
     40a:	95 95       	asr	r25
     40c:	87 95       	ror	r24
     40e:	6a 95       	dec	r22
     410:	e2 f7       	brpl	.-8      	; 0x40a <MDIO_u8GetPinValue+0x56>
     412:	81 70       	andi	r24, 0x01	; 1
		 break;		 		 
     414:	08 95       	ret
	    
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
     416:	80 e0       	ldi	r24, 0x00	; 0
		 break;		 		 
		 default: break;
		 
	 }
	 return Local_u8value;
}
     418:	08 95       	ret

0000041a <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	switch(Copy_u8Port)
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	49 f0       	breq	.+18     	; 0x430 <MDIO_voidSetPortValue+0x16>
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	28 f0       	brcs	.+10     	; 0x42c <MDIO_voidSetPortValue+0x12>
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	39 f0       	breq	.+14     	; 0x434 <MDIO_voidSetPortValue+0x1a>
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	41 f4       	brne	.+16     	; 0x43a <MDIO_voidSetPortValue+0x20>
     42a:	06 c0       	rjmp	.+12     	; 0x438 <MDIO_voidSetPortValue+0x1e>
	{
		case DIOA :
		PORTA=Copy_u8Value;
     42c:	6b bb       	out	0x1b, r22	; 27
		break;
     42e:	08 95       	ret
		case DIOB :
		PORTB=Copy_u8Value;
     430:	68 bb       	out	0x18, r22	; 24
		break;	
     432:	08 95       	ret
		case DIOC :
		PORTC=Copy_u8Value;
     434:	65 bb       	out	0x15, r22	; 21
		break;
     436:	08 95       	ret
		case DIOD :
		PORTD=Copy_u8Value;
     438:	62 bb       	out	0x12, r22	; 18
     43a:	08 95       	ret

0000043c <MDIO_voidTogglePin>:
	}
}

void MDIO_voidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	a1 f0       	breq	.+40     	; 0x468 <MDIO_voidTogglePin+0x2c>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	28 f0       	brcs	.+10     	; 0x44e <MDIO_voidTogglePin+0x12>
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	e9 f0       	breq	.+58     	; 0x482 <MDIO_voidTogglePin+0x46>
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	a1 f5       	brne	.+104    	; 0x4b4 <MDIO_voidTogglePin+0x78>
     44c:	27 c0       	rjmp	.+78     	; 0x49c <MDIO_voidTogglePin+0x60>
	{
		
		case DIOA :
		TOG_BIT(PORTA,Copy_u8Pin);
     44e:	2b b3       	in	r18, 0x1b	; 27
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	ac 01       	movw	r20, r24
     456:	02 c0       	rjmp	.+4      	; 0x45c <MDIO_voidTogglePin+0x20>
     458:	44 0f       	add	r20, r20
     45a:	55 1f       	adc	r21, r21
     45c:	6a 95       	dec	r22
     45e:	e2 f7       	brpl	.-8      	; 0x458 <MDIO_voidTogglePin+0x1c>
     460:	ba 01       	movw	r22, r20
     462:	62 27       	eor	r22, r18
     464:	6b bb       	out	0x1b, r22	; 27
		break;
     466:	08 95       	ret
		case DIOB :
		TOG_BIT(PORTB,Copy_u8Pin);
     468:	28 b3       	in	r18, 0x18	; 24
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	ac 01       	movw	r20, r24
     470:	02 c0       	rjmp	.+4      	; 0x476 <MDIO_voidTogglePin+0x3a>
     472:	44 0f       	add	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <MDIO_voidTogglePin+0x36>
     47a:	ba 01       	movw	r22, r20
     47c:	62 27       	eor	r22, r18
     47e:	68 bb       	out	0x18, r22	; 24
		break;
     480:	08 95       	ret
		case DIOC :
		TOG_BIT(PORTC,Copy_u8Pin);
     482:	25 b3       	in	r18, 0x15	; 21
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	ac 01       	movw	r20, r24
     48a:	02 c0       	rjmp	.+4      	; 0x490 <MDIO_voidTogglePin+0x54>
     48c:	44 0f       	add	r20, r20
     48e:	55 1f       	adc	r21, r21
     490:	6a 95       	dec	r22
     492:	e2 f7       	brpl	.-8      	; 0x48c <MDIO_voidTogglePin+0x50>
     494:	ba 01       	movw	r22, r20
     496:	62 27       	eor	r22, r18
     498:	65 bb       	out	0x15, r22	; 21
		break;
     49a:	08 95       	ret
		case DIOD :
		TOG_BIT(PORTD,Copy_u8Pin);
     49c:	22 b3       	in	r18, 0x12	; 18
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	ac 01       	movw	r20, r24
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <MDIO_voidTogglePin+0x6e>
     4a6:	44 0f       	add	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	6a 95       	dec	r22
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <MDIO_voidTogglePin+0x6a>
     4ae:	ba 01       	movw	r22, r20
     4b0:	62 27       	eor	r22, r18
     4b2:	62 bb       	out	0x12, r22	; 18
     4b4:	08 95       	ret

000004b6 <MDIO_voidTogglePort>:
	}
}

void MDIO_voidTogglePort(u8 Copy_u8Port)
{
	    switch(Copy_u8Port)
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	59 f0       	breq	.+22     	; 0x4d0 <MDIO_voidTogglePort+0x1a>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	28 f0       	brcs	.+10     	; 0x4c8 <MDIO_voidTogglePort+0x12>
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	59 f0       	breq	.+22     	; 0x4d8 <MDIO_voidTogglePort+0x22>
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	81 f4       	brne	.+32     	; 0x4e6 <MDIO_voidTogglePort+0x30>
     4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <MDIO_voidTogglePort+0x2a>
		{
		case DIOA :
		PORTA=~PORTA;
     4c8:	8b b3       	in	r24, 0x1b	; 27
     4ca:	80 95       	com	r24
     4cc:	8b bb       	out	0x1b, r24	; 27
		break;
     4ce:	08 95       	ret
		case DIOB :
		PORTB=~PORTB;
     4d0:	88 b3       	in	r24, 0x18	; 24
     4d2:	80 95       	com	r24
     4d4:	88 bb       	out	0x18, r24	; 24
		break;
     4d6:	08 95       	ret
		case DIOC :
		PORTC=~PORTC;
     4d8:	85 b3       	in	r24, 0x15	; 21
     4da:	80 95       	com	r24
     4dc:	85 bb       	out	0x15, r24	; 21
		break;
     4de:	08 95       	ret
		case DIOD :
		PORTD=~PORTD;
     4e0:	82 b3       	in	r24, 0x12	; 18
     4e2:	80 95       	com	r24
     4e4:	82 bb       	out	0x12, r24	; 18
     4e6:	08 95       	ret

000004e8 <MDIO_voidEnablePullUp>:
		}			
}

void MDIO_voidEnablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	a1 f0       	breq	.+40     	; 0x514 <MDIO_voidEnablePullUp+0x2c>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	28 f0       	brcs	.+10     	; 0x4fa <MDIO_voidEnablePullUp+0x12>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	e9 f0       	breq	.+58     	; 0x52e <MDIO_voidEnablePullUp+0x46>
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	a1 f5       	brne	.+104    	; 0x560 <MDIO_voidEnablePullUp+0x78>
     4f8:	27 c0       	rjmp	.+78     	; 0x548 <MDIO_voidEnablePullUp+0x60>
	{
		case DIOA : 
		SET_BIT(PORTA,Copy_u8Pin);
     4fa:	2b b3       	in	r18, 0x1b	; 27
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	ac 01       	movw	r20, r24
     502:	02 c0       	rjmp	.+4      	; 0x508 <MDIO_voidEnablePullUp+0x20>
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	6a 95       	dec	r22
     50a:	e2 f7       	brpl	.-8      	; 0x504 <MDIO_voidEnablePullUp+0x1c>
     50c:	ba 01       	movw	r22, r20
     50e:	62 2b       	or	r22, r18
     510:	6b bb       	out	0x1b, r22	; 27
		break;
     512:	08 95       	ret
		case DIOB :
		SET_BIT(PORTB,Copy_u8Pin);
     514:	28 b3       	in	r18, 0x18	; 24
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	ac 01       	movw	r20, r24
     51c:	02 c0       	rjmp	.+4      	; 0x522 <MDIO_voidEnablePullUp+0x3a>
     51e:	44 0f       	add	r20, r20
     520:	55 1f       	adc	r21, r21
     522:	6a 95       	dec	r22
     524:	e2 f7       	brpl	.-8      	; 0x51e <MDIO_voidEnablePullUp+0x36>
     526:	ba 01       	movw	r22, r20
     528:	62 2b       	or	r22, r18
     52a:	68 bb       	out	0x18, r22	; 24
		break;
     52c:	08 95       	ret
		case DIOC :
		SET_BIT(PORTC,Copy_u8Pin);
     52e:	25 b3       	in	r18, 0x15	; 21
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	ac 01       	movw	r20, r24
     536:	02 c0       	rjmp	.+4      	; 0x53c <MDIO_voidEnablePullUp+0x54>
     538:	44 0f       	add	r20, r20
     53a:	55 1f       	adc	r21, r21
     53c:	6a 95       	dec	r22
     53e:	e2 f7       	brpl	.-8      	; 0x538 <MDIO_voidEnablePullUp+0x50>
     540:	ba 01       	movw	r22, r20
     542:	62 2b       	or	r22, r18
     544:	65 bb       	out	0x15, r22	; 21
		break;
     546:	08 95       	ret
		case DIOD :
		SET_BIT(PORTD,Copy_u8Pin);
     548:	22 b3       	in	r18, 0x12	; 18
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	ac 01       	movw	r20, r24
     550:	02 c0       	rjmp	.+4      	; 0x556 <MDIO_voidEnablePullUp+0x6e>
     552:	44 0f       	add	r20, r20
     554:	55 1f       	adc	r21, r21
     556:	6a 95       	dec	r22
     558:	e2 f7       	brpl	.-8      	; 0x552 <MDIO_voidEnablePullUp+0x6a>
     55a:	ba 01       	movw	r22, r20
     55c:	62 2b       	or	r22, r18
     55e:	62 bb       	out	0x12, r22	; 18
     560:	08 95       	ret

00000562 <MDIO_voidDisablePullUp>:
	}
}

void MDIO_voidDisablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
		switch(Copy_u8Port)
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	a9 f0       	breq	.+42     	; 0x590 <MDIO_voidDisablePullUp+0x2e>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	28 f0       	brcs	.+10     	; 0x574 <MDIO_voidDisablePullUp+0x12>
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	f9 f0       	breq	.+62     	; 0x5ac <MDIO_voidDisablePullUp+0x4a>
     56e:	83 30       	cpi	r24, 0x03	; 3
     570:	c1 f5       	brne	.+112    	; 0x5e2 <MDIO_voidDisablePullUp+0x80>
     572:	2a c0       	rjmp	.+84     	; 0x5c8 <MDIO_voidDisablePullUp+0x66>
		{
			case DIOA :
			CLR_BIT(PORTA,Copy_u8Pin);
     574:	2b b3       	in	r18, 0x1b	; 27
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	ac 01       	movw	r20, r24
     57c:	02 c0       	rjmp	.+4      	; 0x582 <MDIO_voidDisablePullUp+0x20>
     57e:	44 0f       	add	r20, r20
     580:	55 1f       	adc	r21, r21
     582:	6a 95       	dec	r22
     584:	e2 f7       	brpl	.-8      	; 0x57e <MDIO_voidDisablePullUp+0x1c>
     586:	ba 01       	movw	r22, r20
     588:	60 95       	com	r22
     58a:	62 23       	and	r22, r18
     58c:	6b bb       	out	0x1b, r22	; 27
			break;
     58e:	08 95       	ret
			case DIOB :
			CLR_BIT(PORTB,Copy_u8Pin);
     590:	28 b3       	in	r18, 0x18	; 24
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	ac 01       	movw	r20, r24
     598:	02 c0       	rjmp	.+4      	; 0x59e <MDIO_voidDisablePullUp+0x3c>
     59a:	44 0f       	add	r20, r20
     59c:	55 1f       	adc	r21, r21
     59e:	6a 95       	dec	r22
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <MDIO_voidDisablePullUp+0x38>
     5a2:	ba 01       	movw	r22, r20
     5a4:	60 95       	com	r22
     5a6:	62 23       	and	r22, r18
     5a8:	68 bb       	out	0x18, r22	; 24
			break;
     5aa:	08 95       	ret
			case DIOC :
			CLR_BIT(PORTC,Copy_u8Pin);
     5ac:	25 b3       	in	r18, 0x15	; 21
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	ac 01       	movw	r20, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <MDIO_voidDisablePullUp+0x58>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	6a 95       	dec	r22
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <MDIO_voidDisablePullUp+0x54>
     5be:	ba 01       	movw	r22, r20
     5c0:	60 95       	com	r22
     5c2:	62 23       	and	r22, r18
     5c4:	65 bb       	out	0x15, r22	; 21
			break;
     5c6:	08 95       	ret
			case DIOD :
			CLR_BIT(PORTD,Copy_u8Pin);
     5c8:	22 b3       	in	r18, 0x12	; 18
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	ac 01       	movw	r20, r24
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <MDIO_voidDisablePullUp+0x74>
     5d2:	44 0f       	add	r20, r20
     5d4:	55 1f       	adc	r21, r21
     5d6:	6a 95       	dec	r22
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <MDIO_voidDisablePullUp+0x70>
     5da:	ba 01       	movw	r22, r20
     5dc:	60 95       	com	r22
     5de:	62 23       	and	r22, r18
     5e0:	62 bb       	out	0x12, r22	; 18
     5e2:	08 95       	ret

000005e4 <MDIO_voidWriteLowNibble>:
		}
}

void MDIO_voidWriteLowNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value&=0x0f;
     5e4:	6f 70       	andi	r22, 0x0F	; 15
	switch(Copy_u8Port)
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	71 f0       	breq	.+28     	; 0x606 <MDIO_voidWriteLowNibble+0x22>
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	28 f0       	brcs	.+10     	; 0x5f8 <MDIO_voidWriteLowNibble+0x14>
     5ee:	82 30       	cpi	r24, 0x02	; 2
     5f0:	89 f0       	breq	.+34     	; 0x614 <MDIO_voidWriteLowNibble+0x30>
     5f2:	83 30       	cpi	r24, 0x03	; 3
     5f4:	e1 f4       	brne	.+56     	; 0x62e <MDIO_voidWriteLowNibble+0x4a>
     5f6:	15 c0       	rjmp	.+42     	; 0x622 <MDIO_voidWriteLowNibble+0x3e>
	{
		case DIOA :
		PORTA&=0xf0;
     5f8:	8b b3       	in	r24, 0x1b	; 27
     5fa:	80 7f       	andi	r24, 0xF0	; 240
     5fc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
     5fe:	8b b3       	in	r24, 0x1b	; 27
     600:	68 2b       	or	r22, r24
     602:	6b bb       	out	0x1b, r22	; 27
		break;
     604:	08 95       	ret
		case DIOB :
		PORTB&=0xf0;
     606:	88 b3       	in	r24, 0x18	; 24
     608:	80 7f       	andi	r24, 0xF0	; 240
     60a:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
     60c:	88 b3       	in	r24, 0x18	; 24
     60e:	68 2b       	or	r22, r24
     610:	68 bb       	out	0x18, r22	; 24
		break;
     612:	08 95       	ret
		case DIOC :
		PORTC&=0xf0;
     614:	85 b3       	in	r24, 0x15	; 21
     616:	80 7f       	andi	r24, 0xF0	; 240
     618:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
     61a:	85 b3       	in	r24, 0x15	; 21
     61c:	68 2b       	or	r22, r24
     61e:	65 bb       	out	0x15, r22	; 21
		break;
     620:	08 95       	ret
		case DIOD :
		PORTD&=0xf0;
     622:	82 b3       	in	r24, 0x12	; 18
     624:	80 7f       	andi	r24, 0xF0	; 240
     626:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
     628:	82 b3       	in	r24, 0x12	; 18
     62a:	68 2b       	or	r22, r24
     62c:	62 bb       	out	0x12, r22	; 18
     62e:	08 95       	ret

00000630 <MDIO_voidWriteHighNibble>:
	
}

void MDIO_voidWriteHighNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value<<=4;
     630:	62 95       	swap	r22
     632:	60 7f       	andi	r22, 0xF0	; 240
	switch(Copy_u8Port)
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	71 f0       	breq	.+28     	; 0x654 <MDIO_voidWriteHighNibble+0x24>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	28 f0       	brcs	.+10     	; 0x646 <MDIO_voidWriteHighNibble+0x16>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	89 f0       	breq	.+34     	; 0x662 <MDIO_voidWriteHighNibble+0x32>
     640:	83 30       	cpi	r24, 0x03	; 3
     642:	e1 f4       	brne	.+56     	; 0x67c <MDIO_voidWriteHighNibble+0x4c>
     644:	15 c0       	rjmp	.+42     	; 0x670 <MDIO_voidWriteHighNibble+0x40>
	{
		case DIOA :
		PORTA&=0x0f;
     646:	8b b3       	in	r24, 0x1b	; 27
     648:	8f 70       	andi	r24, 0x0F	; 15
     64a:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
     64c:	8b b3       	in	r24, 0x1b	; 27
     64e:	68 2b       	or	r22, r24
     650:	6b bb       	out	0x1b, r22	; 27
		break;
     652:	08 95       	ret
		case DIOB :
		PORTB&=0x0f;
     654:	88 b3       	in	r24, 0x18	; 24
     656:	8f 70       	andi	r24, 0x0F	; 15
     658:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
     65a:	88 b3       	in	r24, 0x18	; 24
     65c:	68 2b       	or	r22, r24
     65e:	68 bb       	out	0x18, r22	; 24
		break;
     660:	08 95       	ret
		case DIOC :
		PORTC&=0x0f;
     662:	85 b3       	in	r24, 0x15	; 21
     664:	8f 70       	andi	r24, 0x0F	; 15
     666:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
     668:	85 b3       	in	r24, 0x15	; 21
     66a:	68 2b       	or	r22, r24
     66c:	65 bb       	out	0x15, r22	; 21
		break;
     66e:	08 95       	ret
		case DIOD :
		PORTD&=0x0f;
     670:	82 b3       	in	r24, 0x12	; 18
     672:	8f 70       	andi	r24, 0x0F	; 15
     674:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
     676:	82 b3       	in	r24, 0x12	; 18
     678:	68 2b       	or	r22, r24
     67a:	62 bb       	out	0x12, r22	; 18
     67c:	08 95       	ret

0000067e <ICU_Calculate_DutyCycle>:
#include "ICU_interface.h"
#include "DIO_interface.h"
#include "LCD_interface.h"
u16 x,y,z,On_Time,Time_period;
u8 ICU_Calculate_DutyCycle(u16 *PtrCopy_u16Freq, u16 *ptrCopy_u16Duty)
{
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	5c 01       	movw	r10, r24
     694:	8b 01       	movw	r16, r22
	
    SET_BIT(TIFR,5); //Clear ICU interrupt flag
     696:	88 b7       	in	r24, 0x38	; 56
     698:	80 62       	ori	r24, 0x20	; 32
     69a:	88 bf       	out	0x38, r24	; 56
	MTIMER1_voidICUInit();
     69c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <MTIMER1_voidICUInit>
	while((TIFR&(1<<5))==0); //wait while capture is occured
     6a0:	08 b6       	in	r0, 0x38	; 56
     6a2:	05 fe       	sbrs	r0, 5
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <ICU_Calculate_DutyCycle+0x22>
	x=ICR1;  // store time before first rising capture
     6a6:	86 b5       	in	r24, 0x26	; 38
     6a8:	97 b5       	in	r25, 0x27	; 39
     6aa:	90 93 99 00 	sts	0x0099, r25
     6ae:	80 93 98 00 	sts	0x0098, r24
	SET_BIT(TIFR,5); //Clear ICU interrupt flag
     6b2:	88 b7       	in	r24, 0x38	; 56
     6b4:	80 62       	ori	r24, 0x20	; 32
     6b6:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TCCR1B,0);//for cpu clock
     6b8:	8e b5       	in	r24, 0x2e	; 46
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,6); //Configure ICU to FALLING EDGE
     6be:	8e b5       	in	r24, 0x2e	; 46
     6c0:	8f 7b       	andi	r24, 0xBF	; 191
     6c2:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,7); // for noise canceller
     6c4:	8e b5       	in	r24, 0x2e	; 46
     6c6:	80 68       	ori	r24, 0x80	; 128
     6c8:	8e bd       	out	0x2e, r24	; 46
	while((TIFR&(1<<5))==0); //wait while capture is occured
     6ca:	08 b6       	in	r0, 0x38	; 56
     6cc:	05 fe       	sbrs	r0, 5
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <ICU_Calculate_DutyCycle+0x4c>
	y=ICR1; // store time before falling capture
     6d0:	86 b5       	in	r24, 0x26	; 38
     6d2:	97 b5       	in	r25, 0x27	; 39
     6d4:	90 93 a1 00 	sts	0x00A1, r25
     6d8:	80 93 a0 00 	sts	0x00A0, r24
	SET_BIT(TIFR,5); //Clear ICU interrupt flag
     6dc:	88 b7       	in	r24, 0x38	; 56
     6de:	80 62       	ori	r24, 0x20	; 32
     6e0:	88 bf       	out	0x38, r24	; 56
	TCCR1B=0Xc1;
     6e2:	81 ec       	ldi	r24, 0xC1	; 193
     6e4:	8e bd       	out	0x2e, r24	; 46
	while((TIFR&(1<<5))==0); //wait while capture is occured
     6e6:	08 b6       	in	r0, 0x38	; 56
     6e8:	05 fe       	sbrs	r0, 5
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <ICU_Calculate_DutyCycle+0x68>
	z=ICR1;  //store time before second rising capture
     6ec:	86 b5       	in	r24, 0x26	; 38
     6ee:	97 b5       	in	r25, 0x27	; 39
     6f0:	90 93 9d 00 	sts	0x009D, r25
     6f4:	80 93 9c 00 	sts	0x009C, r24
	SET_BIT(TIFR,5); //Clear ICU interrupt flag
     6f8:	88 b7       	in	r24, 0x38	; 56
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	88 bf       	out	0x38, r24	; 56
	/* stop timer1 */
	CLR_BIT(TCCR1B,0);
     6fe:	8e b5       	in	r24, 0x2e	; 46
     700:	8e 7f       	andi	r24, 0xFE	; 254
     702:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
     704:	8e b5       	in	r24, 0x2e	; 46
     706:	8d 7f       	andi	r24, 0xFD	; 253
     708:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
     70a:	8e b5       	in	r24, 0x2e	; 46
     70c:	8b 7f       	andi	r24, 0xFB	; 251
     70e:	8e bd       	out	0x2e, r24	; 46
	if((x<y) && (y<z)) // check for condition to avoid timer overflow reading
     710:	20 91 98 00 	lds	r18, 0x0098
     714:	30 91 99 00 	lds	r19, 0x0099
     718:	80 91 a0 00 	lds	r24, 0x00A0
     71c:	90 91 a1 00 	lds	r25, 0x00A1
     720:	28 17       	cp	r18, r24
     722:	39 07       	cpc	r19, r25
     724:	08 f0       	brcs	.+2      	; 0x728 <ICU_Calculate_DutyCycle+0xaa>
     726:	45 c0       	rjmp	.+138    	; 0x7b2 <ICU_Calculate_DutyCycle+0x134>
     728:	40 91 9c 00 	lds	r20, 0x009C
     72c:	50 91 9d 00 	lds	r21, 0x009D
     730:	84 17       	cp	r24, r20
     732:	95 07       	cpc	r25, r21
     734:	08 f0       	brcs	.+2      	; 0x738 <ICU_Calculate_DutyCycle+0xba>
     736:	3f c0       	rjmp	.+126    	; 0x7b6 <ICU_Calculate_DutyCycle+0x138>
	{
		On_Time=y-x;
     738:	82 1b       	sub	r24, r18
     73a:	93 0b       	sbc	r25, r19
     73c:	90 93 9f 00 	sts	0x009F, r25
     740:	80 93 9e 00 	sts	0x009E, r24
		Time_period=z-x;
     744:	ea 01       	movw	r28, r20
     746:	c2 1b       	sub	r28, r18
     748:	d3 0b       	sbc	r29, r19
     74a:	d0 93 9b 00 	sts	0x009B, r29
     74e:	c0 93 9a 00 	sts	0x009A, r28
		*ptrCopy_u16Duty=((f32) On_Time/Time_period )*100;
     752:	bc 01       	movw	r22, r24
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 00 07 	call	0xe00	; 0xe00 <__floatunsisf>
     75c:	6b 01       	movw	r12, r22
     75e:	7c 01       	movw	r14, r24
     760:	be 01       	movw	r22, r28
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 00 07 	call	0xe00	; 0xe00 <__floatunsisf>
     76a:	9b 01       	movw	r18, r22
     76c:	ac 01       	movw	r20, r24
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12
     772:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__divsf3>
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	48 ec       	ldi	r20, 0xC8	; 200
     77c:	52 e4       	ldi	r21, 0x42	; 66
     77e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
     782:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fixunssfsi>
     786:	dc 01       	movw	r26, r24
     788:	cb 01       	movw	r24, r22
     78a:	f8 01       	movw	r30, r16
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	80 83       	st	Z, r24
		*PtrCopy_u16Freq=( F_CPU/ (Time_period) );
     790:	20 91 9a 00 	lds	r18, 0x009A
     794:	30 91 9b 00 	lds	r19, 0x009B
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e4       	ldi	r22, 0x40	; 64
     79e:	72 e4       	ldi	r23, 0x42	; 66
     7a0:	8f e0       	ldi	r24, 0x0F	; 15
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 30 08 	call	0x1060	; 0x1060 <__udivmodsi4>
     7a8:	f5 01       	movw	r30, r10
     7aa:	31 83       	std	Z+1, r19	; 0x01
     7ac:	20 83       	st	Z, r18
		return 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <ICU_Calculate_DutyCycle+0x13a>
	}
	else
	{
		return 0;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <ICU_Calculate_DutyCycle+0x13a>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	bf 90       	pop	r11
     7ca:	af 90       	pop	r10
     7cc:	08 95       	ret

000007ce <LCD_Display_DutyCycle_Freq>:

void LCD_Display_DutyCycle_Freq(u16 Duty_Cycle,u16 Frequency,u8 Status)
{
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
     7dc:	8b 01       	movw	r16, r22
	if (Status==IN_RANGE)
     7de:	41 30       	cpi	r20, 0x01	; 1
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <LCD_Display_DutyCycle_Freq+0x16>
     7e2:	4d c0       	rjmp	.+154    	; 0x87e <__stack+0x1f>
	{
		HLCD_voidInit();
     7e4:	0e 94 73 05 	call	0xae6	; 0xae6 <HLCD_voidInit>
		HLCD_voidSendString("Duty:");
     7e8:	80 e6       	ldi	r24, 0x60	; 96
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
		HLCD_voidSendChar( (Duty_Cycle/10)+48 );
     7f0:	0f 2e       	mov	r0, r31
     7f2:	fa e0       	ldi	r31, 0x0A	; 10
     7f4:	ef 2e       	mov	r14, r31
     7f6:	ff 24       	eor	r15, r15
     7f8:	f0 2d       	mov	r31, r0
     7fa:	ce 01       	movw	r24, r28
     7fc:	b7 01       	movw	r22, r14
     7fe:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     802:	c8 2f       	mov	r28, r24
     804:	86 2f       	mov	r24, r22
     806:	80 5d       	subi	r24, 0xD0	; 208
     808:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendChar( (Duty_Cycle%10)+48 );
     80c:	8c 2f       	mov	r24, r28
     80e:	80 5d       	subi	r24, 0xD0	; 208
     810:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendChar('%');
     814:	85 e2       	ldi	r24, 0x25	; 37
     816:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidMoveCursor(2,1);
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <HLCD_voidMoveCursor>
		HLCD_voidSendString("Frequency:");
     822:	86 e6       	ldi	r24, 0x66	; 102
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
		HLCD_voidSendChar( (Frequency/1000) + 48 );
     82a:	c8 01       	movw	r24, r16
     82c:	68 ee       	ldi	r22, 0xE8	; 232
     82e:	73 e0       	ldi	r23, 0x03	; 3
     830:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     834:	86 2f       	mov	r24, r22
     836:	80 5d       	subi	r24, 0xD0	; 208
     838:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendChar( ( (Frequency/100)%10 ) + 48 );
     83c:	c8 01       	movw	r24, r16
     83e:	64 e6       	ldi	r22, 0x64	; 100
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     846:	cb 01       	movw	r24, r22
     848:	b7 01       	movw	r22, r14
     84a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendChar( ( (Frequency/10)%10 ) + 48 );
     854:	c8 01       	movw	r24, r16
     856:	b7 01       	movw	r22, r14
     858:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     85c:	c8 2f       	mov	r28, r24
     85e:	cb 01       	movw	r24, r22
     860:	b7 01       	movw	r22, r14
     862:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     866:	80 5d       	subi	r24, 0xD0	; 208
     868:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendChar( ( Frequency%10 )+48 );
     86c:	8c 2f       	mov	r24, r28
     86e:	80 5d       	subi	r24, 0xD0	; 208
     870:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendString("HZ");
     874:	81 e7       	ldi	r24, 0x71	; 113
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
     87c:	08 c0       	rjmp	.+16     	; 0x88e <__stack+0x2f>
		
	}
	else if (Status==OUT_OF_RANGE)
     87e:	44 23       	and	r20, r20
     880:	31 f4       	brne	.+12     	; 0x88e <__stack+0x2f>
	{
		HLCD_voidClearScreen();
     882:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <HLCD_voidClearScreen>
		HLCD_voidSendString("OUT OF RANGE");
     886:	84 e7       	ldi	r24, 0x74	; 116
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
	}
	
	
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	08 95       	ret

0000089c <Ultrasonic_u8GetDistance>:

u8 Ultrasonic_u8GetDistance(void)
{
	u16 a=0,b=0,on_time=0;
	MDIO_voidSetPinDirection(DIOD,7,OUTPUT);
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	67 e0       	ldi	r22, 0x07	; 7
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MTIMER1_voidInit();
     8a6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <MTIMER1_voidInit>
	SET_BIT(TIFR,5); //Clear ICU interrupt flag
     8aa:	88 b7       	in	r24, 0x38	; 56
     8ac:	80 62       	ori	r24, 0x20	; 32
     8ae:	88 bf       	out	0x38, r24	; 56
	/* send pulse on trigger pin */
	MDIO_voidSetPinValue(DIOD,7,HIGH);
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	67 e0       	ldi	r22, 0x07	; 7
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_us(50);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	88 e4       	ldi	r24, 0x48	; 72
     8c0:	92 e4       	ldi	r25, 0x42	; 66
     8c2:	0e 94 72 00 	call	0xe4	; 0xe4 <Delay_us>
	MDIO_voidSetPinValue(DIOD,7,LOW);
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	67 e0       	ldi	r22, 0x07	; 7
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	MTIMER1_voidICUInit();
     8d0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <MTIMER1_voidICUInit>
	while(GET_BIT(TIFR,5)==0); //wait while capture is occured
     8d4:	88 b7       	in	r24, 0x38	; 56
     8d6:	85 ff       	sbrs	r24, 5
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <Ultrasonic_u8GetDistance+0x38>
	a=ICR1;
     8da:	86 b5       	in	r24, 0x26	; 38
     8dc:	97 b5       	in	r25, 0x27	; 39
	SET_BIT(TIFR,5); //Clear ICU interrupt flag
     8de:	28 b7       	in	r18, 0x38	; 56
     8e0:	20 62       	ori	r18, 0x20	; 32
     8e2:	28 bf       	out	0x38, r18	; 56
	CLR_BIT(TCCR1B,6); //Configure ICU to FALLING EDGE
     8e4:	2e b5       	in	r18, 0x2e	; 46
     8e6:	2f 7b       	andi	r18, 0xBF	; 191
     8e8:	2e bd       	out	0x2e, r18	; 46
	while(GET_BIT(TIFR,5)==0); //wait while capture is occured
     8ea:	28 b7       	in	r18, 0x38	; 56
     8ec:	25 ff       	sbrs	r18, 5
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <Ultrasonic_u8GetDistance+0x4e>
	b=ICR1;
     8f0:	66 b5       	in	r22, 0x26	; 38
     8f2:	77 b5       	in	r23, 0x27	; 39
	SET_BIT(TIFR,5); //Clear ICU interrupt flag
     8f4:	28 b7       	in	r18, 0x38	; 56
     8f6:	20 62       	ori	r18, 0x20	; 32
     8f8:	28 bf       	out	0x38, r18	; 56
	TCNT1=0;
     8fa:	1d bc       	out	0x2d, r1	; 45
     8fc:	1c bc       	out	0x2c, r1	; 44
	TCCR1B=0; // stop timer1
     8fe:	1e bc       	out	0x2e, r1	; 46
	on_time=b-a;
     900:	68 1b       	sub	r22, r24
     902:	79 0b       	sbc	r23, r25
	u8 distance=( (on_time*34600)/(2*F_CPU) );
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	28 e2       	ldi	r18, 0x28	; 40
     90a:	37 e8       	ldi	r19, 0x87	; 135
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__mulsi3>
     914:	20 e8       	ldi	r18, 0x80	; 128
     916:	34 e8       	ldi	r19, 0x84	; 132
     918:	4e e1       	ldi	r20, 0x1E	; 30
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	0e 94 30 08 	call	0x1060	; 0x1060 <__udivmodsi4>
	return distance;
}
     920:	82 2f       	mov	r24, r18
     922:	08 95       	ret

00000924 <LCD_voidDisplayUltrasonicDistance>:

void LCD_voidDisplayUltrasonicDistance(u8 distance)
{
     924:	cf 93       	push	r28
     926:	c8 2f       	mov	r28, r24
	if(distance>=99)
     928:	83 36       	cpi	r24, 0x63	; 99
     92a:	68 f0       	brcs	.+26     	; 0x946 <LCD_voidDisplayUltrasonicDistance+0x22>
	{
		HLCD_voidClearScreen();
     92c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <HLCD_voidClearScreen>
		HLCD_voidSendString("No Object");
     930:	81 e8       	ldi	r24, 0x81	; 129
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
		Delay_ms(500);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	8a ef       	ldi	r24, 0xFA	; 250
     93e:	93 e4       	ldi	r25, 0x43	; 67
     940:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
     944:	1c c0       	rjmp	.+56     	; 0x97e <LCD_voidDisplayUltrasonicDistance+0x5a>
	}
	else
	{
		HLCD_voidClearScreen();
     946:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <HLCD_voidClearScreen>
		HLCD_voidSendString("Distance ");
     94a:	8b e8       	ldi	r24, 0x8B	; 139
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
		HLCD_voidSendChar( ( distance/10 )+ 48 );
     952:	8c 2f       	mov	r24, r28
     954:	6a e0       	ldi	r22, 0x0A	; 10
     956:	0e 94 10 08 	call	0x1020	; 0x1020 <__udivmodqi4>
     95a:	c9 2f       	mov	r28, r25
     95c:	80 5d       	subi	r24, 0xD0	; 208
     95e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendChar( ( distance%10 )+ 48 );
     962:	8c 2f       	mov	r24, r28
     964:	80 5d       	subi	r24, 0xD0	; 208
     966:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
		HLCD_voidSendString("cm");
     96a:	85 e9       	ldi	r24, 0x95	; 149
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 c3 05 	call	0xb86	; 0xb86 <HLCD_voidSendString>
		Delay_ms(500);
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	8a ef       	ldi	r24, 0xFA	; 250
     978:	93 e4       	ldi	r25, 0x43	; 67
     97a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	}
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <MINT_voidSetGlobalInterrupt>:

#include "Interupt_interface.h"
#include "Interrupt_private.h"
void MINT_voidSetGlobalInterrupt(void)
{
	SET_BIT(SREG,7);
     982:	8f b7       	in	r24, 0x3f	; 63
     984:	80 68       	ori	r24, 0x80	; 128
     986:	8f bf       	out	0x3f, r24	; 63
}
     988:	08 95       	ret

0000098a <MINT_voidClrGlobalInterrupt>:

void MINT_voidClrGlobalInterrupt(void)
{
	CLR_BIT(SREG,7);
     98a:	8f b7       	in	r24, 0x3f	; 63
     98c:	8f 77       	andi	r24, 0x7F	; 127
     98e:	8f bf       	out	0x3f, r24	; 63
}
     990:	08 95       	ret

00000992 <MINT_voidEnableExtInterrupt>:

void MINT_voidEnableExtInterrupt(u8 Copy_u8INTNumber)
{
	switch(Copy_u8INTNumber)
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	49 f0       	breq	.+18     	; 0x9a8 <MINT_voidEnableExtInterrupt+0x16>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	18 f0       	brcs	.+6      	; 0x9a0 <MINT_voidEnableExtInterrupt+0xe>
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	61 f4       	brne	.+24     	; 0x9b6 <MINT_voidEnableExtInterrupt+0x24>
     99e:	08 c0       	rjmp	.+16     	; 0x9b0 <MINT_voidEnableExtInterrupt+0x1e>
	{
		case 0 : SET_BIT(GICR,6); break;
     9a0:	8b b7       	in	r24, 0x3b	; 59
     9a2:	80 64       	ori	r24, 0x40	; 64
     9a4:	8b bf       	out	0x3b, r24	; 59
     9a6:	08 95       	ret
		case 1 : SET_BIT(GICR,7); break;
     9a8:	8b b7       	in	r24, 0x3b	; 59
     9aa:	80 68       	ori	r24, 0x80	; 128
     9ac:	8b bf       	out	0x3b, r24	; 59
     9ae:	08 95       	ret
		case 2 : SET_BIT(GICR,5); break;
     9b0:	8b b7       	in	r24, 0x3b	; 59
     9b2:	80 62       	ori	r24, 0x20	; 32
     9b4:	8b bf       	out	0x3b, r24	; 59
     9b6:	08 95       	ret

000009b8 <MINT_voidDisableExtInterrupt>:
		default: break;
	}
}
void MINT_voidDisableExtInterrupt(u8 Copy_u8INTNumber)
{
		switch(Copy_u8INTNumber)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	49 f0       	breq	.+18     	; 0x9ce <MINT_voidDisableExtInterrupt+0x16>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	18 f0       	brcs	.+6      	; 0x9c6 <MINT_voidDisableExtInterrupt+0xe>
     9c0:	82 30       	cpi	r24, 0x02	; 2
     9c2:	61 f4       	brne	.+24     	; 0x9dc <MINT_voidDisableExtInterrupt+0x24>
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <MINT_voidDisableExtInterrupt+0x1e>
		{
			case 0 : CLR_BIT(GICR,6); break;
     9c6:	8b b7       	in	r24, 0x3b	; 59
     9c8:	8f 7b       	andi	r24, 0xBF	; 191
     9ca:	8b bf       	out	0x3b, r24	; 59
     9cc:	08 95       	ret
			case 1 : CLR_BIT(GICR,7); break;
     9ce:	8b b7       	in	r24, 0x3b	; 59
     9d0:	8f 77       	andi	r24, 0x7F	; 127
     9d2:	8b bf       	out	0x3b, r24	; 59
     9d4:	08 95       	ret
			case 2 : CLR_BIT(GICR,5); break;
     9d6:	8b b7       	in	r24, 0x3b	; 59
     9d8:	8f 7d       	andi	r24, 0xDF	; 223
     9da:	8b bf       	out	0x3b, r24	; 59
     9dc:	08 95       	ret

000009de <MINT_voidSetSenseControlMode>:
			default: break;
		}
}
void MINT_voidSetSenseControlMode(u8 Copy_u8INTNumber,u8 Copy_u8Mode)
{
	if (Copy_u8INTNumber==0)
     9de:	88 23       	and	r24, r24
     9e0:	31 f5       	brne	.+76     	; 0xa2e <MINT_voidSetSenseControlMode+0x50>
	{
		switch(Copy_u8Mode)
     9e2:	61 30       	cpi	r22, 0x01	; 1
     9e4:	79 f0       	breq	.+30     	; 0xa04 <MINT_voidSetSenseControlMode+0x26>
     9e6:	61 30       	cpi	r22, 0x01	; 1
     9e8:	30 f0       	brcs	.+12     	; 0x9f6 <MINT_voidSetSenseControlMode+0x18>
     9ea:	62 30       	cpi	r22, 0x02	; 2
     9ec:	91 f0       	breq	.+36     	; 0xa12 <MINT_voidSetSenseControlMode+0x34>
     9ee:	63 30       	cpi	r22, 0x03	; 3
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <MINT_voidSetSenseControlMode+0x16>
     9f2:	52 c0       	rjmp	.+164    	; 0xa98 <MINT_voidSetSenseControlMode+0xba>
     9f4:	15 c0       	rjmp	.+42     	; 0xa20 <MINT_voidSetSenseControlMode+0x42>
		{
			case LOW_LEVEL_SENSE_MODE : 
			CLR_BIT(MCUCR,0);
     9f6:	85 b7       	in	r24, 0x35	; 53
     9f8:	8e 7f       	andi	r24, 0xFE	; 254
     9fa:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
     9fc:	85 b7       	in	r24, 0x35	; 53
     9fe:	8d 7f       	andi	r24, 0xFD	; 253
     a00:	85 bf       	out	0x35, r24	; 53
			break;
     a02:	08 95       	ret
			case ANY_LOGICAL_CHANGE_MODE :
			SET_BIT(MCUCR,0);
     a04:	85 b7       	in	r24, 0x35	; 53
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
     a0a:	85 b7       	in	r24, 0x35	; 53
     a0c:	8d 7f       	andi	r24, 0xFD	; 253
     a0e:	85 bf       	out	0x35, r24	; 53
			break;			
     a10:	08 95       	ret
			case FALLING_EDGE_MODE :
			CLR_BIT(MCUCR,0);
     a12:	85 b7       	in	r24, 0x35	; 53
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
     a18:	85 b7       	in	r24, 0x35	; 53
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	85 bf       	out	0x35, r24	; 53
			break;
     a1e:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCR,0);
     a20:	85 b7       	in	r24, 0x35	; 53
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
     a26:	85 b7       	in	r24, 0x35	; 53
     a28:	82 60       	ori	r24, 0x02	; 2
     a2a:	85 bf       	out	0x35, r24	; 53
			break;
     a2c:	08 95       	ret
			default: break;					
		}
	}
	else if (Copy_u8INTNumber==1)
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	29 f5       	brne	.+74     	; 0xa7c <MINT_voidSetSenseControlMode+0x9e>
	{
		switch(Copy_u8Mode)
     a32:	61 30       	cpi	r22, 0x01	; 1
     a34:	71 f0       	breq	.+28     	; 0xa52 <MINT_voidSetSenseControlMode+0x74>
     a36:	61 30       	cpi	r22, 0x01	; 1
     a38:	28 f0       	brcs	.+10     	; 0xa44 <MINT_voidSetSenseControlMode+0x66>
     a3a:	62 30       	cpi	r22, 0x02	; 2
     a3c:	89 f0       	breq	.+34     	; 0xa60 <MINT_voidSetSenseControlMode+0x82>
     a3e:	63 30       	cpi	r22, 0x03	; 3
     a40:	59 f5       	brne	.+86     	; 0xa98 <MINT_voidSetSenseControlMode+0xba>
     a42:	15 c0       	rjmp	.+42     	; 0xa6e <MINT_voidSetSenseControlMode+0x90>
		{
			case LOW_LEVEL_SENSE_MODE :
			CLR_BIT(MCUCR,2);
     a44:	85 b7       	in	r24, 0x35	; 53
     a46:	8b 7f       	andi	r24, 0xFB	; 251
     a48:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
     a4a:	85 b7       	in	r24, 0x35	; 53
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	85 bf       	out	0x35, r24	; 53
			break;
     a50:	08 95       	ret
			case ANY_LOGICAL_CHANGE_MODE :
			SET_BIT(MCUCR,2);
     a52:	85 b7       	in	r24, 0x35	; 53
     a54:	84 60       	ori	r24, 0x04	; 4
     a56:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
     a58:	85 b7       	in	r24, 0x35	; 53
     a5a:	87 7f       	andi	r24, 0xF7	; 247
     a5c:	85 bf       	out	0x35, r24	; 53
			break;
     a5e:	08 95       	ret
			case FALLING_EDGE_MODE :
			CLR_BIT(MCUCR,2);
     a60:	85 b7       	in	r24, 0x35	; 53
     a62:	8b 7f       	andi	r24, 0xFB	; 251
     a64:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
     a66:	85 b7       	in	r24, 0x35	; 53
     a68:	88 60       	ori	r24, 0x08	; 8
     a6a:	85 bf       	out	0x35, r24	; 53
			break;
     a6c:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCR,2);
     a6e:	85 b7       	in	r24, 0x35	; 53
     a70:	84 60       	ori	r24, 0x04	; 4
     a72:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
     a74:	85 b7       	in	r24, 0x35	; 53
     a76:	88 60       	ori	r24, 0x08	; 8
     a78:	85 bf       	out	0x35, r24	; 53
			break;
     a7a:	08 95       	ret
			default: break;
		}		

	}
	else if (Copy_u8INTNumber==2)
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	61 f4       	brne	.+24     	; 0xa98 <MINT_voidSetSenseControlMode+0xba>
	{
		switch(Copy_u8Mode)
     a80:	62 30       	cpi	r22, 0x02	; 2
     a82:	19 f0       	breq	.+6      	; 0xa8a <MINT_voidSetSenseControlMode+0xac>
     a84:	63 30       	cpi	r22, 0x03	; 3
     a86:	41 f4       	brne	.+16     	; 0xa98 <MINT_voidSetSenseControlMode+0xba>
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <MINT_voidSetSenseControlMode+0xb4>
		{
			case FALLING_EDGE_MODE : 
			CLR_BIT(MCUCSR,6);
     a8a:	84 b7       	in	r24, 0x34	; 52
     a8c:	8f 7b       	andi	r24, 0xBF	; 191
     a8e:	84 bf       	out	0x34, r24	; 52
			break;
     a90:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCSR,6);
     a92:	84 b7       	in	r24, 0x34	; 52
     a94:	80 64       	ori	r24, 0x40	; 64
     a96:	84 bf       	out	0x34, r24	; 52
     a98:	08 95       	ret

00000a9a <HLCD_voidSendFallingEdge>:
   #endif
   
}

 void HLCD_voidSendFallingEdge(u8 Copy_u8Port)
{
     a9a:	cf 93       	push	r28
     a9c:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(Copy_u8Port,EN,HIGH);
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_ms(4);
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e8       	ldi	r24, 0x80	; 128
     aac:	90 e4       	ldi	r25, 0x40	; 64
     aae:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	MDIO_voidSetPinValue(Copy_u8Port,EN,LOW);
     ab2:	8c 2f       	mov	r24, r28
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	Delay_ms(4);	
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	90 e4       	ldi	r25, 0x40	; 64
     ac4:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8Command)
{
     acc:	68 2f       	mov	r22, r24
	#if   LCD_MODE == EIGHT_BITS_MODE 
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Command);
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,LOW);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <HLCD_voidSendFallingEdge>
	HLCD_voidSendFallingEdge(DIOB);
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Command);
	HLCD_voidSendFallingEdge(DIOB);
	Delay_ms(2);
	#endif
}
     ae4:	08 95       	ret

00000ae6 <HLCD_voidInit>:
#include "LCD_config.h"

void HLCD_voidInit(void)
{
	/* WAIT 400MS */
	Delay_ms(400);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	88 ec       	ldi	r24, 0xC8	; 200
     aec:	93 e4       	ldi	r25, 0x43	; 67
     aee:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/* define EN , RS , RW as output pins */
    MDIO_voidSetPinDirection(DIOB,EN,OUTPUT);
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RS,OUTPUT);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RW,OUTPUT);
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	62 e0       	ldi	r22, 0x02	; 2
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	0e 94 9b 00 	call	0x136	; 0x136 <MDIO_voidSetPinDirection>
   #if   LCD_MODE == EIGHT_BITS_MODE
   /* define lcd port as output */
   MDIO_voidSetPortDirection(LCD_PORT,OUTPUT);  
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	0e 94 24 01 	call	0x248	; 0x248 <MDIO_voidSetPortDirection>
   MDIO_voidSetPinValue(DIOB,RW,LOW); // set RW BIN WITH 0 TO WRITE
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
   HLCD_voidSendCommand(EIGHT_BITS_CMD);  // to set the LCD at eight bit mode
     b22:	88 e3       	ldi	r24, 0x38	; 56
     b24:	0e 94 66 05 	call	0xacc	; 0xacc <HLCD_voidSendCommand>
   Delay_ms(4);
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	90 e4       	ldi	r25, 0x40	; 64
     b30:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF); 
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	0e 94 66 05 	call	0xacc	; 0xacc <HLCD_voidSendCommand>
   Delay_ms(4);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	90 e4       	ldi	r25, 0x40	; 64
     b42:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(CLR_SCREEN_CMD);
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 66 05 	call	0xacc	; 0xacc <HLCD_voidSendCommand>
   Delay_ms(20);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 ea       	ldi	r24, 0xA0	; 160
     b52:	91 e4       	ldi	r25, 0x41	; 65
     b54:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(ENTRY_MODE_CMD);
     b58:	86 e0       	ldi	r24, 0x06	; 6
     b5a:	0e 94 66 05 	call	0xacc	; 0xacc <HLCD_voidSendCommand>
   Delay_ms(4);  
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e8       	ldi	r24, 0x80	; 128
     b64:	90 e4       	ldi	r25, 0x40	; 64
     b66:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   Delay_ms(4);
   
   
   #endif
   
}
     b6a:	08 95       	ret

00000b6c <HLCD_voidSendChar>:
	Delay_ms(2);
	#endif
}

void HLCD_voidSendChar(u8 Copy_u8Char)
{
     b6c:	68 2f       	mov	r22, r24
	#if   LCD_MODE== EIGHT_BITS_MODE
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Char); // Write char on port
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0e 94 0d 02 	call	0x41a	; 0x41a <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,HIGH);      // set RS pin to write data
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);    // enable LCD
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 4d 05 	call	0xa9a	; 0xa9a <HLCD_voidSendFallingEdge>
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Char);
	HLCD_voidSendFallingEdge(DIOB);	
	Delay_ms(2);
	#endif
	
}
     b84:	08 95       	ret

00000b86 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8pString)
{
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	8c 01       	movw	r16, r24
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
     b8e:	fc 01       	movw	r30, r24
     b90:	80 81       	ld	r24, Z
     b92:	88 23       	and	r24, r24
     b94:	51 f0       	breq	.+20     	; 0xbaa <HLCD_voidSendString+0x24>
     b96:	c0 e0       	ldi	r28, 0x00	; 0
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
     b98:	0e 94 b6 05 	call	0xb6c	; 0xb6c <HLCD_voidSendChar>
}

void HLCD_voidSendString(u8 *Copy_u8pString)
{
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
     b9c:	cf 5f       	subi	r28, 0xFF	; 255
     b9e:	f8 01       	movw	r30, r16
     ba0:	ec 0f       	add	r30, r28
     ba2:	f1 1d       	adc	r31, r1
     ba4:	80 81       	ld	r24, Z
     ba6:	88 23       	and	r24, r24
     ba8:	b9 f7       	brne	.-18     	; 0xb98 <HLCD_voidSendString+0x12>
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
	}
}
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <HLCD_voidClearScreen>:

void HLCD_voidClearScreen(void)
{
	HLCD_voidSendCommand(CLR_SCREEN_CMD);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 66 05 	call	0xacc	; 0xacc <HLCD_voidSendCommand>
	Delay_ms(20);
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 ea       	ldi	r24, 0xA0	; 160
     bbe:	91 e4       	ldi	r25, 0x41	; 65
     bc0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     bc4:	08 95       	ret

00000bc6 <HLCD_voidMoveCursor>:

void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
     bc6:	28 2f       	mov	r18, r24
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	22 30       	cpi	r18, 0x02	; 2
     bcc:	70 f4       	brcc	.+28     	; 0xbea <HLCD_voidMoveCursor+0x24>
     bce:	66 23       	and	r22, r22
     bd0:	71 f0       	breq	.+28     	; 0xbee <HLCD_voidMoveCursor+0x28>
     bd2:	61 31       	cpi	r22, 0x11	; 17
     bd4:	70 f4       	brcc	.+28     	; 0xbf2 <HLCD_voidMoveCursor+0x2c>
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
	}
	else if(Copy_u8Row==1)
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <HLCD_voidMoveCursor+0x1a>
	{
		Local_u8ReqLocation=0x80+Copy_u8Col-1;
     bda:	96 2f       	mov	r25, r22
     bdc:	91 58       	subi	r25, 0x81	; 129
     bde:	0a c0       	rjmp	.+20     	; 0xbf4 <HLCD_voidMoveCursor+0x2e>
	}
	else if (Copy_u8Row==2)
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	41 f4       	brne	.+16     	; 0xbf4 <HLCD_voidMoveCursor+0x2e>
	{
		Local_u8ReqLocation=0xc0+Copy_u8Col-1;
     be4:	96 2f       	mov	r25, r22
     be6:	91 54       	subi	r25, 0x41	; 65
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <HLCD_voidMoveCursor+0x2e>
void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
     bea:	90 e8       	ldi	r25, 0x80	; 128
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <HLCD_voidMoveCursor+0x2e>
     bee:	90 e8       	ldi	r25, 0x80	; 128
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <HLCD_voidMoveCursor+0x2e>
     bf2:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		// do nothing
	}
	HLCD_voidSendCommand(Local_u8ReqLocation);
     bf4:	89 2f       	mov	r24, r25
     bf6:	0e 94 66 05 	call	0xacc	; 0xacc <HLCD_voidSendCommand>
	Delay_ms(2);
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e4       	ldi	r25, 0x40	; 64
     c02:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	
     c06:	08 95       	ret

00000c08 <MTIMER0_voidInit>:
  #elif TIMER0_CLOCK == CPU_DIV_BY_256
  CLR_BIT(TCCR0,0);
  CLR_BIT(TCCR0,1);
  SET_BIT(TCCR0,2);  
  #elif TIMER0_CLOCK == CPU_DIV_BY_1024
  SET_BIT(TCCR0,0);
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,1);
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	8d 7f       	andi	r24, 0xFD	; 253
     c12:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,2);  
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,2);  
  #endif
  
  /* configure timer0 mode */
  #if   TIMER0_MODE == OVER_FLOW_MODE
  CLR_BIT(TCCR0,6);
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8f 7b       	andi	r24, 0xBF	; 191
     c1e:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,3);
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,5);
  #elif  COMPARE_OUT_MODE== TOGG_OC0_ON_COMP_MATCH
  SET_BIT(TCCR0,4);
  CLR_BIT(TCCR0,5);  
  #elif  COMPARE_OUT_MODE== CLR_OC0_ON_COMP_MATCH
  CLR_BIT(TCCR0,4);
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	8f 7e       	andi	r24, 0xEF	; 239
     c2a:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,5);  
     c2c:	83 b7       	in	r24, 0x33	; 51
     c2e:	80 62       	ori	r24, 0x20	; 32
     c30:	83 bf       	out	0x33, r24	; 51
  #if OC0_STATUS == OC0_ENABLED
  MDIO_voidSetPinDirection(DIOB,3,OUTPUT); // set PB3 as output pin
  #endif 
  /* Set OCR0 with a value if needed   */
  
}
     c32:	08 95       	ret

00000c34 <MTIMER0_voidEnableInterrupt>:

void MTIMER0_voidEnableInterrupt(void)
{
	MINT_voidSetGlobalInterrupt(); 
     c34:	0e 94 c1 04 	call	0x982	; 0x982 <MINT_voidSetGlobalInterrupt>
	
  #if   TIMER0_MODE == OVER_FLOW_MODE
  SET_BIT(TIMSK,0);  //enable interrupt in case of overflow
     c38:	89 b7       	in	r24, 0x39	; 57
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	89 bf       	out	0x39, r24	; 57
  #elif TIMER0_MODE == CTC_MODE
  SET_BIT(TIMSK,1); //enable interrupt in case of compare match
  #endif	
}
     c3e:	08 95       	ret

00000c40 <MTIMER2_voidInit>:
void MTIMER2_voidInit(void)
{
	#if    TIMER2_CLOCK_SOURCE_TYPE == T2_CPU_CLOCK
	CLR_BIT(ASSR,3);
	#elif  TIMER2_CLOCK_SOURCE_TYPE == T2_EXTERNAL_CRYSTAL_ON_TOSC1
	SET_BIT(ASSR,3);
     c40:	82 b5       	in	r24, 0x22	; 34
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	82 bd       	out	0x22, r24	; 34
	#endif 
	
	/* configure timer2 clock */
	#if TIMER2_CLOCK == NO_CLOCK_SOURCE
	/* stop timer */
	CLR_BIT(TCCR2,0);
     c46:	85 b5       	in	r24, 0x25	; 37
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,1);
     c4c:	85 b5       	in	r24, 0x25	; 37
     c4e:	8d 7f       	andi	r24, 0xFD	; 253
     c50:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,2);
     c52:	85 b5       	in	r24, 0x25	; 37
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,2);
	#endif	
	
  /* configure timer2 mode */
  #if   TIMER2_MODE == OVER_FLOW_MODE
  CLR_BIT(TCCR2,6);
     c58:	85 b5       	in	r24, 0x25	; 37
     c5a:	8f 7b       	andi	r24, 0xBF	; 191
     c5c:	85 bd       	out	0x25, r24	; 37
  CLR_BIT(TCCR2,3);
     c5e:	85 b5       	in	r24, 0x25	; 37
     c60:	87 7f       	andi	r24, 0xF7	; 247
     c62:	85 bd       	out	0x25, r24	; 37
  CLR_BIT(TCCR2,5);
  #elif  COMPARE_OUT_MODE== TOGG_OC2_ON_COMP_MATCH
  SET_BIT(TCCR2,4);
  CLR_BIT(TCCR2,5);
  #elif  COMPARE_OUT_MODE== CLR_OC2_ON_COMP_MATCH
  CLR_BIT(TCCR2,4);
     c64:	85 b5       	in	r24, 0x25	; 37
     c66:	8f 7e       	andi	r24, 0xEF	; 239
     c68:	85 bd       	out	0x25, r24	; 37
  SET_BIT(TCCR2,5);
     c6a:	85 b5       	in	r24, 0x25	; 37
     c6c:	80 62       	ori	r24, 0x20	; 32
     c6e:	85 bd       	out	0x25, r24	; 37
  #endif  
  
/* Set OCR2 with a value if needed   */  


}
     c70:	08 95       	ret

00000c72 <MTIMER2_voidEnableInterrupt>:

void MTIMER2_voidEnableInterrupt(void)
{
	MINT_voidSetGlobalInterrupt();
     c72:	0e 94 c1 04 	call	0x982	; 0x982 <MINT_voidSetGlobalInterrupt>
	
	#if   TIMER2_MODE == OVER_FLOW_MODE
	SET_BIT(TIMSK,6);  //enable interrupt in case of overflow
     c76:	89 b7       	in	r24, 0x39	; 57
     c78:	80 64       	ori	r24, 0x40	; 64
     c7a:	89 bf       	out	0x39, r24	; 57
	#elif TIMER0_MODE == CTC_MODE
	SET_BIT(TIMSK,7); //enable interrupt in case of compare match
	#endif
}
     c7c:	08 95       	ret

00000c7e <MTIMER1_voidInit>:
	/* stop timer */
	CLR_BIT(TCCR1B,0);
    CLR_BIT(TCCR1B,1);
	CLR_BIT(TCCR1B,2);
	#elif TIMER1_CLOCK==CPU_CLOCK
	SET_BIT(TCCR1B,0);
     c7e:	8e b5       	in	r24, 0x2e	; 46
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
     c84:	8e b5       	in	r24, 0x2e	; 46
     c86:	8d 7f       	andi	r24, 0xFD	; 253
     c88:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);	
     c8a:	8e b5       	in	r24, 0x2e	; 46
     c8c:	8b 7f       	andi	r24, 0xFB	; 251
     c8e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,1);
	SET_BIT(TCCR1B,2);	 
    #endif
	/* Configure timer1 mode */
	#if   TIMER1_MODE==OVER_FLOW_MODE
	CLR_BIT(TCCR1A,0);
     c90:	8f b5       	in	r24, 0x2f	; 47
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,1);
     c96:	8f b5       	in	r24, 0x2f	; 47
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1B,3);
     c9c:	8e b5       	in	r24, 0x2e	; 46
     c9e:	87 7f       	andi	r24, 0xF7	; 247
     ca0:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,4);	
     ca2:	8e b5       	in	r24, 0x2e	; 46
     ca4:	8f 7e       	andi	r24, 0xEF	; 239
     ca6:	8e bd       	out	0x2e, r24	; 46
	#endif	
	/* set OC1A and OC1B with values if needed  */
	//OC1A= ;
	//OC1B= ;
	
}
     ca8:	08 95       	ret

00000caa <MTIMER1_voidEnableInterrupt>:

void MTIMER1_voidEnableInterrupt(void)
{
	MINT_voidSetGlobalInterrupt();
     caa:	0e 94 c1 04 	call	0x982	; 0x982 <MINT_voidSetGlobalInterrupt>
	
	#if    TIMER1_MODE==OVER_FLOW_MODE
	SET_BIT(TIMSK,2);
     cae:	89 b7       	in	r24, 0x39	; 57
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	89 bf       	out	0x39, r24	; 57
    #elif  TIMER1_MODE== CTC_MODE
	SET_BIT(TIMSK,4);
	SET_BIT(TIMSK,3);
    #endif
	
}
     cb4:	08 95       	ret

00000cb6 <MTIMER1_voidICUInit>:

void MTIMER1_voidICUInit(void)
{
	/* configure noise canceller mode */
	#if    ICU_NOISE_CANCELLER_STATUS==ICU_NOISE_CANCELLER_EN
	SET_BIT(TCCR1B,7);
     cb6:	8e b5       	in	r24, 0x2e	; 46
     cb8:	80 68       	ori	r24, 0x80	; 128
     cba:	8e bd       	out	0x2e, r24	; 46
    #endif
	/* configure ICU Edge */
	#if ICU_EDGE==ICU_FALLING_EDGE
	CLR_BIT(TCCR1B,6);
	#elif ICU_EDGE==ICU_RISING_EDGE
    SET_BIT(TCCR1B,6);
     cbc:	8e b5       	in	r24, 0x2e	; 46
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8e bd       	out	0x2e, r24	; 46
    #endif
	/* configure ICP1 as input pin */
	//MDIO_voidSetPinDirection(DIOD,6,INPUT);
	/* Enable ICU Interrupt */
	SET_BIT(TIMSK,5);
     cc2:	89 b7       	in	r24, 0x39	; 57
     cc4:	80 62       	ori	r24, 0x20	; 32
     cc6:	89 bf       	out	0x39, r24	; 57
     cc8:	08 95       	ret

00000cca <main>:
#include "ICU_interface.h"
#include "LCD_interface.h"

int main(void)
{ 
	HLCD_voidInit();
     cca:	0e 94 73 05 	call	0xae6	; 0xae6 <HLCD_voidInit>
	
	u8 Local_u8Distance=0;
    while(1)
    {
		Local_u8Distance=Ultrasonic_u8GetDistance();
     cce:	0e 94 4e 04 	call	0x89c	; 0x89c <Ultrasonic_u8GetDistance>
      	LCD_voidDisplayUltrasonicDistance(Local_u8Distance);
     cd2:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidDisplayUltrasonicDistance>
     cd6:	fb cf       	rjmp	.-10     	; 0xcce <main+0x4>

00000cd8 <__divsf3>:
     cd8:	0c d0       	rcall	.+24     	; 0xcf2 <__divsf3x>
     cda:	e6 c0       	rjmp	.+460    	; 0xea8 <__fp_round>
     cdc:	de d0       	rcall	.+444    	; 0xe9a <__fp_pscB>
     cde:	40 f0       	brcs	.+16     	; 0xcf0 <__divsf3+0x18>
     ce0:	d5 d0       	rcall	.+426    	; 0xe8c <__fp_pscA>
     ce2:	30 f0       	brcs	.+12     	; 0xcf0 <__divsf3+0x18>
     ce4:	21 f4       	brne	.+8      	; 0xcee <__divsf3+0x16>
     ce6:	5f 3f       	cpi	r21, 0xFF	; 255
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__divsf3+0x18>
     cea:	c7 c0       	rjmp	.+398    	; 0xe7a <__fp_inf>
     cec:	51 11       	cpse	r21, r1
     cee:	10 c1       	rjmp	.+544    	; 0xf10 <__fp_szero>
     cf0:	ca c0       	rjmp	.+404    	; 0xe86 <__fp_nan>

00000cf2 <__divsf3x>:
     cf2:	eb d0       	rcall	.+470    	; 0xeca <__fp_split3>
     cf4:	98 f3       	brcs	.-26     	; 0xcdc <__divsf3+0x4>

00000cf6 <__divsf3_pse>:
     cf6:	99 23       	and	r25, r25
     cf8:	c9 f3       	breq	.-14     	; 0xcec <__divsf3+0x14>
     cfa:	55 23       	and	r21, r21
     cfc:	b1 f3       	breq	.-20     	; 0xcea <__divsf3+0x12>
     cfe:	95 1b       	sub	r25, r21
     d00:	55 0b       	sbc	r21, r21
     d02:	bb 27       	eor	r27, r27
     d04:	aa 27       	eor	r26, r26
     d06:	62 17       	cp	r22, r18
     d08:	73 07       	cpc	r23, r19
     d0a:	84 07       	cpc	r24, r20
     d0c:	38 f0       	brcs	.+14     	; 0xd1c <__divsf3_pse+0x26>
     d0e:	9f 5f       	subi	r25, 0xFF	; 255
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	44 1f       	adc	r20, r20
     d18:	aa 1f       	adc	r26, r26
     d1a:	a9 f3       	breq	.-22     	; 0xd06 <__divsf3_pse+0x10>
     d1c:	33 d0       	rcall	.+102    	; 0xd84 <__divsf3_pse+0x8e>
     d1e:	0e 2e       	mov	r0, r30
     d20:	3a f0       	brmi	.+14     	; 0xd30 <__divsf3_pse+0x3a>
     d22:	e0 e8       	ldi	r30, 0x80	; 128
     d24:	30 d0       	rcall	.+96     	; 0xd86 <__divsf3_pse+0x90>
     d26:	91 50       	subi	r25, 0x01	; 1
     d28:	50 40       	sbci	r21, 0x00	; 0
     d2a:	e6 95       	lsr	r30
     d2c:	00 1c       	adc	r0, r0
     d2e:	ca f7       	brpl	.-14     	; 0xd22 <__divsf3_pse+0x2c>
     d30:	29 d0       	rcall	.+82     	; 0xd84 <__divsf3_pse+0x8e>
     d32:	fe 2f       	mov	r31, r30
     d34:	27 d0       	rcall	.+78     	; 0xd84 <__divsf3_pse+0x8e>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	bb 1f       	adc	r27, r27
     d3e:	26 17       	cp	r18, r22
     d40:	37 07       	cpc	r19, r23
     d42:	48 07       	cpc	r20, r24
     d44:	ab 07       	cpc	r26, r27
     d46:	b0 e8       	ldi	r27, 0x80	; 128
     d48:	09 f0       	breq	.+2      	; 0xd4c <__divsf3_pse+0x56>
     d4a:	bb 0b       	sbc	r27, r27
     d4c:	80 2d       	mov	r24, r0
     d4e:	bf 01       	movw	r22, r30
     d50:	ff 27       	eor	r31, r31
     d52:	93 58       	subi	r25, 0x83	; 131
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	2a f0       	brmi	.+10     	; 0xd62 <__divsf3_pse+0x6c>
     d58:	9e 3f       	cpi	r25, 0xFE	; 254
     d5a:	51 05       	cpc	r21, r1
     d5c:	68 f0       	brcs	.+26     	; 0xd78 <__divsf3_pse+0x82>
     d5e:	8d c0       	rjmp	.+282    	; 0xe7a <__fp_inf>
     d60:	d7 c0       	rjmp	.+430    	; 0xf10 <__fp_szero>
     d62:	5f 3f       	cpi	r21, 0xFF	; 255
     d64:	ec f3       	brlt	.-6      	; 0xd60 <__divsf3_pse+0x6a>
     d66:	98 3e       	cpi	r25, 0xE8	; 232
     d68:	dc f3       	brlt	.-10     	; 0xd60 <__divsf3_pse+0x6a>
     d6a:	86 95       	lsr	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f7 95       	ror	r31
     d74:	9f 5f       	subi	r25, 0xFF	; 255
     d76:	c9 f7       	brne	.-14     	; 0xd6a <__divsf3_pse+0x74>
     d78:	88 0f       	add	r24, r24
     d7a:	91 1d       	adc	r25, r1
     d7c:	96 95       	lsr	r25
     d7e:	87 95       	ror	r24
     d80:	97 f9       	bld	r25, 7
     d82:	08 95       	ret
     d84:	e1 e0       	ldi	r30, 0x01	; 1
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	88 1f       	adc	r24, r24
     d8c:	bb 1f       	adc	r27, r27
     d8e:	62 17       	cp	r22, r18
     d90:	73 07       	cpc	r23, r19
     d92:	84 07       	cpc	r24, r20
     d94:	ba 07       	cpc	r27, r26
     d96:	20 f0       	brcs	.+8      	; 0xda0 <__divsf3_pse+0xaa>
     d98:	62 1b       	sub	r22, r18
     d9a:	73 0b       	sbc	r23, r19
     d9c:	84 0b       	sbc	r24, r20
     d9e:	ba 0b       	sbc	r27, r26
     da0:	ee 1f       	adc	r30, r30
     da2:	88 f7       	brcc	.-30     	; 0xd86 <__divsf3_pse+0x90>
     da4:	e0 95       	com	r30
     da6:	08 95       	ret

00000da8 <__fixunssfsi>:
     da8:	98 d0       	rcall	.+304    	; 0xeda <__fp_splitA>
     daa:	88 f0       	brcs	.+34     	; 0xdce <__fixunssfsi+0x26>
     dac:	9f 57       	subi	r25, 0x7F	; 127
     dae:	90 f0       	brcs	.+36     	; 0xdd4 <__fixunssfsi+0x2c>
     db0:	b9 2f       	mov	r27, r25
     db2:	99 27       	eor	r25, r25
     db4:	b7 51       	subi	r27, 0x17	; 23
     db6:	a0 f0       	brcs	.+40     	; 0xde0 <__fixunssfsi+0x38>
     db8:	d1 f0       	breq	.+52     	; 0xdee <__fixunssfsi+0x46>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	1a f0       	brmi	.+6      	; 0xdca <__fixunssfsi+0x22>
     dc4:	ba 95       	dec	r27
     dc6:	c9 f7       	brne	.-14     	; 0xdba <__fixunssfsi+0x12>
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <__fixunssfsi+0x46>
     dca:	b1 30       	cpi	r27, 0x01	; 1
     dcc:	81 f0       	breq	.+32     	; 0xdee <__fixunssfsi+0x46>
     dce:	9f d0       	rcall	.+318    	; 0xf0e <__fp_zero>
     dd0:	b1 e0       	ldi	r27, 0x01	; 1
     dd2:	08 95       	ret
     dd4:	9c c0       	rjmp	.+312    	; 0xf0e <__fp_zero>
     dd6:	67 2f       	mov	r22, r23
     dd8:	78 2f       	mov	r23, r24
     dda:	88 27       	eor	r24, r24
     ddc:	b8 5f       	subi	r27, 0xF8	; 248
     dde:	39 f0       	breq	.+14     	; 0xdee <__fixunssfsi+0x46>
     de0:	b9 3f       	cpi	r27, 0xF9	; 249
     de2:	cc f3       	brlt	.-14     	; 0xdd6 <__fixunssfsi+0x2e>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b3 95       	inc	r27
     dec:	d9 f7       	brne	.-10     	; 0xde4 <__fixunssfsi+0x3c>
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__fixunssfsi+0x56>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	08 95       	ret

00000e00 <__floatunsisf>:
     e00:	e8 94       	clt
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <__floatsisf+0x12>

00000e04 <__floatsisf>:
     e04:	97 fb       	bst	r25, 7
     e06:	3e f4       	brtc	.+14     	; 0xe16 <__floatsisf+0x12>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	99 23       	and	r25, r25
     e18:	a9 f0       	breq	.+42     	; 0xe44 <__floatsisf+0x40>
     e1a:	f9 2f       	mov	r31, r25
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	bb 27       	eor	r27, r27
     e20:	93 95       	inc	r25
     e22:	f6 95       	lsr	r31
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f1 11       	cpse	r31, r1
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <__floatsisf+0x1c>
     e30:	fa f4       	brpl	.+62     	; 0xe70 <__floatsisf+0x6c>
     e32:	bb 0f       	add	r27, r27
     e34:	11 f4       	brne	.+4      	; 0xe3a <__floatsisf+0x36>
     e36:	60 ff       	sbrs	r22, 0
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <__floatsisf+0x6c>
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	8f 4f       	sbci	r24, 0xFF	; 255
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <__floatsisf+0x6c>
     e44:	88 23       	and	r24, r24
     e46:	11 f0       	breq	.+4      	; 0xe4c <__floatsisf+0x48>
     e48:	96 e9       	ldi	r25, 0x96	; 150
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <__floatsisf+0x6a>
     e4c:	77 23       	and	r23, r23
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__floatsisf+0x54>
     e50:	9e e8       	ldi	r25, 0x8E	; 142
     e52:	87 2f       	mov	r24, r23
     e54:	76 2f       	mov	r23, r22
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <__floatsisf+0x5e>
     e58:	66 23       	and	r22, r22
     e5a:	71 f0       	breq	.+28     	; 0xe78 <__floatsisf+0x74>
     e5c:	96 e8       	ldi	r25, 0x86	; 134
     e5e:	86 2f       	mov	r24, r22
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	2a f0       	brmi	.+10     	; 0xe70 <__floatsisf+0x6c>
     e66:	9a 95       	dec	r25
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	da f7       	brpl	.-10     	; 0xe66 <__floatsisf+0x62>
     e70:	88 0f       	add	r24, r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	97 f9       	bld	r25, 7
     e78:	08 95       	ret

00000e7a <__fp_inf>:
     e7a:	97 f9       	bld	r25, 7
     e7c:	9f 67       	ori	r25, 0x7F	; 127
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	08 95       	ret

00000e86 <__fp_nan>:
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	08 95       	ret

00000e8c <__fp_pscA>:
     e8c:	00 24       	eor	r0, r0
     e8e:	0a 94       	dec	r0
     e90:	16 16       	cp	r1, r22
     e92:	17 06       	cpc	r1, r23
     e94:	18 06       	cpc	r1, r24
     e96:	09 06       	cpc	r0, r25
     e98:	08 95       	ret

00000e9a <__fp_pscB>:
     e9a:	00 24       	eor	r0, r0
     e9c:	0a 94       	dec	r0
     e9e:	12 16       	cp	r1, r18
     ea0:	13 06       	cpc	r1, r19
     ea2:	14 06       	cpc	r1, r20
     ea4:	05 06       	cpc	r0, r21
     ea6:	08 95       	ret

00000ea8 <__fp_round>:
     ea8:	09 2e       	mov	r0, r25
     eaa:	03 94       	inc	r0
     eac:	00 0c       	add	r0, r0
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_round+0xc>
     eb0:	88 23       	and	r24, r24
     eb2:	52 f0       	brmi	.+20     	; 0xec8 <__fp_round+0x20>
     eb4:	bb 0f       	add	r27, r27
     eb6:	40 f4       	brcc	.+16     	; 0xec8 <__fp_round+0x20>
     eb8:	bf 2b       	or	r27, r31
     eba:	11 f4       	brne	.+4      	; 0xec0 <__fp_round+0x18>
     ebc:	60 ff       	sbrs	r22, 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <__fp_round+0x20>
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	08 95       	ret

00000eca <__fp_split3>:
     eca:	57 fd       	sbrc	r21, 7
     ecc:	90 58       	subi	r25, 0x80	; 128
     ece:	44 0f       	add	r20, r20
     ed0:	55 1f       	adc	r21, r21
     ed2:	59 f0       	breq	.+22     	; 0xeea <__fp_splitA+0x10>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	71 f0       	breq	.+28     	; 0xef4 <__fp_splitA+0x1a>
     ed8:	47 95       	ror	r20

00000eda <__fp_splitA>:
     eda:	88 0f       	add	r24, r24
     edc:	97 fb       	bst	r25, 7
     ede:	99 1f       	adc	r25, r25
     ee0:	61 f0       	breq	.+24     	; 0xefa <__fp_splitA+0x20>
     ee2:	9f 3f       	cpi	r25, 0xFF	; 255
     ee4:	79 f0       	breq	.+30     	; 0xf04 <__fp_splitA+0x2a>
     ee6:	87 95       	ror	r24
     ee8:	08 95       	ret
     eea:	12 16       	cp	r1, r18
     eec:	13 06       	cpc	r1, r19
     eee:	14 06       	cpc	r1, r20
     ef0:	55 1f       	adc	r21, r21
     ef2:	f2 cf       	rjmp	.-28     	; 0xed8 <__fp_split3+0xe>
     ef4:	46 95       	lsr	r20
     ef6:	f1 df       	rcall	.-30     	; 0xeda <__fp_splitA>
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <__fp_splitA+0x30>
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	99 1f       	adc	r25, r25
     f02:	f1 cf       	rjmp	.-30     	; 0xee6 <__fp_splitA+0xc>
     f04:	86 95       	lsr	r24
     f06:	71 05       	cpc	r23, r1
     f08:	61 05       	cpc	r22, r1
     f0a:	08 94       	sec
     f0c:	08 95       	ret

00000f0e <__fp_zero>:
     f0e:	e8 94       	clt

00000f10 <__fp_szero>:
     f10:	bb 27       	eor	r27, r27
     f12:	66 27       	eor	r22, r22
     f14:	77 27       	eor	r23, r23
     f16:	cb 01       	movw	r24, r22
     f18:	97 f9       	bld	r25, 7
     f1a:	08 95       	ret

00000f1c <__mulsf3>:
     f1c:	0b d0       	rcall	.+22     	; 0xf34 <__mulsf3x>
     f1e:	c4 cf       	rjmp	.-120    	; 0xea8 <__fp_round>
     f20:	b5 df       	rcall	.-150    	; 0xe8c <__fp_pscA>
     f22:	28 f0       	brcs	.+10     	; 0xf2e <__mulsf3+0x12>
     f24:	ba df       	rcall	.-140    	; 0xe9a <__fp_pscB>
     f26:	18 f0       	brcs	.+6      	; 0xf2e <__mulsf3+0x12>
     f28:	95 23       	and	r25, r21
     f2a:	09 f0       	breq	.+2      	; 0xf2e <__mulsf3+0x12>
     f2c:	a6 cf       	rjmp	.-180    	; 0xe7a <__fp_inf>
     f2e:	ab cf       	rjmp	.-170    	; 0xe86 <__fp_nan>
     f30:	11 24       	eor	r1, r1
     f32:	ee cf       	rjmp	.-36     	; 0xf10 <__fp_szero>

00000f34 <__mulsf3x>:
     f34:	ca df       	rcall	.-108    	; 0xeca <__fp_split3>
     f36:	a0 f3       	brcs	.-24     	; 0xf20 <__mulsf3+0x4>

00000f38 <__mulsf3_pse>:
     f38:	95 9f       	mul	r25, r21
     f3a:	d1 f3       	breq	.-12     	; 0xf30 <__mulsf3+0x14>
     f3c:	95 0f       	add	r25, r21
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	55 1f       	adc	r21, r21
     f42:	62 9f       	mul	r22, r18
     f44:	f0 01       	movw	r30, r0
     f46:	72 9f       	mul	r23, r18
     f48:	bb 27       	eor	r27, r27
     f4a:	f0 0d       	add	r31, r0
     f4c:	b1 1d       	adc	r27, r1
     f4e:	63 9f       	mul	r22, r19
     f50:	aa 27       	eor	r26, r26
     f52:	f0 0d       	add	r31, r0
     f54:	b1 1d       	adc	r27, r1
     f56:	aa 1f       	adc	r26, r26
     f58:	64 9f       	mul	r22, r20
     f5a:	66 27       	eor	r22, r22
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	66 1f       	adc	r22, r22
     f62:	82 9f       	mul	r24, r18
     f64:	22 27       	eor	r18, r18
     f66:	b0 0d       	add	r27, r0
     f68:	a1 1d       	adc	r26, r1
     f6a:	62 1f       	adc	r22, r18
     f6c:	73 9f       	mul	r23, r19
     f6e:	b0 0d       	add	r27, r0
     f70:	a1 1d       	adc	r26, r1
     f72:	62 1f       	adc	r22, r18
     f74:	83 9f       	mul	r24, r19
     f76:	a0 0d       	add	r26, r0
     f78:	61 1d       	adc	r22, r1
     f7a:	22 1f       	adc	r18, r18
     f7c:	74 9f       	mul	r23, r20
     f7e:	33 27       	eor	r19, r19
     f80:	a0 0d       	add	r26, r0
     f82:	61 1d       	adc	r22, r1
     f84:	23 1f       	adc	r18, r19
     f86:	84 9f       	mul	r24, r20
     f88:	60 0d       	add	r22, r0
     f8a:	21 1d       	adc	r18, r1
     f8c:	82 2f       	mov	r24, r18
     f8e:	76 2f       	mov	r23, r22
     f90:	6a 2f       	mov	r22, r26
     f92:	11 24       	eor	r1, r1
     f94:	9f 57       	subi	r25, 0x7F	; 127
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	8a f0       	brmi	.+34     	; 0xfbc <__mulsf3_pse+0x84>
     f9a:	e1 f0       	breq	.+56     	; 0xfd4 <__mulsf3_pse+0x9c>
     f9c:	88 23       	and	r24, r24
     f9e:	4a f0       	brmi	.+18     	; 0xfb2 <__mulsf3_pse+0x7a>
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	bb 1f       	adc	r27, r27
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	91 50       	subi	r25, 0x01	; 1
     fae:	50 40       	sbci	r21, 0x00	; 0
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <__mulsf3_pse+0x64>
     fb2:	9e 3f       	cpi	r25, 0xFE	; 254
     fb4:	51 05       	cpc	r21, r1
     fb6:	70 f0       	brcs	.+28     	; 0xfd4 <__mulsf3_pse+0x9c>
     fb8:	60 cf       	rjmp	.-320    	; 0xe7a <__fp_inf>
     fba:	aa cf       	rjmp	.-172    	; 0xf10 <__fp_szero>
     fbc:	5f 3f       	cpi	r21, 0xFF	; 255
     fbe:	ec f3       	brlt	.-6      	; 0xfba <__mulsf3_pse+0x82>
     fc0:	98 3e       	cpi	r25, 0xE8	; 232
     fc2:	dc f3       	brlt	.-10     	; 0xfba <__mulsf3_pse+0x82>
     fc4:	86 95       	lsr	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b7 95       	ror	r27
     fcc:	f7 95       	ror	r31
     fce:	e7 95       	ror	r30
     fd0:	9f 5f       	subi	r25, 0xFF	; 255
     fd2:	c1 f7       	brne	.-16     	; 0xfc4 <__mulsf3_pse+0x8c>
     fd4:	fe 2b       	or	r31, r30
     fd6:	88 0f       	add	r24, r24
     fd8:	91 1d       	adc	r25, r1
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	97 f9       	bld	r25, 7
     fe0:	08 95       	ret

00000fe2 <__mulsi3>:
     fe2:	62 9f       	mul	r22, r18
     fe4:	d0 01       	movw	r26, r0
     fe6:	73 9f       	mul	r23, r19
     fe8:	f0 01       	movw	r30, r0
     fea:	82 9f       	mul	r24, r18
     fec:	e0 0d       	add	r30, r0
     fee:	f1 1d       	adc	r31, r1
     ff0:	64 9f       	mul	r22, r20
     ff2:	e0 0d       	add	r30, r0
     ff4:	f1 1d       	adc	r31, r1
     ff6:	92 9f       	mul	r25, r18
     ff8:	f0 0d       	add	r31, r0
     ffa:	83 9f       	mul	r24, r19
     ffc:	f0 0d       	add	r31, r0
     ffe:	74 9f       	mul	r23, r20
    1000:	f0 0d       	add	r31, r0
    1002:	65 9f       	mul	r22, r21
    1004:	f0 0d       	add	r31, r0
    1006:	99 27       	eor	r25, r25
    1008:	72 9f       	mul	r23, r18
    100a:	b0 0d       	add	r27, r0
    100c:	e1 1d       	adc	r30, r1
    100e:	f9 1f       	adc	r31, r25
    1010:	63 9f       	mul	r22, r19
    1012:	b0 0d       	add	r27, r0
    1014:	e1 1d       	adc	r30, r1
    1016:	f9 1f       	adc	r31, r25
    1018:	bd 01       	movw	r22, r26
    101a:	cf 01       	movw	r24, r30
    101c:	11 24       	eor	r1, r1
    101e:	08 95       	ret

00001020 <__udivmodqi4>:
    1020:	99 1b       	sub	r25, r25
    1022:	79 e0       	ldi	r23, 0x09	; 9
    1024:	04 c0       	rjmp	.+8      	; 0x102e <__udivmodqi4_ep>

00001026 <__udivmodqi4_loop>:
    1026:	99 1f       	adc	r25, r25
    1028:	96 17       	cp	r25, r22
    102a:	08 f0       	brcs	.+2      	; 0x102e <__udivmodqi4_ep>
    102c:	96 1b       	sub	r25, r22

0000102e <__udivmodqi4_ep>:
    102e:	88 1f       	adc	r24, r24
    1030:	7a 95       	dec	r23
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__udivmodqi4_loop>
    1034:	80 95       	com	r24
    1036:	08 95       	ret

00001038 <__udivmodhi4>:
    1038:	aa 1b       	sub	r26, r26
    103a:	bb 1b       	sub	r27, r27
    103c:	51 e1       	ldi	r21, 0x11	; 17
    103e:	07 c0       	rjmp	.+14     	; 0x104e <__udivmodhi4_ep>

00001040 <__udivmodhi4_loop>:
    1040:	aa 1f       	adc	r26, r26
    1042:	bb 1f       	adc	r27, r27
    1044:	a6 17       	cp	r26, r22
    1046:	b7 07       	cpc	r27, r23
    1048:	10 f0       	brcs	.+4      	; 0x104e <__udivmodhi4_ep>
    104a:	a6 1b       	sub	r26, r22
    104c:	b7 0b       	sbc	r27, r23

0000104e <__udivmodhi4_ep>:
    104e:	88 1f       	adc	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	5a 95       	dec	r21
    1054:	a9 f7       	brne	.-22     	; 0x1040 <__udivmodhi4_loop>
    1056:	80 95       	com	r24
    1058:	90 95       	com	r25
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	08 95       	ret

00001060 <__udivmodsi4>:
    1060:	a1 e2       	ldi	r26, 0x21	; 33
    1062:	1a 2e       	mov	r1, r26
    1064:	aa 1b       	sub	r26, r26
    1066:	bb 1b       	sub	r27, r27
    1068:	fd 01       	movw	r30, r26
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <__udivmodsi4_ep>

0000106c <__udivmodsi4_loop>:
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	ee 1f       	adc	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	a2 17       	cp	r26, r18
    1076:	b3 07       	cpc	r27, r19
    1078:	e4 07       	cpc	r30, r20
    107a:	f5 07       	cpc	r31, r21
    107c:	20 f0       	brcs	.+8      	; 0x1086 <__udivmodsi4_ep>
    107e:	a2 1b       	sub	r26, r18
    1080:	b3 0b       	sbc	r27, r19
    1082:	e4 0b       	sbc	r30, r20
    1084:	f5 0b       	sbc	r31, r21

00001086 <__udivmodsi4_ep>:
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	1a 94       	dec	r1
    1090:	69 f7       	brne	.-38     	; 0x106c <__udivmodsi4_loop>
    1092:	60 95       	com	r22
    1094:	70 95       	com	r23
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	bd 01       	movw	r22, r26
    10a0:	cf 01       	movw	r24, r30
    10a2:	08 95       	ret

000010a4 <_exit>:
    10a4:	f8 94       	cli

000010a6 <__stop_program>:
    10a6:	ff cf       	rjmp	.-2      	; 0x10a6 <__stop_program>
