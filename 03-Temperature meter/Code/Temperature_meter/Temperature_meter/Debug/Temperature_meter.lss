
Temperature_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000c2e  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  00000cc8  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa2  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000330  00000000  00000000  000039da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f3  00000000  00000000  00003d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00004200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079a  00000000  00000000  00004798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 04 	call	0x816	; 0x816 <main>
  8a:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MADC_voidInit>:
#include "ADC_config.h"

void MADC_voidInit(void)
{
	/* select ADC Channel */
    CLR_BIT(ADMUX,0);  //ADC0 CHANNEL
  92:	38 98       	cbi	0x07, 0	; 7
	  CLR_BIT(ADMUX,7);
	#elif ADC_REF_VOLTAGE == AVCC_WITH_EXT_CAP
	  SET_BIT(ADMUX,6);
	  CLR_BIT(ADMUX,7);	
	#elif ADC_REF_VOLTAGE == INTERNAL_VOLTAGE_REF
	  SET_BIT(ADMUX,6);
  94:	3e 9a       	sbi	0x07, 6	; 7
	  SET_BIT(ADMUX,7);	    
  96:	3f 9a       	sbi	0x07, 7	; 7
	
	#endif
	
	/* Enable ADC */
	SET_BIT(ADCSRA,7);  //set ADEN bit
  98:	37 9a       	sbi	0x06, 7	; 6
	#elif  ADC_CLOCK== CLOCK_DIV_BY_32
	SET_BIT(ADCSRA,0);
	CLR_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,2);	
	#elif  ADC_CLOCK== CLOCK_DIV_BY_64
	CLR_BIT(ADCSRA,0);
  9a:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
  9c:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);	
  9e:	32 9a       	sbi	0x06, 2	; 6
	#elif  ADC_CLOCK== CLOCK_DIV_BY_128
	SET_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,2);	
	#endif
}
  a0:	08 95       	ret

000000a2 <MADC_u16Read>:

u16 MADC_u16Read(void)
{
	u16 Local_u16ReadVal=0;
	/* start conversion  */
	SET_BIT(ADCSRA,6);
  a2:	36 9a       	sbi	0x06, 6	; 6
	/* wait while conversion completes */
	while(GET_BIT(ADCSRA,4)==0); 
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	84 ff       	sbrs	r24, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <MADC_u16Read+0x2>
	/* Clear ADIF flag */
	SET_BIT(ADCSRA,4);
  aa:	34 9a       	sbi	0x06, 4	; 6
	/* Store ADC value */
	Local_u16ReadVal=ADCL;
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	90 e0       	ldi	r25, 0x00	; 0
	Local_u16ReadVal|=(ADCH<<8);
  b0:	45 b1       	in	r20, 0x05	; 5
  b2:	34 2f       	mov	r19, r20
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	82 2b       	or	r24, r18
  b8:	93 2b       	or	r25, r19
	
	return Local_u16ReadVal;
  ba:	08 95       	ret

000000bc <Delay_ms>:
#endif

void Delay_ms(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000) * F_CPU )/2;
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	4a e7       	ldi	r20, 0x7A	; 122
  c2:	54 e4       	ldi	r21, 0x44	; 68
  c4:	0e 94 84 04 	call	0x908	; 0x908 <__divsf3>
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	34 e2       	ldi	r19, 0x24	; 36
  cc:	44 e7       	ldi	r20, 0x74	; 116
  ce:	59 e4       	ldi	r21, 0x49	; 73
  d0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	5f e3       	ldi	r21, 0x3F	; 63
  dc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
  e0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fixunssfsi>
  e4:	46 2f       	mov	r20, r22
  e6:	57 2f       	mov	r21, r23
  e8:	68 2f       	mov	r22, r24
  ea:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
  ec:	41 15       	cp	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	61 05       	cpc	r22, r1
  f2:	71 05       	cpc	r23, r1
  f4:	59 f0       	breq	.+22     	; 0x10c <Delay_ms+0x50>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	dc 01       	movw	r26, r24
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	a1 1d       	adc	r26, r1
 100:	b1 1d       	adc	r27, r1
 102:	84 17       	cp	r24, r20
 104:	95 07       	cpc	r25, r21
 106:	a6 07       	cpc	r26, r22
 108:	b7 07       	cpc	r27, r23
 10a:	c1 f7       	brne	.-16     	; 0xfc <Delay_ms+0x40>
 10c:	08 95       	ret

0000010e <Delay_us>:
}

void Delay_us(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000000) * F_CPU )/2;
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	34 e2       	ldi	r19, 0x24	; 36
 112:	44 e7       	ldi	r20, 0x74	; 116
 114:	59 e4       	ldi	r21, 0x49	; 73
 116:	0e 94 84 04 	call	0x908	; 0x908 <__divsf3>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	34 e2       	ldi	r19, 0x24	; 36
 11e:	44 e7       	ldi	r20, 0x74	; 116
 120:	59 e4       	ldi	r21, 0x49	; 73
 122:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	5f e3       	ldi	r21, 0x3F	; 63
 12e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 132:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fixunssfsi>
 136:	46 2f       	mov	r20, r22
 138:	57 2f       	mov	r21, r23
 13a:	68 2f       	mov	r22, r24
 13c:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
 13e:	41 15       	cp	r20, r1
 140:	51 05       	cpc	r21, r1
 142:	61 05       	cpc	r22, r1
 144:	71 05       	cpc	r23, r1
 146:	59 f0       	breq	.+22     	; 0x15e <Delay_us+0x50>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	dc 01       	movw	r26, r24
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	84 17       	cp	r24, r20
 156:	95 07       	cpc	r25, r21
 158:	a6 07       	cpc	r26, r22
 15a:	b7 07       	cpc	r27, r23
 15c:	c1 f7       	brne	.-16     	; 0x14e <Delay_us+0x40>
 15e:	08 95       	ret

00000160 <MDIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    switch(Copy_u8Port)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	49 f1       	breq	.+82     	; 0x1b6 <MDIO_voidSetPinDirection+0x56>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	38 f0       	brcs	.+14     	; 0x176 <MDIO_voidSetPinDirection+0x16>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	09 f4       	brne	.+2      	; 0x16e <MDIO_voidSetPinDirection+0xe>
 16c:	44 c0       	rjmp	.+136    	; 0x1f6 <MDIO_voidSetPinDirection+0x96>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	09 f0       	breq	.+2      	; 0x174 <MDIO_voidSetPinDirection+0x14>
 172:	7e c0       	rjmp	.+252    	; 0x270 <MDIO_voidSetPinDirection+0x110>
 174:	5f c0       	rjmp	.+190    	; 0x234 <MDIO_voidSetPinDirection+0xd4>
	{
		case DIOA : 
		if (Copy_u8Direction==INPUT)
 176:	44 23       	and	r20, r20
 178:	71 f4       	brne	.+28     	; 0x196 <MDIO_voidSetPinDirection+0x36>
		{
			CLR_BIT(DDRA,Copy_u8Pin);
 17a:	2a b3       	in	r18, 0x1a	; 26
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	ac 01       	movw	r20, r24
 182:	02 c0       	rjmp	.+4      	; 0x188 <MDIO_voidSetPinDirection+0x28>
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <MDIO_voidSetPinDirection+0x24>
 18c:	ba 01       	movw	r22, r20
 18e:	60 95       	com	r22
 190:	62 23       	and	r22, r18
 192:	6a bb       	out	0x1a, r22	; 26
 194:	08 95       	ret
		} 
		else if (Copy_u8Direction==OUTPUT)
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <MDIO_voidSetPinDirection+0x3c>
 19a:	6a c0       	rjmp	.+212    	; 0x270 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRA,Copy_u8Pin);
 19c:	2a b3       	in	r18, 0x1a	; 26
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	ac 01       	movw	r20, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <MDIO_voidSetPinDirection+0x4a>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <MDIO_voidSetPinDirection+0x46>
 1ae:	ba 01       	movw	r22, r20
 1b0:	62 2b       	or	r22, r18
 1b2:	6a bb       	out	0x1a, r22	; 26
 1b4:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOB :
		if (Copy_u8Direction==INPUT)
 1b6:	44 23       	and	r20, r20
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <MDIO_voidSetPinDirection+0x76>
		{
			CLR_BIT(DDRB,Copy_u8Pin);
 1ba:	27 b3       	in	r18, 0x17	; 23
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <MDIO_voidSetPinDirection+0x68>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <MDIO_voidSetPinDirection+0x64>
 1cc:	ba 01       	movw	r22, r20
 1ce:	60 95       	com	r22
 1d0:	62 23       	and	r22, r18
 1d2:	67 bb       	out	0x17, r22	; 23
 1d4:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <MDIO_voidSetPinDirection+0x7c>
 1da:	4a c0       	rjmp	.+148    	; 0x270 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRB,Copy_u8Pin);
 1dc:	27 b3       	in	r18, 0x17	; 23
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ac 01       	movw	r20, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <MDIO_voidSetPinDirection+0x8a>
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <MDIO_voidSetPinDirection+0x86>
 1ee:	ba 01       	movw	r22, r20
 1f0:	62 2b       	or	r22, r18
 1f2:	67 bb       	out	0x17, r22	; 23
 1f4:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOC :
		if (Copy_u8Direction==INPUT)
 1f6:	44 23       	and	r20, r20
 1f8:	71 f4       	brne	.+28     	; 0x216 <MDIO_voidSetPinDirection+0xb6>
		{
			CLR_BIT(DDRC,Copy_u8Pin);
 1fa:	24 b3       	in	r18, 0x14	; 20
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	ac 01       	movw	r20, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <MDIO_voidSetPinDirection+0xa8>
 204:	44 0f       	add	r20, r20
 206:	55 1f       	adc	r21, r21
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <MDIO_voidSetPinDirection+0xa4>
 20c:	ba 01       	movw	r22, r20
 20e:	60 95       	com	r22
 210:	62 23       	and	r22, r18
 212:	64 bb       	out	0x14, r22	; 20
 214:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	59 f5       	brne	.+86     	; 0x270 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRC,Copy_u8Pin);
 21a:	24 b3       	in	r18, 0x14	; 20
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <MDIO_voidSetPinDirection+0xc8>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <MDIO_voidSetPinDirection+0xc4>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	64 bb       	out	0x14, r22	; 20
 232:	08 95       	ret
			/* error */
		}
		break;
			
		case DIOD :
		if (Copy_u8Direction==INPUT)
 234:	44 23       	and	r20, r20
 236:	71 f4       	brne	.+28     	; 0x254 <MDIO_voidSetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,Copy_u8Pin);
 238:	21 b3       	in	r18, 0x11	; 17
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	ac 01       	movw	r20, r24
 240:	02 c0       	rjmp	.+4      	; 0x246 <MDIO_voidSetPinDirection+0xe6>
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <MDIO_voidSetPinDirection+0xe2>
 24a:	ba 01       	movw	r22, r20
 24c:	60 95       	com	r22
 24e:	62 23       	and	r22, r18
 250:	61 bb       	out	0x11, r22	; 17
 252:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	61 f4       	brne	.+24     	; 0x270 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRD,Copy_u8Pin);
 258:	21 b3       	in	r18, 0x11	; 17
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <MDIO_voidSetPinDirection+0x106>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <MDIO_voidSetPinDirection+0x102>
 26a:	ba 01       	movw	r22, r20
 26c:	62 2b       	or	r22, r18
 26e:	61 bb       	out	0x11, r22	; 17
 270:	08 95       	ret

00000272 <MDIO_voidSetPortDirection>:
	}
}
void MDIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{

  switch(Copy_u8Port)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	81 f0       	breq	.+32     	; 0x296 <MDIO_voidSetPortDirection+0x24>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	28 f0       	brcs	.+10     	; 0x284 <MDIO_voidSetPortDirection+0x12>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	a9 f0       	breq	.+42     	; 0x2a8 <MDIO_voidSetPortDirection+0x36>
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	21 f5       	brne	.+72     	; 0x2ca <MDIO_voidSetPortDirection+0x58>
 282:	1b c0       	rjmp	.+54     	; 0x2ba <MDIO_voidSetPortDirection+0x48>
  {
	  case DIOA :
	  if (Copy_u8Direction==INPUT)
 284:	66 23       	and	r22, r22
 286:	11 f4       	brne	.+4      	; 0x28c <MDIO_voidSetPortDirection+0x1a>
	  {
		  DDRA=0x00;
 288:	1a ba       	out	0x1a, r1	; 26
 28a:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 28c:	61 30       	cpi	r22, 0x01	; 1
 28e:	e9 f4       	brne	.+58     	; 0x2ca <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRA=0xFF;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	8a bb       	out	0x1a, r24	; 26
 294:	08 95       	ret
	  {
	    /* error */
	  }
	  break;
	  case DIOB :
	  if (Copy_u8Direction==INPUT)
 296:	66 23       	and	r22, r22
 298:	11 f4       	brne	.+4      	; 0x29e <MDIO_voidSetPortDirection+0x2c>
	  {
		  DDRB=0x00;
 29a:	17 ba       	out	0x17, r1	; 23
 29c:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 29e:	61 30       	cpi	r22, 0x01	; 1
 2a0:	a1 f4       	brne	.+40     	; 0x2ca <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRB=0xFF;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	87 bb       	out	0x17, r24	; 23
 2a6:	08 95       	ret
	  {
		  /* error */
	  }
	  break;	
	  case DIOC :
	  if (Copy_u8Direction==INPUT)
 2a8:	66 23       	and	r22, r22
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <MDIO_voidSetPortDirection+0x3e>
	  {
		  DDRC=0x00;
 2ac:	14 ba       	out	0x14, r1	; 20
 2ae:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 2b0:	61 30       	cpi	r22, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRC=0xFF;
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	84 bb       	out	0x14, r24	; 20
 2b8:	08 95       	ret
	  {
		  /* error */
	  }
	  break;
	  case DIOD :
	  if (Copy_u8Direction==INPUT)
 2ba:	66 23       	and	r22, r22
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <MDIO_voidSetPortDirection+0x50>
	  {
		  DDRD=0x00;
 2be:	11 ba       	out	0x11, r1	; 17
 2c0:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
 2c2:	61 30       	cpi	r22, 0x01	; 1
 2c4:	11 f4       	brne	.+4      	; 0x2ca <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRD=0xFF;
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	81 bb       	out	0x11, r24	; 17
 2ca:	08 95       	ret

000002cc <MDIO_voidSetPinValue>:

}

void MDIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    switch(Copy_u8Port)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	49 f1       	breq	.+82     	; 0x322 <MDIO_voidSetPinValue+0x56>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	38 f0       	brcs	.+14     	; 0x2e2 <MDIO_voidSetPinValue+0x16>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	09 f4       	brne	.+2      	; 0x2da <MDIO_voidSetPinValue+0xe>
 2d8:	44 c0       	rjmp	.+136    	; 0x362 <MDIO_voidSetPinValue+0x96>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <MDIO_voidSetPinValue+0x14>
 2de:	7e c0       	rjmp	.+252    	; 0x3dc <MDIO_voidSetPinValue+0x110>
 2e0:	5f c0       	rjmp	.+190    	; 0x3a0 <MDIO_voidSetPinValue+0xd4>
    {
	    case DIOA :
	    if (Copy_u8Value==LOW)
 2e2:	44 23       	and	r20, r20
 2e4:	71 f4       	brne	.+28     	; 0x302 <MDIO_voidSetPinValue+0x36>
	    {
		    CLR_BIT(PORTA,Copy_u8Pin);
 2e6:	2b b3       	in	r18, 0x1b	; 27
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	ac 01       	movw	r20, r24
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <MDIO_voidSetPinValue+0x28>
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <MDIO_voidSetPinValue+0x24>
 2f8:	ba 01       	movw	r22, r20
 2fa:	60 95       	com	r22
 2fc:	62 23       	and	r22, r18
 2fe:	6b bb       	out	0x1b, r22	; 27
 300:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 302:	41 30       	cpi	r20, 0x01	; 1
 304:	09 f0       	breq	.+2      	; 0x308 <MDIO_voidSetPinValue+0x3c>
 306:	6a c0       	rjmp	.+212    	; 0x3dc <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTA,Copy_u8Pin);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <MDIO_voidSetPinValue+0x4a>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <MDIO_voidSetPinValue+0x46>
 31a:	ba 01       	movw	r22, r20
 31c:	62 2b       	or	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
 320:	08 95       	ret
		    /* error */
	    }
	    break;
	    
	    case DIOB :
	    if (Copy_u8Value==LOW)
 322:	44 23       	and	r20, r20
 324:	71 f4       	brne	.+28     	; 0x342 <MDIO_voidSetPinValue+0x76>
	    {
		    CLR_BIT(PORTB,Copy_u8Pin);
 326:	28 b3       	in	r18, 0x18	; 24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	ac 01       	movw	r20, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <MDIO_voidSetPinValue+0x68>
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <MDIO_voidSetPinValue+0x64>
 338:	ba 01       	movw	r22, r20
 33a:	60 95       	com	r22
 33c:	62 23       	and	r22, r18
 33e:	68 bb       	out	0x18, r22	; 24
 340:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	09 f0       	breq	.+2      	; 0x348 <MDIO_voidSetPinValue+0x7c>
 346:	4a c0       	rjmp	.+148    	; 0x3dc <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTB,Copy_u8Pin);
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <MDIO_voidSetPinValue+0x8a>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <MDIO_voidSetPinValue+0x86>
 35a:	ba 01       	movw	r22, r20
 35c:	62 2b       	or	r22, r18
 35e:	68 bb       	out	0x18, r22	; 24
 360:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOC :
	    if (Copy_u8Value==LOW)
 362:	44 23       	and	r20, r20
 364:	71 f4       	brne	.+28     	; 0x382 <MDIO_voidSetPinValue+0xb6>
	    {
		    CLR_BIT(PORTC,Copy_u8Pin);
 366:	25 b3       	in	r18, 0x15	; 21
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <MDIO_voidSetPinValue+0xa8>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <MDIO_voidSetPinValue+0xa4>
 378:	ba 01       	movw	r22, r20
 37a:	60 95       	com	r22
 37c:	62 23       	and	r22, r18
 37e:	65 bb       	out	0x15, r22	; 21
 380:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	59 f5       	brne	.+86     	; 0x3dc <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTC,Copy_u8Pin);
 386:	25 b3       	in	r18, 0x15	; 21
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <MDIO_voidSetPinValue+0xc8>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <MDIO_voidSetPinValue+0xc4>
 398:	ba 01       	movw	r22, r20
 39a:	62 2b       	or	r22, r18
 39c:	65 bb       	out	0x15, r22	; 21
 39e:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOD :
	    if (Copy_u8Value==LOW)
 3a0:	44 23       	and	r20, r20
 3a2:	71 f4       	brne	.+28     	; 0x3c0 <MDIO_voidSetPinValue+0xf4>
	    {
		    CLR_BIT(PORTD,Copy_u8Pin);
 3a4:	22 b3       	in	r18, 0x12	; 18
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	ac 01       	movw	r20, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <MDIO_voidSetPinValue+0xe6>
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <MDIO_voidSetPinValue+0xe2>
 3b6:	ba 01       	movw	r22, r20
 3b8:	60 95       	com	r22
 3ba:	62 23       	and	r22, r18
 3bc:	62 bb       	out	0x12, r22	; 18
 3be:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
 3c0:	41 30       	cpi	r20, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <MDIO_voidSetPinValue+0x110>
	    {
		    SET_BIT(PORTD,Copy_u8Pin);
 3c4:	22 b3       	in	r18, 0x12	; 18
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	ac 01       	movw	r20, r24
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <MDIO_voidSetPinValue+0x106>
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <MDIO_voidSetPinValue+0x102>
 3d6:	ba 01       	movw	r22, r20
 3d8:	62 2b       	or	r22, r18
 3da:	62 bb       	out	0x12, r22	; 18
 3dc:	08 95       	ret

000003de <MDIO_u8GetPinValue>:
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
	 switch(Copy_u8Port)
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	89 f0       	breq	.+34     	; 0x404 <MDIO_u8GetPinValue+0x26>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	28 f0       	brcs	.+10     	; 0x3f0 <MDIO_u8GetPinValue+0x12>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	b9 f0       	breq	.+46     	; 0x418 <MDIO_u8GetPinValue+0x3a>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	49 f5       	brne	.+82     	; 0x440 <MDIO_u8GetPinValue+0x62>
 3ee:	1e c0       	rjmp	.+60     	; 0x42c <MDIO_u8GetPinValue+0x4e>
	 {
		 case DIOA :
		 Local_u8value=GET_BIT(PINA,Copy_u8Pin);
 3f0:	29 b3       	in	r18, 0x19	; 25
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	c9 01       	movw	r24, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <MDIO_u8GetPinValue+0x1e>
 3f8:	95 95       	asr	r25
 3fa:	87 95       	ror	r24
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <MDIO_u8GetPinValue+0x1a>
 400:	81 70       	andi	r24, 0x01	; 1
		 break;
 402:	08 95       	ret
		 case DIOB :
		 Local_u8value=GET_BIT(PINB,Copy_u8Pin);
 404:	26 b3       	in	r18, 0x16	; 22
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	c9 01       	movw	r24, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <MDIO_u8GetPinValue+0x32>
 40c:	95 95       	asr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <MDIO_u8GetPinValue+0x2e>
 414:	81 70       	andi	r24, 0x01	; 1
		 break;
 416:	08 95       	ret
		 case DIOC :
		 Local_u8value=GET_BIT(PINC,Copy_u8Pin);
 418:	23 b3       	in	r18, 0x13	; 19
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	c9 01       	movw	r24, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <MDIO_u8GetPinValue+0x46>
 420:	95 95       	asr	r25
 422:	87 95       	ror	r24
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <MDIO_u8GetPinValue+0x42>
 428:	81 70       	andi	r24, 0x01	; 1
		 break;
 42a:	08 95       	ret
		 case DIOD :
		 Local_u8value=GET_BIT(PIND,Copy_u8Pin);
 42c:	20 b3       	in	r18, 0x10	; 16
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	c9 01       	movw	r24, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <MDIO_u8GetPinValue+0x5a>
 434:	95 95       	asr	r25
 436:	87 95       	ror	r24
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <MDIO_u8GetPinValue+0x56>
 43c:	81 70       	andi	r24, 0x01	; 1
		 break;		 		 
 43e:	08 95       	ret
	    
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
 440:	80 e0       	ldi	r24, 0x00	; 0
		 break;		 		 
		 default: break;
		 
	 }
	 return Local_u8value;
}
 442:	08 95       	ret

00000444 <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	switch(Copy_u8Port)
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	49 f0       	breq	.+18     	; 0x45a <MDIO_voidSetPortValue+0x16>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	28 f0       	brcs	.+10     	; 0x456 <MDIO_voidSetPortValue+0x12>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	39 f0       	breq	.+14     	; 0x45e <MDIO_voidSetPortValue+0x1a>
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	41 f4       	brne	.+16     	; 0x464 <MDIO_voidSetPortValue+0x20>
 454:	06 c0       	rjmp	.+12     	; 0x462 <MDIO_voidSetPortValue+0x1e>
	{
		case DIOA :
		PORTA=Copy_u8Value;
 456:	6b bb       	out	0x1b, r22	; 27
		break;
 458:	08 95       	ret
		case DIOB :
		PORTB=Copy_u8Value;
 45a:	68 bb       	out	0x18, r22	; 24
		break;	
 45c:	08 95       	ret
		case DIOC :
		PORTC=Copy_u8Value;
 45e:	65 bb       	out	0x15, r22	; 21
		break;
 460:	08 95       	ret
		case DIOD :
		PORTD=Copy_u8Value;
 462:	62 bb       	out	0x12, r22	; 18
 464:	08 95       	ret

00000466 <MDIO_voidTogglePin>:
	}
}

void MDIO_voidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	a1 f0       	breq	.+40     	; 0x492 <MDIO_voidTogglePin+0x2c>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	28 f0       	brcs	.+10     	; 0x478 <MDIO_voidTogglePin+0x12>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	e9 f0       	breq	.+58     	; 0x4ac <MDIO_voidTogglePin+0x46>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	a1 f5       	brne	.+104    	; 0x4de <MDIO_voidTogglePin+0x78>
 476:	27 c0       	rjmp	.+78     	; 0x4c6 <MDIO_voidTogglePin+0x60>
	{
		
		case DIOA :
		TOG_BIT(PORTA,Copy_u8Pin);
 478:	2b b3       	in	r18, 0x1b	; 27
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	ac 01       	movw	r20, r24
 480:	02 c0       	rjmp	.+4      	; 0x486 <MDIO_voidTogglePin+0x20>
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <MDIO_voidTogglePin+0x1c>
 48a:	ba 01       	movw	r22, r20
 48c:	62 27       	eor	r22, r18
 48e:	6b bb       	out	0x1b, r22	; 27
		break;
 490:	08 95       	ret
		case DIOB :
		TOG_BIT(PORTB,Copy_u8Pin);
 492:	28 b3       	in	r18, 0x18	; 24
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	ac 01       	movw	r20, r24
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <MDIO_voidTogglePin+0x3a>
 49c:	44 0f       	add	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <MDIO_voidTogglePin+0x36>
 4a4:	ba 01       	movw	r22, r20
 4a6:	62 27       	eor	r22, r18
 4a8:	68 bb       	out	0x18, r22	; 24
		break;
 4aa:	08 95       	ret
		case DIOC :
		TOG_BIT(PORTC,Copy_u8Pin);
 4ac:	25 b3       	in	r18, 0x15	; 21
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	ac 01       	movw	r20, r24
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <MDIO_voidTogglePin+0x54>
 4b6:	44 0f       	add	r20, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <MDIO_voidTogglePin+0x50>
 4be:	ba 01       	movw	r22, r20
 4c0:	62 27       	eor	r22, r18
 4c2:	65 bb       	out	0x15, r22	; 21
		break;
 4c4:	08 95       	ret
		case DIOD :
		TOG_BIT(PORTD,Copy_u8Pin);
 4c6:	22 b3       	in	r18, 0x12	; 18
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	ac 01       	movw	r20, r24
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <MDIO_voidTogglePin+0x6e>
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <MDIO_voidTogglePin+0x6a>
 4d8:	ba 01       	movw	r22, r20
 4da:	62 27       	eor	r22, r18
 4dc:	62 bb       	out	0x12, r22	; 18
 4de:	08 95       	ret

000004e0 <MDIO_voidTogglePort>:
	}
}

void MDIO_voidTogglePort(u8 Copy_u8Port)
{
	    switch(Copy_u8Port)
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	59 f0       	breq	.+22     	; 0x4fa <MDIO_voidTogglePort+0x1a>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	28 f0       	brcs	.+10     	; 0x4f2 <MDIO_voidTogglePort+0x12>
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	59 f0       	breq	.+22     	; 0x502 <MDIO_voidTogglePort+0x22>
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	81 f4       	brne	.+32     	; 0x510 <MDIO_voidTogglePort+0x30>
 4f0:	0c c0       	rjmp	.+24     	; 0x50a <MDIO_voidTogglePort+0x2a>
		{
		case DIOA :
		PORTA=~PORTA;
 4f2:	8b b3       	in	r24, 0x1b	; 27
 4f4:	80 95       	com	r24
 4f6:	8b bb       	out	0x1b, r24	; 27
		break;
 4f8:	08 95       	ret
		case DIOB :
		PORTB=~PORTB;
 4fa:	88 b3       	in	r24, 0x18	; 24
 4fc:	80 95       	com	r24
 4fe:	88 bb       	out	0x18, r24	; 24
		break;
 500:	08 95       	ret
		case DIOC :
		PORTC=~PORTC;
 502:	85 b3       	in	r24, 0x15	; 21
 504:	80 95       	com	r24
 506:	85 bb       	out	0x15, r24	; 21
		break;
 508:	08 95       	ret
		case DIOD :
		PORTD=~PORTD;
 50a:	82 b3       	in	r24, 0x12	; 18
 50c:	80 95       	com	r24
 50e:	82 bb       	out	0x12, r24	; 18
 510:	08 95       	ret

00000512 <MDIO_voidEnablePullUp>:
		}			
}

void MDIO_voidEnablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	a1 f0       	breq	.+40     	; 0x53e <MDIO_voidEnablePullUp+0x2c>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	28 f0       	brcs	.+10     	; 0x524 <MDIO_voidEnablePullUp+0x12>
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	e9 f0       	breq	.+58     	; 0x558 <MDIO_voidEnablePullUp+0x46>
 51e:	83 30       	cpi	r24, 0x03	; 3
 520:	a1 f5       	brne	.+104    	; 0x58a <MDIO_voidEnablePullUp+0x78>
 522:	27 c0       	rjmp	.+78     	; 0x572 <MDIO_voidEnablePullUp+0x60>
	{
		case DIOA : 
		SET_BIT(PORTA,Copy_u8Pin);
 524:	2b b3       	in	r18, 0x1b	; 27
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	ac 01       	movw	r20, r24
 52c:	02 c0       	rjmp	.+4      	; 0x532 <MDIO_voidEnablePullUp+0x20>
 52e:	44 0f       	add	r20, r20
 530:	55 1f       	adc	r21, r21
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <MDIO_voidEnablePullUp+0x1c>
 536:	ba 01       	movw	r22, r20
 538:	62 2b       	or	r22, r18
 53a:	6b bb       	out	0x1b, r22	; 27
		break;
 53c:	08 95       	ret
		case DIOB :
		SET_BIT(PORTB,Copy_u8Pin);
 53e:	28 b3       	in	r18, 0x18	; 24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ac 01       	movw	r20, r24
 546:	02 c0       	rjmp	.+4      	; 0x54c <MDIO_voidEnablePullUp+0x3a>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <MDIO_voidEnablePullUp+0x36>
 550:	ba 01       	movw	r22, r20
 552:	62 2b       	or	r22, r18
 554:	68 bb       	out	0x18, r22	; 24
		break;
 556:	08 95       	ret
		case DIOC :
		SET_BIT(PORTC,Copy_u8Pin);
 558:	25 b3       	in	r18, 0x15	; 21
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	ac 01       	movw	r20, r24
 560:	02 c0       	rjmp	.+4      	; 0x566 <MDIO_voidEnablePullUp+0x54>
 562:	44 0f       	add	r20, r20
 564:	55 1f       	adc	r21, r21
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <MDIO_voidEnablePullUp+0x50>
 56a:	ba 01       	movw	r22, r20
 56c:	62 2b       	or	r22, r18
 56e:	65 bb       	out	0x15, r22	; 21
		break;
 570:	08 95       	ret
		case DIOD :
		SET_BIT(PORTD,Copy_u8Pin);
 572:	22 b3       	in	r18, 0x12	; 18
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	ac 01       	movw	r20, r24
 57a:	02 c0       	rjmp	.+4      	; 0x580 <MDIO_voidEnablePullUp+0x6e>
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <MDIO_voidEnablePullUp+0x6a>
 584:	ba 01       	movw	r22, r20
 586:	62 2b       	or	r22, r18
 588:	62 bb       	out	0x12, r22	; 18
 58a:	08 95       	ret

0000058c <MDIO_voidDisablePullUp>:
	}
}

void MDIO_voidDisablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
		switch(Copy_u8Port)
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	a9 f0       	breq	.+42     	; 0x5ba <MDIO_voidDisablePullUp+0x2e>
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	28 f0       	brcs	.+10     	; 0x59e <MDIO_voidDisablePullUp+0x12>
 594:	82 30       	cpi	r24, 0x02	; 2
 596:	f9 f0       	breq	.+62     	; 0x5d6 <MDIO_voidDisablePullUp+0x4a>
 598:	83 30       	cpi	r24, 0x03	; 3
 59a:	c1 f5       	brne	.+112    	; 0x60c <MDIO_voidDisablePullUp+0x80>
 59c:	2a c0       	rjmp	.+84     	; 0x5f2 <MDIO_voidDisablePullUp+0x66>
		{
			case DIOA :
			CLR_BIT(PORTA,Copy_u8Pin);
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	ac 01       	movw	r20, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <MDIO_voidDisablePullUp+0x20>
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <MDIO_voidDisablePullUp+0x1c>
 5b0:	ba 01       	movw	r22, r20
 5b2:	60 95       	com	r22
 5b4:	62 23       	and	r22, r18
 5b6:	6b bb       	out	0x1b, r22	; 27
			break;
 5b8:	08 95       	ret
			case DIOB :
			CLR_BIT(PORTB,Copy_u8Pin);
 5ba:	28 b3       	in	r18, 0x18	; 24
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	ac 01       	movw	r20, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <MDIO_voidDisablePullUp+0x3c>
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <MDIO_voidDisablePullUp+0x38>
 5cc:	ba 01       	movw	r22, r20
 5ce:	60 95       	com	r22
 5d0:	62 23       	and	r22, r18
 5d2:	68 bb       	out	0x18, r22	; 24
			break;
 5d4:	08 95       	ret
			case DIOC :
			CLR_BIT(PORTC,Copy_u8Pin);
 5d6:	25 b3       	in	r18, 0x15	; 21
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	ac 01       	movw	r20, r24
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <MDIO_voidDisablePullUp+0x58>
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <MDIO_voidDisablePullUp+0x54>
 5e8:	ba 01       	movw	r22, r20
 5ea:	60 95       	com	r22
 5ec:	62 23       	and	r22, r18
 5ee:	65 bb       	out	0x15, r22	; 21
			break;
 5f0:	08 95       	ret
			case DIOD :
			CLR_BIT(PORTD,Copy_u8Pin);
 5f2:	22 b3       	in	r18, 0x12	; 18
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	ac 01       	movw	r20, r24
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <MDIO_voidDisablePullUp+0x74>
 5fc:	44 0f       	add	r20, r20
 5fe:	55 1f       	adc	r21, r21
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <MDIO_voidDisablePullUp+0x70>
 604:	ba 01       	movw	r22, r20
 606:	60 95       	com	r22
 608:	62 23       	and	r22, r18
 60a:	62 bb       	out	0x12, r22	; 18
 60c:	08 95       	ret

0000060e <MDIO_voidWriteLowNibble>:
		}
}

void MDIO_voidWriteLowNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value&=0x0f;
 60e:	6f 70       	andi	r22, 0x0F	; 15
	switch(Copy_u8Port)
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	71 f0       	breq	.+28     	; 0x630 <MDIO_voidWriteLowNibble+0x22>
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	28 f0       	brcs	.+10     	; 0x622 <MDIO_voidWriteLowNibble+0x14>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	89 f0       	breq	.+34     	; 0x63e <MDIO_voidWriteLowNibble+0x30>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	e1 f4       	brne	.+56     	; 0x658 <MDIO_voidWriteLowNibble+0x4a>
 620:	15 c0       	rjmp	.+42     	; 0x64c <MDIO_voidWriteLowNibble+0x3e>
	{
		case DIOA :
		PORTA&=0xf0;
 622:	8b b3       	in	r24, 0x1b	; 27
 624:	80 7f       	andi	r24, 0xF0	; 240
 626:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
 628:	8b b3       	in	r24, 0x1b	; 27
 62a:	68 2b       	or	r22, r24
 62c:	6b bb       	out	0x1b, r22	; 27
		break;
 62e:	08 95       	ret
		case DIOB :
		PORTB&=0xf0;
 630:	88 b3       	in	r24, 0x18	; 24
 632:	80 7f       	andi	r24, 0xF0	; 240
 634:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
 636:	88 b3       	in	r24, 0x18	; 24
 638:	68 2b       	or	r22, r24
 63a:	68 bb       	out	0x18, r22	; 24
		break;
 63c:	08 95       	ret
		case DIOC :
		PORTC&=0xf0;
 63e:	85 b3       	in	r24, 0x15	; 21
 640:	80 7f       	andi	r24, 0xF0	; 240
 642:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
 644:	85 b3       	in	r24, 0x15	; 21
 646:	68 2b       	or	r22, r24
 648:	65 bb       	out	0x15, r22	; 21
		break;
 64a:	08 95       	ret
		case DIOD :
		PORTD&=0xf0;
 64c:	82 b3       	in	r24, 0x12	; 18
 64e:	80 7f       	andi	r24, 0xF0	; 240
 650:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
 652:	82 b3       	in	r24, 0x12	; 18
 654:	68 2b       	or	r22, r24
 656:	62 bb       	out	0x12, r22	; 18
 658:	08 95       	ret

0000065a <MDIO_voidWriteHighNibble>:
	
}

void MDIO_voidWriteHighNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value<<=4;
 65a:	62 95       	swap	r22
 65c:	60 7f       	andi	r22, 0xF0	; 240
	switch(Copy_u8Port)
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	71 f0       	breq	.+28     	; 0x67e <MDIO_voidWriteHighNibble+0x24>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	28 f0       	brcs	.+10     	; 0x670 <MDIO_voidWriteHighNibble+0x16>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	89 f0       	breq	.+34     	; 0x68c <MDIO_voidWriteHighNibble+0x32>
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	e1 f4       	brne	.+56     	; 0x6a6 <MDIO_voidWriteHighNibble+0x4c>
 66e:	15 c0       	rjmp	.+42     	; 0x69a <MDIO_voidWriteHighNibble+0x40>
	{
		case DIOA :
		PORTA&=0x0f;
 670:	8b b3       	in	r24, 0x1b	; 27
 672:	8f 70       	andi	r24, 0x0F	; 15
 674:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
 676:	8b b3       	in	r24, 0x1b	; 27
 678:	68 2b       	or	r22, r24
 67a:	6b bb       	out	0x1b, r22	; 27
		break;
 67c:	08 95       	ret
		case DIOB :
		PORTB&=0x0f;
 67e:	88 b3       	in	r24, 0x18	; 24
 680:	8f 70       	andi	r24, 0x0F	; 15
 682:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
 684:	88 b3       	in	r24, 0x18	; 24
 686:	68 2b       	or	r22, r24
 688:	68 bb       	out	0x18, r22	; 24
		break;
 68a:	08 95       	ret
		case DIOC :
		PORTC&=0x0f;
 68c:	85 b3       	in	r24, 0x15	; 21
 68e:	8f 70       	andi	r24, 0x0F	; 15
 690:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
 692:	85 b3       	in	r24, 0x15	; 21
 694:	68 2b       	or	r22, r24
 696:	65 bb       	out	0x15, r22	; 21
		break;
 698:	08 95       	ret
		case DIOD :
		PORTD&=0x0f;
 69a:	82 b3       	in	r24, 0x12	; 18
 69c:	8f 70       	andi	r24, 0x0F	; 15
 69e:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
 6a0:	82 b3       	in	r24, 0x12	; 18
 6a2:	68 2b       	or	r22, r24
 6a4:	62 bb       	out	0x12, r22	; 18
 6a6:	08 95       	ret

000006a8 <HLCD_voidSendFallingEdge>:
   #endif
   
}

 void HLCD_voidSendFallingEdge(u8 Copy_u8Port)
{
 6a8:	cf 93       	push	r28
 6aa:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(Copy_u8Port,EN,HIGH);
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	0e 94 66 01 	call	0x2cc	; 0x2cc <MDIO_voidSetPinValue>
	Delay_ms(4);
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	80 e8       	ldi	r24, 0x80	; 128
 6ba:	90 e4       	ldi	r25, 0x40	; 64
 6bc:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
	MDIO_voidSetPinValue(Copy_u8Port,EN,LOW);
 6c0:	8c 2f       	mov	r24, r28
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <MDIO_voidSetPinValue>
	Delay_ms(4);	
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	80 e8       	ldi	r24, 0x80	; 128
 6d0:	90 e4       	ldi	r25, 0x40	; 64
 6d2:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
}
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8Command)
{
 6da:	68 2f       	mov	r22, r24
	#if   LCD_MODE == EIGHT_BITS_MODE 
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Command);
 6dc:	83 e0       	ldi	r24, 0x03	; 3
 6de:	0e 94 22 02 	call	0x444	; 0x444 <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,LOW);
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0e 94 54 03 	call	0x6a8	; 0x6a8 <HLCD_voidSendFallingEdge>
	HLCD_voidSendFallingEdge(DIOB);
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Command);
	HLCD_voidSendFallingEdge(DIOB);
	Delay_ms(2);
	#endif
}
 6f2:	08 95       	ret

000006f4 <HLCD_voidInit>:
#include "LCD_config.h"

void HLCD_voidInit(void)
{
	/* WAIT 400MS */
	Delay_ms(400);
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	88 ec       	ldi	r24, 0xC8	; 200
 6fa:	93 e4       	ldi	r25, 0x43	; 67
 6fc:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
	/* define EN , RS , RW as output pins */
    MDIO_voidSetPinDirection(DIOB,EN,OUTPUT);
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	41 e0       	ldi	r20, 0x01	; 1
 706:	0e 94 b0 00 	call	0x160	; 0x160 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RS,OUTPUT);
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	0e 94 b0 00 	call	0x160	; 0x160 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOB,RW,OUTPUT);
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	62 e0       	ldi	r22, 0x02	; 2
 718:	41 e0       	ldi	r20, 0x01	; 1
 71a:	0e 94 b0 00 	call	0x160	; 0x160 <MDIO_voidSetPinDirection>
   #if   LCD_MODE == EIGHT_BITS_MODE
   /* define lcd port as output */
   MDIO_voidSetPortDirection(LCD_PORT,OUTPUT);  
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	0e 94 39 01 	call	0x272	; 0x272 <MDIO_voidSetPortDirection>
   MDIO_voidSetPinValue(DIOB,RW,LOW); // set RW BIN WITH 0 TO WRITE
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	62 e0       	ldi	r22, 0x02	; 2
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	0e 94 66 01 	call	0x2cc	; 0x2cc <MDIO_voidSetPinValue>
   HLCD_voidSendCommand(EIGHT_BITS_CMD);  // to set the LCD at eight bit mode
 730:	88 e3       	ldi	r24, 0x38	; 56
 732:	0e 94 6d 03 	call	0x6da	; 0x6da <HLCD_voidSendCommand>
   Delay_ms(4);
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	90 e4       	ldi	r25, 0x40	; 64
 73e:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
   HLCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF); 
 742:	8c e0       	ldi	r24, 0x0C	; 12
 744:	0e 94 6d 03 	call	0x6da	; 0x6da <HLCD_voidSendCommand>
   Delay_ms(4);
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	90 e4       	ldi	r25, 0x40	; 64
 750:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
   HLCD_voidSendCommand(CLR_SCREEN_CMD);
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 6d 03 	call	0x6da	; 0x6da <HLCD_voidSendCommand>
   Delay_ms(20);
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	80 ea       	ldi	r24, 0xA0	; 160
 760:	91 e4       	ldi	r25, 0x41	; 65
 762:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
   HLCD_voidSendCommand(ENTRY_MODE_CMD);
 766:	86 e0       	ldi	r24, 0x06	; 6
 768:	0e 94 6d 03 	call	0x6da	; 0x6da <HLCD_voidSendCommand>
   Delay_ms(4);  
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	80 e8       	ldi	r24, 0x80	; 128
 772:	90 e4       	ldi	r25, 0x40	; 64
 774:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
   Delay_ms(4);
   
   
   #endif
   
}
 778:	08 95       	ret

0000077a <HLCD_voidSendChar>:
	Delay_ms(2);
	#endif
}

void HLCD_voidSendChar(u8 Copy_u8Char)
{
 77a:	68 2f       	mov	r22, r24
	#if   LCD_MODE== EIGHT_BITS_MODE
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Char); // Write char on port
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	0e 94 22 02 	call	0x444	; 0x444 <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(DIOB,RS,HIGH);      // set RS pin to write data
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	41 e0       	ldi	r20, 0x01	; 1
 788:	0e 94 66 01 	call	0x2cc	; 0x2cc <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOB);    // enable LCD
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <HLCD_voidSendFallingEdge>
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Char);
	HLCD_voidSendFallingEdge(DIOB);	
	Delay_ms(2);
	#endif
	
}
 792:	08 95       	ret

00000794 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8pString)
{
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	8c 01       	movw	r16, r24
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
 79c:	fc 01       	movw	r30, r24
 79e:	80 81       	ld	r24, Z
 7a0:	88 23       	and	r24, r24
 7a2:	51 f0       	breq	.+20     	; 0x7b8 <HLCD_voidSendString+0x24>
 7a4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
 7a6:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
}

void HLCD_voidSendString(u8 *Copy_u8pString)
{
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
 7aa:	cf 5f       	subi	r28, 0xFF	; 255
 7ac:	f8 01       	movw	r30, r16
 7ae:	ec 0f       	add	r30, r28
 7b0:	f1 1d       	adc	r31, r1
 7b2:	80 81       	ld	r24, Z
 7b4:	88 23       	and	r24, r24
 7b6:	b9 f7       	brne	.-18     	; 0x7a6 <HLCD_voidSendString+0x12>
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
	}
}
 7b8:	cf 91       	pop	r28
 7ba:	1f 91       	pop	r17
 7bc:	0f 91       	pop	r16
 7be:	08 95       	ret

000007c0 <HLCD_voidClearScreen>:

void HLCD_voidClearScreen(void)
{
	HLCD_voidSendCommand(CLR_SCREEN_CMD);
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	0e 94 6d 03 	call	0x6da	; 0x6da <HLCD_voidSendCommand>
	Delay_ms(20);
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	80 ea       	ldi	r24, 0xA0	; 160
 7cc:	91 e4       	ldi	r25, 0x41	; 65
 7ce:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
}
 7d2:	08 95       	ret

000007d4 <HLCD_voidMoveCursor>:

void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
 7d4:	28 2f       	mov	r18, r24
 7d6:	21 50       	subi	r18, 0x01	; 1
 7d8:	22 30       	cpi	r18, 0x02	; 2
 7da:	70 f4       	brcc	.+28     	; 0x7f8 <HLCD_voidMoveCursor+0x24>
 7dc:	66 23       	and	r22, r22
 7de:	71 f0       	breq	.+28     	; 0x7fc <HLCD_voidMoveCursor+0x28>
 7e0:	61 31       	cpi	r22, 0x11	; 17
 7e2:	70 f4       	brcc	.+28     	; 0x800 <HLCD_voidMoveCursor+0x2c>
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
	}
	else if(Copy_u8Row==1)
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	19 f4       	brne	.+6      	; 0x7ee <HLCD_voidMoveCursor+0x1a>
	{
		Local_u8ReqLocation=0x80+Copy_u8Col-1;
 7e8:	96 2f       	mov	r25, r22
 7ea:	91 58       	subi	r25, 0x81	; 129
 7ec:	0a c0       	rjmp	.+20     	; 0x802 <HLCD_voidMoveCursor+0x2e>
	}
	else if (Copy_u8Row==2)
 7ee:	82 30       	cpi	r24, 0x02	; 2
 7f0:	41 f4       	brne	.+16     	; 0x802 <HLCD_voidMoveCursor+0x2e>
	{
		Local_u8ReqLocation=0xc0+Copy_u8Col-1;
 7f2:	96 2f       	mov	r25, r22
 7f4:	91 54       	subi	r25, 0x41	; 65
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <HLCD_voidMoveCursor+0x2e>
void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
 7f8:	90 e8       	ldi	r25, 0x80	; 128
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <HLCD_voidMoveCursor+0x2e>
 7fc:	90 e8       	ldi	r25, 0x80	; 128
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <HLCD_voidMoveCursor+0x2e>
 800:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		// do nothing
	}
	HLCD_voidSendCommand(Local_u8ReqLocation);
 802:	89 2f       	mov	r24, r25
 804:	0e 94 6d 03 	call	0x6da	; 0x6da <HLCD_voidSendCommand>
	Delay_ms(2);
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e4       	ldi	r25, 0x40	; 64
 810:	0e 94 5e 00 	call	0xbc	; 0xbc <Delay_ms>
	
 814:	08 95       	ret

00000816 <main>:

u8 temp;

int main(void)
{
	HLCD_voidInit();
 816:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <HLCD_voidInit>
	MADC_voidInit();
 81a:	0e 94 49 00 	call	0x92	; 0x92 <MADC_voidInit>
	HLCD_voidSendString("TEMP ");
 81e:	80 e6       	ldi	r24, 0x60	; 96
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 ca 03 	call	0x794	; 0x794 <HLCD_voidSendString>
		   HLCD_voidSendChar('C');		   
	   }
	   else if (temp<1000)
	   {
		   HLCD_voidMoveCursor(1,6);
		   HLCD_voidSendChar( (temp/100) +48);
 826:	d4 e6       	ldi	r29, 0x64	; 100
		   HLCD_voidSendChar( ( (temp/10)%10 ) +48);
 828:	ca e0       	ldi	r28, 0x0A	; 10
	HLCD_voidSendString("TEMP ");
	
    while(1)
    {
		// temp=( ( 2.56*1000*MADC_u16Read() ) / (1024*10) )
       temp=( 0.25*MADC_u16Read() ) ;
 82a:	0e 94 51 00 	call	0xa2	; 0xa2 <MADC_u16Read>
 82e:	bc 01       	movw	r22, r24
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
 838:	20 e0       	ldi	r18, 0x00	; 0
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	40 e8       	ldi	r20, 0x80	; 128
 83e:	5e e3       	ldi	r21, 0x3E	; 62
 840:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__mulsf3>
 844:	dc 01       	movw	r26, r24
 846:	cb 01       	movw	r24, r22
 848:	bc 01       	movw	r22, r24
 84a:	cd 01       	movw	r24, r26
 84c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fixunssfsi>
 850:	60 93 66 00 	sts	0x0066, r22
	   if(temp<10)
 854:	6a 30       	cpi	r22, 0x0A	; 10
 856:	98 f4       	brcc	.+38     	; 0x87e <__stack+0x1f>
	   {
		   HLCD_voidMoveCursor(1,6);
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	66 e0       	ldi	r22, 0x06	; 6
 85c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <HLCD_voidMoveCursor>
		   HLCD_voidSendChar(temp+48);
 860:	80 91 66 00 	lds	r24, 0x0066
 864:	80 5d       	subi	r24, 0xD0	; 208
 866:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar(0xDF); // degree character
 86a:	8f ed       	ldi	r24, 0xDF	; 223
 86c:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar('C');
 870:	83 e4       	ldi	r24, 0x43	; 67
 872:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar(0x20); 
 876:	80 e2       	ldi	r24, 0x20	; 32
 878:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
 87c:	d6 cf       	rjmp	.-84     	; 0x82a <main+0x14>
	   }
	   else if (temp<100)
 87e:	64 36       	cpi	r22, 0x64	; 100
 880:	e0 f4       	brcc	.+56     	; 0x8ba <__stack+0x5b>
	   {
		   HLCD_voidMoveCursor(1,6);
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	66 e0       	ldi	r22, 0x06	; 6
 886:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <HLCD_voidMoveCursor>
		   HLCD_voidSendChar( (temp/10) +48);
 88a:	80 91 66 00 	lds	r24, 0x0066
 88e:	6c 2f       	mov	r22, r28
 890:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodqi4>
 894:	80 5d       	subi	r24, 0xD0	; 208
 896:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar( (temp%10) +48);
 89a:	80 91 66 00 	lds	r24, 0x0066
 89e:	6c 2f       	mov	r22, r28
 8a0:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodqi4>
 8a4:	89 2f       	mov	r24, r25
 8a6:	80 5d       	subi	r24, 0xD0	; 208
 8a8:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar(0xDF); // degree character
 8ac:	8f ed       	ldi	r24, 0xDF	; 223
 8ae:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar('C');		   
 8b2:	83 e4       	ldi	r24, 0x43	; 67
 8b4:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
 8b8:	b8 cf       	rjmp	.-144    	; 0x82a <main+0x14>
	   }
	   else if (temp<1000)
	   {
		   HLCD_voidMoveCursor(1,6);
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	66 e0       	ldi	r22, 0x06	; 6
 8be:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <HLCD_voidMoveCursor>
		   HLCD_voidSendChar( (temp/100) +48);
 8c2:	80 91 66 00 	lds	r24, 0x0066
 8c6:	6d 2f       	mov	r22, r29
 8c8:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodqi4>
 8cc:	80 5d       	subi	r24, 0xD0	; 208
 8ce:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar( ( (temp/10)%10 ) +48);
 8d2:	80 91 66 00 	lds	r24, 0x0066
 8d6:	6c 2f       	mov	r22, r28
 8d8:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodqi4>
 8dc:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodqi4>
 8e0:	89 2f       	mov	r24, r25
 8e2:	80 5d       	subi	r24, 0xD0	; 208
 8e4:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar( (temp%10) +48);
 8e8:	80 91 66 00 	lds	r24, 0x0066
 8ec:	6c 2f       	mov	r22, r28
 8ee:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodqi4>
 8f2:	89 2f       	mov	r24, r25
 8f4:	80 5d       	subi	r24, 0xD0	; 208
 8f6:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar(0xDF); // degree character
 8fa:	8f ed       	ldi	r24, 0xDF	; 223
 8fc:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
		   HLCD_voidSendChar('C');
 900:	83 e4       	ldi	r24, 0x43	; 67
 902:	0e 94 bd 03 	call	0x77a	; 0x77a <HLCD_voidSendChar>
 906:	91 cf       	rjmp	.-222    	; 0x82a <main+0x14>

00000908 <__divsf3>:
 908:	0c d0       	rcall	.+24     	; 0x922 <__divsf3x>
 90a:	e6 c0       	rjmp	.+460    	; 0xad8 <__fp_round>
 90c:	de d0       	rcall	.+444    	; 0xaca <__fp_pscB>
 90e:	40 f0       	brcs	.+16     	; 0x920 <__divsf3+0x18>
 910:	d5 d0       	rcall	.+426    	; 0xabc <__fp_pscA>
 912:	30 f0       	brcs	.+12     	; 0x920 <__divsf3+0x18>
 914:	21 f4       	brne	.+8      	; 0x91e <__divsf3+0x16>
 916:	5f 3f       	cpi	r21, 0xFF	; 255
 918:	19 f0       	breq	.+6      	; 0x920 <__divsf3+0x18>
 91a:	c7 c0       	rjmp	.+398    	; 0xaaa <__fp_inf>
 91c:	51 11       	cpse	r21, r1
 91e:	10 c1       	rjmp	.+544    	; 0xb40 <__fp_szero>
 920:	ca c0       	rjmp	.+404    	; 0xab6 <__fp_nan>

00000922 <__divsf3x>:
 922:	eb d0       	rcall	.+470    	; 0xafa <__fp_split3>
 924:	98 f3       	brcs	.-26     	; 0x90c <__divsf3+0x4>

00000926 <__divsf3_pse>:
 926:	99 23       	and	r25, r25
 928:	c9 f3       	breq	.-14     	; 0x91c <__divsf3+0x14>
 92a:	55 23       	and	r21, r21
 92c:	b1 f3       	breq	.-20     	; 0x91a <__divsf3+0x12>
 92e:	95 1b       	sub	r25, r21
 930:	55 0b       	sbc	r21, r21
 932:	bb 27       	eor	r27, r27
 934:	aa 27       	eor	r26, r26
 936:	62 17       	cp	r22, r18
 938:	73 07       	cpc	r23, r19
 93a:	84 07       	cpc	r24, r20
 93c:	38 f0       	brcs	.+14     	; 0x94c <__divsf3_pse+0x26>
 93e:	9f 5f       	subi	r25, 0xFF	; 255
 940:	5f 4f       	sbci	r21, 0xFF	; 255
 942:	22 0f       	add	r18, r18
 944:	33 1f       	adc	r19, r19
 946:	44 1f       	adc	r20, r20
 948:	aa 1f       	adc	r26, r26
 94a:	a9 f3       	breq	.-22     	; 0x936 <__divsf3_pse+0x10>
 94c:	33 d0       	rcall	.+102    	; 0x9b4 <__divsf3_pse+0x8e>
 94e:	0e 2e       	mov	r0, r30
 950:	3a f0       	brmi	.+14     	; 0x960 <__divsf3_pse+0x3a>
 952:	e0 e8       	ldi	r30, 0x80	; 128
 954:	30 d0       	rcall	.+96     	; 0x9b6 <__divsf3_pse+0x90>
 956:	91 50       	subi	r25, 0x01	; 1
 958:	50 40       	sbci	r21, 0x00	; 0
 95a:	e6 95       	lsr	r30
 95c:	00 1c       	adc	r0, r0
 95e:	ca f7       	brpl	.-14     	; 0x952 <__divsf3_pse+0x2c>
 960:	29 d0       	rcall	.+82     	; 0x9b4 <__divsf3_pse+0x8e>
 962:	fe 2f       	mov	r31, r30
 964:	27 d0       	rcall	.+78     	; 0x9b4 <__divsf3_pse+0x8e>
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	bb 1f       	adc	r27, r27
 96e:	26 17       	cp	r18, r22
 970:	37 07       	cpc	r19, r23
 972:	48 07       	cpc	r20, r24
 974:	ab 07       	cpc	r26, r27
 976:	b0 e8       	ldi	r27, 0x80	; 128
 978:	09 f0       	breq	.+2      	; 0x97c <__divsf3_pse+0x56>
 97a:	bb 0b       	sbc	r27, r27
 97c:	80 2d       	mov	r24, r0
 97e:	bf 01       	movw	r22, r30
 980:	ff 27       	eor	r31, r31
 982:	93 58       	subi	r25, 0x83	; 131
 984:	5f 4f       	sbci	r21, 0xFF	; 255
 986:	2a f0       	brmi	.+10     	; 0x992 <__divsf3_pse+0x6c>
 988:	9e 3f       	cpi	r25, 0xFE	; 254
 98a:	51 05       	cpc	r21, r1
 98c:	68 f0       	brcs	.+26     	; 0x9a8 <__divsf3_pse+0x82>
 98e:	8d c0       	rjmp	.+282    	; 0xaaa <__fp_inf>
 990:	d7 c0       	rjmp	.+430    	; 0xb40 <__fp_szero>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	ec f3       	brlt	.-6      	; 0x990 <__divsf3_pse+0x6a>
 996:	98 3e       	cpi	r25, 0xE8	; 232
 998:	dc f3       	brlt	.-10     	; 0x990 <__divsf3_pse+0x6a>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	9f 5f       	subi	r25, 0xFF	; 255
 9a6:	c9 f7       	brne	.-14     	; 0x99a <__divsf3_pse+0x74>
 9a8:	88 0f       	add	r24, r24
 9aa:	91 1d       	adc	r25, r1
 9ac:	96 95       	lsr	r25
 9ae:	87 95       	ror	r24
 9b0:	97 f9       	bld	r25, 7
 9b2:	08 95       	ret
 9b4:	e1 e0       	ldi	r30, 0x01	; 1
 9b6:	66 0f       	add	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	bb 1f       	adc	r27, r27
 9be:	62 17       	cp	r22, r18
 9c0:	73 07       	cpc	r23, r19
 9c2:	84 07       	cpc	r24, r20
 9c4:	ba 07       	cpc	r27, r26
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__divsf3_pse+0xaa>
 9c8:	62 1b       	sub	r22, r18
 9ca:	73 0b       	sbc	r23, r19
 9cc:	84 0b       	sbc	r24, r20
 9ce:	ba 0b       	sbc	r27, r26
 9d0:	ee 1f       	adc	r30, r30
 9d2:	88 f7       	brcc	.-30     	; 0x9b6 <__divsf3_pse+0x90>
 9d4:	e0 95       	com	r30
 9d6:	08 95       	ret

000009d8 <__fixunssfsi>:
 9d8:	98 d0       	rcall	.+304    	; 0xb0a <__fp_splitA>
 9da:	88 f0       	brcs	.+34     	; 0x9fe <__fixunssfsi+0x26>
 9dc:	9f 57       	subi	r25, 0x7F	; 127
 9de:	90 f0       	brcs	.+36     	; 0xa04 <__fixunssfsi+0x2c>
 9e0:	b9 2f       	mov	r27, r25
 9e2:	99 27       	eor	r25, r25
 9e4:	b7 51       	subi	r27, 0x17	; 23
 9e6:	a0 f0       	brcs	.+40     	; 0xa10 <__fixunssfsi+0x38>
 9e8:	d1 f0       	breq	.+52     	; 0xa1e <__fixunssfsi+0x46>
 9ea:	66 0f       	add	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	1a f0       	brmi	.+6      	; 0x9fa <__fixunssfsi+0x22>
 9f4:	ba 95       	dec	r27
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__fixunssfsi+0x12>
 9f8:	12 c0       	rjmp	.+36     	; 0xa1e <__fixunssfsi+0x46>
 9fa:	b1 30       	cpi	r27, 0x01	; 1
 9fc:	81 f0       	breq	.+32     	; 0xa1e <__fixunssfsi+0x46>
 9fe:	9f d0       	rcall	.+318    	; 0xb3e <__fp_zero>
 a00:	b1 e0       	ldi	r27, 0x01	; 1
 a02:	08 95       	ret
 a04:	9c c0       	rjmp	.+312    	; 0xb3e <__fp_zero>
 a06:	67 2f       	mov	r22, r23
 a08:	78 2f       	mov	r23, r24
 a0a:	88 27       	eor	r24, r24
 a0c:	b8 5f       	subi	r27, 0xF8	; 248
 a0e:	39 f0       	breq	.+14     	; 0xa1e <__fixunssfsi+0x46>
 a10:	b9 3f       	cpi	r27, 0xF9	; 249
 a12:	cc f3       	brlt	.-14     	; 0xa06 <__fixunssfsi+0x2e>
 a14:	86 95       	lsr	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b3 95       	inc	r27
 a1c:	d9 f7       	brne	.-10     	; 0xa14 <__fixunssfsi+0x3c>
 a1e:	3e f4       	brtc	.+14     	; 0xa2e <__fixunssfsi+0x56>
 a20:	90 95       	com	r25
 a22:	80 95       	com	r24
 a24:	70 95       	com	r23
 a26:	61 95       	neg	r22
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	8f 4f       	sbci	r24, 0xFF	; 255
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	08 95       	ret

00000a30 <__floatunsisf>:
 a30:	e8 94       	clt
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <__floatsisf+0x12>

00000a34 <__floatsisf>:
 a34:	97 fb       	bst	r25, 7
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__floatsisf+0x12>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	99 23       	and	r25, r25
 a48:	a9 f0       	breq	.+42     	; 0xa74 <__floatsisf+0x40>
 a4a:	f9 2f       	mov	r31, r25
 a4c:	96 e9       	ldi	r25, 0x96	; 150
 a4e:	bb 27       	eor	r27, r27
 a50:	93 95       	inc	r25
 a52:	f6 95       	lsr	r31
 a54:	87 95       	ror	r24
 a56:	77 95       	ror	r23
 a58:	67 95       	ror	r22
 a5a:	b7 95       	ror	r27
 a5c:	f1 11       	cpse	r31, r1
 a5e:	f8 cf       	rjmp	.-16     	; 0xa50 <__floatsisf+0x1c>
 a60:	fa f4       	brpl	.+62     	; 0xaa0 <__floatsisf+0x6c>
 a62:	bb 0f       	add	r27, r27
 a64:	11 f4       	brne	.+4      	; 0xa6a <__floatsisf+0x36>
 a66:	60 ff       	sbrs	r22, 0
 a68:	1b c0       	rjmp	.+54     	; 0xaa0 <__floatsisf+0x6c>
 a6a:	6f 5f       	subi	r22, 0xFF	; 255
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	16 c0       	rjmp	.+44     	; 0xaa0 <__floatsisf+0x6c>
 a74:	88 23       	and	r24, r24
 a76:	11 f0       	breq	.+4      	; 0xa7c <__floatsisf+0x48>
 a78:	96 e9       	ldi	r25, 0x96	; 150
 a7a:	11 c0       	rjmp	.+34     	; 0xa9e <__floatsisf+0x6a>
 a7c:	77 23       	and	r23, r23
 a7e:	21 f0       	breq	.+8      	; 0xa88 <__floatsisf+0x54>
 a80:	9e e8       	ldi	r25, 0x8E	; 142
 a82:	87 2f       	mov	r24, r23
 a84:	76 2f       	mov	r23, r22
 a86:	05 c0       	rjmp	.+10     	; 0xa92 <__floatsisf+0x5e>
 a88:	66 23       	and	r22, r22
 a8a:	71 f0       	breq	.+28     	; 0xaa8 <__floatsisf+0x74>
 a8c:	96 e8       	ldi	r25, 0x86	; 134
 a8e:	86 2f       	mov	r24, r22
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	2a f0       	brmi	.+10     	; 0xaa0 <__floatsisf+0x6c>
 a96:	9a 95       	dec	r25
 a98:	66 0f       	add	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	da f7       	brpl	.-10     	; 0xa96 <__floatsisf+0x62>
 aa0:	88 0f       	add	r24, r24
 aa2:	96 95       	lsr	r25
 aa4:	87 95       	ror	r24
 aa6:	97 f9       	bld	r25, 7
 aa8:	08 95       	ret

00000aaa <__fp_inf>:
 aaa:	97 f9       	bld	r25, 7
 aac:	9f 67       	ori	r25, 0x7F	; 127
 aae:	80 e8       	ldi	r24, 0x80	; 128
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	08 95       	ret

00000ab6 <__fp_nan>:
 ab6:	9f ef       	ldi	r25, 0xFF	; 255
 ab8:	80 ec       	ldi	r24, 0xC0	; 192
 aba:	08 95       	ret

00000abc <__fp_pscA>:
 abc:	00 24       	eor	r0, r0
 abe:	0a 94       	dec	r0
 ac0:	16 16       	cp	r1, r22
 ac2:	17 06       	cpc	r1, r23
 ac4:	18 06       	cpc	r1, r24
 ac6:	09 06       	cpc	r0, r25
 ac8:	08 95       	ret

00000aca <__fp_pscB>:
 aca:	00 24       	eor	r0, r0
 acc:	0a 94       	dec	r0
 ace:	12 16       	cp	r1, r18
 ad0:	13 06       	cpc	r1, r19
 ad2:	14 06       	cpc	r1, r20
 ad4:	05 06       	cpc	r0, r21
 ad6:	08 95       	ret

00000ad8 <__fp_round>:
 ad8:	09 2e       	mov	r0, r25
 ada:	03 94       	inc	r0
 adc:	00 0c       	add	r0, r0
 ade:	11 f4       	brne	.+4      	; 0xae4 <__fp_round+0xc>
 ae0:	88 23       	and	r24, r24
 ae2:	52 f0       	brmi	.+20     	; 0xaf8 <__fp_round+0x20>
 ae4:	bb 0f       	add	r27, r27
 ae6:	40 f4       	brcc	.+16     	; 0xaf8 <__fp_round+0x20>
 ae8:	bf 2b       	or	r27, r31
 aea:	11 f4       	brne	.+4      	; 0xaf0 <__fp_round+0x18>
 aec:	60 ff       	sbrs	r22, 0
 aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__fp_round+0x20>
 af0:	6f 5f       	subi	r22, 0xFF	; 255
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	08 95       	ret

00000afa <__fp_split3>:
 afa:	57 fd       	sbrc	r21, 7
 afc:	90 58       	subi	r25, 0x80	; 128
 afe:	44 0f       	add	r20, r20
 b00:	55 1f       	adc	r21, r21
 b02:	59 f0       	breq	.+22     	; 0xb1a <__fp_splitA+0x10>
 b04:	5f 3f       	cpi	r21, 0xFF	; 255
 b06:	71 f0       	breq	.+28     	; 0xb24 <__fp_splitA+0x1a>
 b08:	47 95       	ror	r20

00000b0a <__fp_splitA>:
 b0a:	88 0f       	add	r24, r24
 b0c:	97 fb       	bst	r25, 7
 b0e:	99 1f       	adc	r25, r25
 b10:	61 f0       	breq	.+24     	; 0xb2a <__fp_splitA+0x20>
 b12:	9f 3f       	cpi	r25, 0xFF	; 255
 b14:	79 f0       	breq	.+30     	; 0xb34 <__fp_splitA+0x2a>
 b16:	87 95       	ror	r24
 b18:	08 95       	ret
 b1a:	12 16       	cp	r1, r18
 b1c:	13 06       	cpc	r1, r19
 b1e:	14 06       	cpc	r1, r20
 b20:	55 1f       	adc	r21, r21
 b22:	f2 cf       	rjmp	.-28     	; 0xb08 <__fp_split3+0xe>
 b24:	46 95       	lsr	r20
 b26:	f1 df       	rcall	.-30     	; 0xb0a <__fp_splitA>
 b28:	08 c0       	rjmp	.+16     	; 0xb3a <__fp_splitA+0x30>
 b2a:	16 16       	cp	r1, r22
 b2c:	17 06       	cpc	r1, r23
 b2e:	18 06       	cpc	r1, r24
 b30:	99 1f       	adc	r25, r25
 b32:	f1 cf       	rjmp	.-30     	; 0xb16 <__fp_splitA+0xc>
 b34:	86 95       	lsr	r24
 b36:	71 05       	cpc	r23, r1
 b38:	61 05       	cpc	r22, r1
 b3a:	08 94       	sec
 b3c:	08 95       	ret

00000b3e <__fp_zero>:
 b3e:	e8 94       	clt

00000b40 <__fp_szero>:
 b40:	bb 27       	eor	r27, r27
 b42:	66 27       	eor	r22, r22
 b44:	77 27       	eor	r23, r23
 b46:	cb 01       	movw	r24, r22
 b48:	97 f9       	bld	r25, 7
 b4a:	08 95       	ret

00000b4c <__mulsf3>:
 b4c:	0b d0       	rcall	.+22     	; 0xb64 <__mulsf3x>
 b4e:	c4 cf       	rjmp	.-120    	; 0xad8 <__fp_round>
 b50:	b5 df       	rcall	.-150    	; 0xabc <__fp_pscA>
 b52:	28 f0       	brcs	.+10     	; 0xb5e <__mulsf3+0x12>
 b54:	ba df       	rcall	.-140    	; 0xaca <__fp_pscB>
 b56:	18 f0       	brcs	.+6      	; 0xb5e <__mulsf3+0x12>
 b58:	95 23       	and	r25, r21
 b5a:	09 f0       	breq	.+2      	; 0xb5e <__mulsf3+0x12>
 b5c:	a6 cf       	rjmp	.-180    	; 0xaaa <__fp_inf>
 b5e:	ab cf       	rjmp	.-170    	; 0xab6 <__fp_nan>
 b60:	11 24       	eor	r1, r1
 b62:	ee cf       	rjmp	.-36     	; 0xb40 <__fp_szero>

00000b64 <__mulsf3x>:
 b64:	ca df       	rcall	.-108    	; 0xafa <__fp_split3>
 b66:	a0 f3       	brcs	.-24     	; 0xb50 <__mulsf3+0x4>

00000b68 <__mulsf3_pse>:
 b68:	95 9f       	mul	r25, r21
 b6a:	d1 f3       	breq	.-12     	; 0xb60 <__mulsf3+0x14>
 b6c:	95 0f       	add	r25, r21
 b6e:	50 e0       	ldi	r21, 0x00	; 0
 b70:	55 1f       	adc	r21, r21
 b72:	62 9f       	mul	r22, r18
 b74:	f0 01       	movw	r30, r0
 b76:	72 9f       	mul	r23, r18
 b78:	bb 27       	eor	r27, r27
 b7a:	f0 0d       	add	r31, r0
 b7c:	b1 1d       	adc	r27, r1
 b7e:	63 9f       	mul	r22, r19
 b80:	aa 27       	eor	r26, r26
 b82:	f0 0d       	add	r31, r0
 b84:	b1 1d       	adc	r27, r1
 b86:	aa 1f       	adc	r26, r26
 b88:	64 9f       	mul	r22, r20
 b8a:	66 27       	eor	r22, r22
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	66 1f       	adc	r22, r22
 b92:	82 9f       	mul	r24, r18
 b94:	22 27       	eor	r18, r18
 b96:	b0 0d       	add	r27, r0
 b98:	a1 1d       	adc	r26, r1
 b9a:	62 1f       	adc	r22, r18
 b9c:	73 9f       	mul	r23, r19
 b9e:	b0 0d       	add	r27, r0
 ba0:	a1 1d       	adc	r26, r1
 ba2:	62 1f       	adc	r22, r18
 ba4:	83 9f       	mul	r24, r19
 ba6:	a0 0d       	add	r26, r0
 ba8:	61 1d       	adc	r22, r1
 baa:	22 1f       	adc	r18, r18
 bac:	74 9f       	mul	r23, r20
 bae:	33 27       	eor	r19, r19
 bb0:	a0 0d       	add	r26, r0
 bb2:	61 1d       	adc	r22, r1
 bb4:	23 1f       	adc	r18, r19
 bb6:	84 9f       	mul	r24, r20
 bb8:	60 0d       	add	r22, r0
 bba:	21 1d       	adc	r18, r1
 bbc:	82 2f       	mov	r24, r18
 bbe:	76 2f       	mov	r23, r22
 bc0:	6a 2f       	mov	r22, r26
 bc2:	11 24       	eor	r1, r1
 bc4:	9f 57       	subi	r25, 0x7F	; 127
 bc6:	50 40       	sbci	r21, 0x00	; 0
 bc8:	8a f0       	brmi	.+34     	; 0xbec <__mulsf3_pse+0x84>
 bca:	e1 f0       	breq	.+56     	; 0xc04 <__mulsf3_pse+0x9c>
 bcc:	88 23       	and	r24, r24
 bce:	4a f0       	brmi	.+18     	; 0xbe2 <__mulsf3_pse+0x7a>
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	bb 1f       	adc	r27, r27
 bd6:	66 1f       	adc	r22, r22
 bd8:	77 1f       	adc	r23, r23
 bda:	88 1f       	adc	r24, r24
 bdc:	91 50       	subi	r25, 0x01	; 1
 bde:	50 40       	sbci	r21, 0x00	; 0
 be0:	a9 f7       	brne	.-22     	; 0xbcc <__mulsf3_pse+0x64>
 be2:	9e 3f       	cpi	r25, 0xFE	; 254
 be4:	51 05       	cpc	r21, r1
 be6:	70 f0       	brcs	.+28     	; 0xc04 <__mulsf3_pse+0x9c>
 be8:	60 cf       	rjmp	.-320    	; 0xaaa <__fp_inf>
 bea:	aa cf       	rjmp	.-172    	; 0xb40 <__fp_szero>
 bec:	5f 3f       	cpi	r21, 0xFF	; 255
 bee:	ec f3       	brlt	.-6      	; 0xbea <__mulsf3_pse+0x82>
 bf0:	98 3e       	cpi	r25, 0xE8	; 232
 bf2:	dc f3       	brlt	.-10     	; 0xbea <__mulsf3_pse+0x82>
 bf4:	86 95       	lsr	r24
 bf6:	77 95       	ror	r23
 bf8:	67 95       	ror	r22
 bfa:	b7 95       	ror	r27
 bfc:	f7 95       	ror	r31
 bfe:	e7 95       	ror	r30
 c00:	9f 5f       	subi	r25, 0xFF	; 255
 c02:	c1 f7       	brne	.-16     	; 0xbf4 <__mulsf3_pse+0x8c>
 c04:	fe 2b       	or	r31, r30
 c06:	88 0f       	add	r24, r24
 c08:	91 1d       	adc	r25, r1
 c0a:	96 95       	lsr	r25
 c0c:	87 95       	ror	r24
 c0e:	97 f9       	bld	r25, 7
 c10:	08 95       	ret

00000c12 <__udivmodqi4>:
 c12:	99 1b       	sub	r25, r25
 c14:	79 e0       	ldi	r23, 0x09	; 9
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <__udivmodqi4_ep>

00000c18 <__udivmodqi4_loop>:
 c18:	99 1f       	adc	r25, r25
 c1a:	96 17       	cp	r25, r22
 c1c:	08 f0       	brcs	.+2      	; 0xc20 <__udivmodqi4_ep>
 c1e:	96 1b       	sub	r25, r22

00000c20 <__udivmodqi4_ep>:
 c20:	88 1f       	adc	r24, r24
 c22:	7a 95       	dec	r23
 c24:	c9 f7       	brne	.-14     	; 0xc18 <__udivmodqi4_loop>
 c26:	80 95       	com	r24
 c28:	08 95       	ret

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
