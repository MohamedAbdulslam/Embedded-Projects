
Digital_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000012f2  00001386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000be  008000be  000013e4  2**0
                  ALLOC
  3 .stab         000018b4  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000031b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec2  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e3  00000000  00000000  000041fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070e  00000000  00000000  000046dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  00005144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5a  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 00 	call	0x136	; 0x136 <main>
      8a:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#endif

void Delay_ms(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000) * F_CPU )/2;
      92:	20 e0       	ldi	r18, 0x00	; 0
      94:	30 e0       	ldi	r19, 0x00	; 0
      96:	4a e7       	ldi	r20, 0x7A	; 122
      98:	54 e4       	ldi	r21, 0x44	; 68
      9a:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	34 e2       	ldi	r19, 0x24	; 36
      a2:	44 e7       	ldi	r20, 0x74	; 116
      a4:	59 e4       	ldi	r21, 0x49	; 73
      a6:	0e 94 08 09 	call	0x1210	; 0x1210 <__mulsf3>
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	5f e3       	ldi	r21, 0x3F	; 63
      b2:	0e 94 08 09 	call	0x1210	; 0x1210 <__mulsf3>
      b6:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fixunssfsi>
      ba:	46 2f       	mov	r20, r22
      bc:	57 2f       	mov	r21, r23
      be:	68 2f       	mov	r22, r24
      c0:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
      c2:	41 15       	cp	r20, r1
      c4:	51 05       	cpc	r21, r1
      c6:	61 05       	cpc	r22, r1
      c8:	71 05       	cpc	r23, r1
      ca:	59 f0       	breq	.+22     	; 0xe2 <Delay_ms+0x50>
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	dc 01       	movw	r26, r24
      d2:	01 96       	adiw	r24, 0x01	; 1
      d4:	a1 1d       	adc	r26, r1
      d6:	b1 1d       	adc	r27, r1
      d8:	84 17       	cp	r24, r20
      da:	95 07       	cpc	r25, r21
      dc:	a6 07       	cpc	r26, r22
      de:	b7 07       	cpc	r27, r23
      e0:	c1 f7       	brne	.-16     	; 0xd2 <Delay_ms+0x40>
      e2:	08 95       	ret

000000e4 <Delay_us>:
}

void Delay_us(f64 period)
{
	u32 i;
	u32 counter=( ( period /1000000) * F_CPU )/2;
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	34 e2       	ldi	r19, 0x24	; 36
      e8:	44 e7       	ldi	r20, 0x74	; 116
      ea:	59 e4       	ldi	r21, 0x49	; 73
      ec:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	34 e2       	ldi	r19, 0x24	; 36
      f4:	44 e7       	ldi	r20, 0x74	; 116
      f6:	59 e4       	ldi	r21, 0x49	; 73
      f8:	0e 94 08 09 	call	0x1210	; 0x1210 <__mulsf3>
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	5f e3       	ldi	r21, 0x3F	; 63
     104:	0e 94 08 09 	call	0x1210	; 0x1210 <__mulsf3>
     108:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fixunssfsi>
     10c:	46 2f       	mov	r20, r22
     10e:	57 2f       	mov	r21, r23
     110:	68 2f       	mov	r22, r24
     112:	79 2f       	mov	r23, r25
	for (i=0;i<counter;i++)
     114:	41 15       	cp	r20, r1
     116:	51 05       	cpc	r21, r1
     118:	61 05       	cpc	r22, r1
     11a:	71 05       	cpc	r23, r1
     11c:	59 f0       	breq	.+22     	; 0x134 <Delay_us+0x50>
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	dc 01       	movw	r26, r24
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	84 17       	cp	r24, r20
     12c:	95 07       	cpc	r25, r21
     12e:	a6 07       	cpc	r26, r22
     130:	b7 07       	cpc	r27, r23
     132:	c1 f7       	brne	.-16     	; 0x124 <Delay_us+0x40>
     134:	08 95       	ret

00000136 <main>:
u8 Hours_counter=0;
int main(void)
{
	u8 Local_u8KeypadValue;
	u8 Local_u8OnesDigit=0,Local_u8TensDigit=0;
	HSEVSEG_voidInit(DIOB);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	0e 94 a8 07 	call	0xf50	; 0xf50 <HSEVSEG_voidInit>
	HLCD_voidInit();
     13c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <HLCD_voidInit>
	HKEYPAD_voidInit();
     140:	0e 94 24 06 	call	0xc48	; 0xc48 <HKEYPAD_voidInit>
	/* define common pins for 7 segments as output pin */
	MDIO_voidSetPinDirection(DIOC,0,OUTPUT);
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	41 e0       	ldi	r20, 0x01	; 1
     14a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOC,1,OUTPUT);
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	41 e0       	ldi	r20, 0x01	; 1
     154:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOC,2,OUTPUT);
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	62 e0       	ldi	r22, 0x02	; 2
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOC,3,OUTPUT);
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	63 e0       	ldi	r22, 0x03	; 3
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOC,4,OUTPUT);
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	64 e0       	ldi	r22, 0x04	; 4
     170:	41 e0       	ldi	r20, 0x01	; 1
     172:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOC,5,OUTPUT);
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	65 e0       	ldi	r22, 0x05	; 5
     17a:	41 e0       	ldi	r20, 0x01	; 1
     17c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	HLCD_voidSendString("Press 1 to");
     180:	80 e6       	ldi	r24, 0x60	; 96
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
	HLCD_voidMoveCursor(2,1);
     188:	82 e0       	ldi	r24, 0x02	; 2
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	0e 94 87 07 	call	0xf0e	; 0xf0e <HLCD_voidMoveCursor>
	HLCD_voidSendString("set the time");
     190:	8b e6       	ldi	r24, 0x6B	; 107
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
	MTIMER2_voidInit();
     198:	0e 94 04 08 	call	0x1008	; 0x1008 <MTIMER2_voidInit>
	MTIMER2_voidEnableInterrupt();
     19c:	0e 94 1d 08 	call	0x103a	; 0x103a <MTIMER2_voidEnableInterrupt>
				
			}
			else
			{
				HLCD_voidClearScreen();	
				HLCD_voidSendString("Wrong choice");
     1a0:	0f 2e       	mov	r0, r31
     1a2:	f7 e9       	ldi	r31, 0x97	; 151
     1a4:	af 2e       	mov	r10, r31
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	bf 2e       	mov	r11, r31
     1aa:	f0 2d       	mov	r31, r0
				Delay_ms(1000);
				HLCD_voidClearScreen();
				HLCD_voidSendString("Press 1 to");
     1ac:	0f 2e       	mov	r0, r31
     1ae:	f0 e6       	ldi	r31, 0x60	; 96
     1b0:	ef 2e       	mov	r14, r31
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	ff 2e       	mov	r15, r31
     1b6:	f0 2d       	mov	r31, r0
				HLCD_voidMoveCursor(2,1);
				HLCD_voidSendString("set the time");				
     1b8:	0f 2e       	mov	r0, r31
     1ba:	fb e6       	ldi	r31, 0x6B	; 107
     1bc:	cf 2e       	mov	r12, r31
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	df 2e       	mov	r13, r31
     1c2:	f0 2d       	mov	r31, r0
		if (Local_u8KeypadValue!=0xff)
		{
			if (Local_u8KeypadValue=='1')
			{
				HLCD_voidClearScreen();
				HLCD_voidSendString("Hours=--");
     1c4:	0f 2e       	mov	r0, r31
     1c6:	f8 e7       	ldi	r31, 0x78	; 120
     1c8:	8f 2e       	mov	r8, r31
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	9f 2e       	mov	r9, r31
     1ce:	f0 2d       	mov	r31, r0
				HLCD_voidSendChar(Local_u8OnesDigit);
				Delay_ms(500);
				Hours_counter=( (Local_u8TensDigit-48)*10 + (Local_u8OnesDigit-48) );
				
				HLCD_voidClearScreen();
				HLCD_voidSendString("Minutes=--");
     1d0:	0f 2e       	mov	r0, r31
     1d2:	f1 e8       	ldi	r31, 0x81	; 129
     1d4:	6f 2e       	mov	r6, r31
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	7f 2e       	mov	r7, r31
     1da:	f0 2d       	mov	r31, r0
				HLCD_voidSendChar(Local_u8OnesDigit);
				Delay_ms(500);
				Minutes_counter=( (Local_u8TensDigit-48)*10 + (Local_u8OnesDigit-48) );	
							
				HLCD_voidClearScreen();
				HLCD_voidSendString("Seconds=--");
     1dc:	0f 2e       	mov	r0, r31
     1de:	fc e8       	ldi	r31, 0x8C	; 140
     1e0:	4f 2e       	mov	r4, r31
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	5f 2e       	mov	r5, r31
     1e6:	f0 2d       	mov	r31, r0
		MDIO_voidSetPinValue(DIOC,2,HIGH);
		MDIO_voidSetPinValue(DIOC,3,HIGH);
		MDIO_voidSetPinValue(DIOC,4,HIGH);
		MDIO_voidSetPinValue(DIOC,5,HIGH);
		MDIO_voidSetPinValue(DIOC,0,LOW); // Activate first 7 segment
		HSEVSEG_voidWrite(DIOB,Seconds_counter%10);
     1e8:	da e0       	ldi	r29, 0x0A	; 10
	MTIMER2_voidInit();
	MTIMER2_voidEnableInterrupt();
	
    while(1)
    {
        Local_u8KeypadValue=HKEYPAD_u8Read();
     1ea:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
		if (Local_u8KeypadValue!=0xff)
     1ee:	8f 3f       	cpi	r24, 0xFF	; 255
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <main+0xbe>
     1f2:	bd c0       	rjmp	.+378    	; 0x36e <main+0x238>
		{
			if (Local_u8KeypadValue=='1')
     1f4:	81 33       	cpi	r24, 0x31	; 49
     1f6:	09 f0       	breq	.+2      	; 0x1fa <main+0xc4>
     1f8:	a3 c0       	rjmp	.+326    	; 0x340 <main+0x20a>
			{
				HLCD_voidClearScreen();
     1fa:	0e 94 7d 07 	call	0xefa	; 0xefa <HLCD_voidClearScreen>
				HLCD_voidSendString("Hours=--");
     1fe:	c4 01       	movw	r24, r8
     200:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
				HLCD_voidMoveCursor(1,7);
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	67 e0       	ldi	r22, 0x07	; 7
     208:	0e 94 87 07 	call	0xf0e	; 0xf0e <HLCD_voidMoveCursor>
				Delay_ms(800);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	88 e4       	ldi	r24, 0x48	; 72
     212:	94 e4       	ldi	r25, 0x44	; 68
     214:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				do 
				{
					Local_u8TensDigit=HKEYPAD_u8Read();
     218:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
     21c:	18 2f       	mov	r17, r24
				} while (Local_u8TensDigit==0xff);
     21e:	8f 3f       	cpi	r24, 0xFF	; 255
     220:	d9 f3       	breq	.-10     	; 0x218 <main+0xe2>
				HLCD_voidSendChar(Local_u8TensDigit);
     222:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
				Delay_ms(500);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	8a ef       	ldi	r24, 0xFA	; 250
     22c:	93 e4       	ldi	r25, 0x43	; 67
     22e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				do
				{
					Local_u8OnesDigit=HKEYPAD_u8Read();
     232:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
     236:	c8 2f       	mov	r28, r24
				} while (Local_u8OnesDigit==0xff);
     238:	8f 3f       	cpi	r24, 0xFF	; 255
     23a:	d9 f3       	breq	.-10     	; 0x232 <main+0xfc>
				HLCD_voidSendChar(Local_u8OnesDigit);
     23c:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
				Delay_ms(500);
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	8a ef       	ldi	r24, 0xFA	; 250
     246:	93 e4       	ldi	r25, 0x43	; 67
     248:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				Hours_counter=( (Local_u8TensDigit-48)*10 + (Local_u8OnesDigit-48) );
     24c:	11 0f       	add	r17, r17
     24e:	81 2f       	mov	r24, r17
     250:	88 0f       	add	r24, r24
     252:	88 0f       	add	r24, r24
     254:	18 0f       	add	r17, r24
     256:	10 51       	subi	r17, 0x10	; 16
     258:	c1 0f       	add	r28, r17
     25a:	c0 93 be 00 	sts	0x00BE, r28
				
				HLCD_voidClearScreen();
     25e:	0e 94 7d 07 	call	0xefa	; 0xefa <HLCD_voidClearScreen>
				HLCD_voidSendString("Minutes=--");
     262:	c3 01       	movw	r24, r6
     264:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
				HLCD_voidMoveCursor(1,9);
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	69 e0       	ldi	r22, 0x09	; 9
     26c:	0e 94 87 07 	call	0xf0e	; 0xf0e <HLCD_voidMoveCursor>
				Delay_ms(800);
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	88 e4       	ldi	r24, 0x48	; 72
     276:	94 e4       	ldi	r25, 0x44	; 68
     278:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				do
				{
					Local_u8TensDigit=HKEYPAD_u8Read();
     27c:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
     280:	18 2f       	mov	r17, r24
				} while (Local_u8TensDigit==0xff);
     282:	8f 3f       	cpi	r24, 0xFF	; 255
     284:	d9 f3       	breq	.-10     	; 0x27c <main+0x146>
				HLCD_voidSendChar(Local_u8TensDigit);
     286:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
				Delay_ms(500);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	8a ef       	ldi	r24, 0xFA	; 250
     290:	93 e4       	ldi	r25, 0x43	; 67
     292:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				do
				{
					Local_u8OnesDigit=HKEYPAD_u8Read();
     296:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
     29a:	c8 2f       	mov	r28, r24
				} while (Local_u8OnesDigit==0xff);
     29c:	8f 3f       	cpi	r24, 0xFF	; 255
     29e:	d9 f3       	breq	.-10     	; 0x296 <main+0x160>
				HLCD_voidSendChar(Local_u8OnesDigit);
     2a0:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
				Delay_ms(500);
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	8a ef       	ldi	r24, 0xFA	; 250
     2aa:	93 e4       	ldi	r25, 0x43	; 67
     2ac:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				Minutes_counter=( (Local_u8TensDigit-48)*10 + (Local_u8OnesDigit-48) );	
     2b0:	11 0f       	add	r17, r17
     2b2:	81 2f       	mov	r24, r17
     2b4:	88 0f       	add	r24, r24
     2b6:	88 0f       	add	r24, r24
     2b8:	18 0f       	add	r17, r24
     2ba:	10 51       	subi	r17, 0x10	; 16
     2bc:	c1 0f       	add	r28, r17
     2be:	c0 93 bf 00 	sts	0x00BF, r28
							
				HLCD_voidClearScreen();
     2c2:	0e 94 7d 07 	call	0xefa	; 0xefa <HLCD_voidClearScreen>
				HLCD_voidSendString("Seconds=--");
     2c6:	c2 01       	movw	r24, r4
     2c8:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
				HLCD_voidMoveCursor(1,9);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	69 e0       	ldi	r22, 0x09	; 9
     2d0:	0e 94 87 07 	call	0xf0e	; 0xf0e <HLCD_voidMoveCursor>
				Delay_ms(800);
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	88 e4       	ldi	r24, 0x48	; 72
     2da:	94 e4       	ldi	r25, 0x44	; 68
     2dc:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				
				do
				{
					Local_u8TensDigit=HKEYPAD_u8Read();
     2e0:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
     2e4:	18 2f       	mov	r17, r24
				} while (Local_u8TensDigit==0xff);
     2e6:	8f 3f       	cpi	r24, 0xFF	; 255
     2e8:	d9 f3       	breq	.-10     	; 0x2e0 <main+0x1aa>
				HLCD_voidSendChar(Local_u8TensDigit);
     2ea:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
				Delay_ms(500);
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	8a ef       	ldi	r24, 0xFA	; 250
     2f4:	93 e4       	ldi	r25, 0x43	; 67
     2f6:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				do
				{
					Local_u8OnesDigit=HKEYPAD_u8Read();
     2fa:	0e 94 5d 06 	call	0xcba	; 0xcba <HKEYPAD_u8Read>
     2fe:	c8 2f       	mov	r28, r24
				} while (Local_u8OnesDigit==0xff);
     300:	8f 3f       	cpi	r24, 0xFF	; 255
     302:	d9 f3       	breq	.-10     	; 0x2fa <main+0x1c4>
				HLCD_voidSendChar(Local_u8OnesDigit);
     304:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
				Delay_ms(500);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	8a ef       	ldi	r24, 0xFA	; 250
     30e:	93 e4       	ldi	r25, 0x43	; 67
     310:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				Seconds_counter=( (Local_u8TensDigit-48)*10 + (Local_u8OnesDigit-48) );	
     314:	11 0f       	add	r17, r17
     316:	81 2f       	mov	r24, r17
     318:	88 0f       	add	r24, r24
     31a:	88 0f       	add	r24, r24
     31c:	18 0f       	add	r17, r24
     31e:	10 51       	subi	r17, 0x10	; 16
     320:	c1 0f       	add	r28, r17
     322:	c0 93 c0 00 	sts	0x00C0, r28
				
				HLCD_voidClearScreen();			
     326:	0e 94 7d 07 	call	0xefa	; 0xefa <HLCD_voidClearScreen>
	            HLCD_voidSendString("Press 1 to");
     32a:	c7 01       	movw	r24, r14
     32c:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
	            HLCD_voidMoveCursor(2,1);
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	0e 94 87 07 	call	0xf0e	; 0xf0e <HLCD_voidMoveCursor>
	            HLCD_voidSendString("set the time");								
     338:	c6 01       	movw	r24, r12
     33a:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
     33e:	17 c0       	rjmp	.+46     	; 0x36e <main+0x238>
				
			}
			else
			{
				HLCD_voidClearScreen();	
     340:	0e 94 7d 07 	call	0xefa	; 0xefa <HLCD_voidClearScreen>
				HLCD_voidSendString("Wrong choice");
     344:	c5 01       	movw	r24, r10
     346:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
				Delay_ms(1000);
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	8a e7       	ldi	r24, 0x7A	; 122
     350:	94 e4       	ldi	r25, 0x44	; 68
     352:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				HLCD_voidClearScreen();
     356:	0e 94 7d 07 	call	0xefa	; 0xefa <HLCD_voidClearScreen>
				HLCD_voidSendString("Press 1 to");
     35a:	c7 01       	movw	r24, r14
     35c:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
				HLCD_voidMoveCursor(2,1);
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	0e 94 87 07 	call	0xf0e	; 0xf0e <HLCD_voidMoveCursor>
				HLCD_voidSendString("set the time");				
     368:	c6 01       	movw	r24, r12
     36a:	0e 94 67 07 	call	0xece	; 0xece <HLCD_voidSendString>
			}
		}
		MDIO_voidSetPinValue(DIOC,1,HIGH);
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,2,HIGH);
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,3,HIGH);
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	63 e0       	ldi	r22, 0x03	; 3
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,4,HIGH);
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	64 e0       	ldi	r22, 0x04	; 4
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,5,HIGH);
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	65 e0       	ldi	r22, 0x05	; 5
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,0,LOW); // Activate first 7 segment
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		HSEVSEG_voidWrite(DIOB,Seconds_counter%10);
     3aa:	80 91 c0 00 	lds	r24, 0x00C0
     3ae:	6d 2f       	mov	r22, r29
     3b0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodqi4>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	69 2f       	mov	r22, r25
     3b8:	0e 94 ac 07 	call	0xf58	; 0xf58 <HSEVSEG_voidWrite>
		Delay_ms(5); // For multiplexing
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	80 ea       	ldi	r24, 0xA0	; 160
     3c2:	90 e4       	ldi	r25, 0x40	; 64
     3c4:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		
		MDIO_voidSetPinValue(DIOC,0,HIGH);
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,2,HIGH);
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,3,HIGH);
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	63 e0       	ldi	r22, 0x03	; 3
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,4,HIGH);
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	64 e0       	ldi	r22, 0x04	; 4
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,5,HIGH);
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	65 e0       	ldi	r22, 0x05	; 5
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,1,LOW); // Activate second 7 segment		
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
        HSEVSEG_voidWrite(DIOB,Seconds_counter/10);
     404:	80 91 c0 00 	lds	r24, 0x00C0
     408:	6d 2f       	mov	r22, r29
     40a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodqi4>
     40e:	68 2f       	mov	r22, r24
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 ac 07 	call	0xf58	; 0xf58 <HSEVSEG_voidWrite>
		Delay_ms(5); // For multiplexing
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 ea       	ldi	r24, 0xA0	; 160
     41c:	90 e4       	ldi	r25, 0x40	; 64
     41e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				
		MDIO_voidSetPinValue(DIOC,0,HIGH);
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,1,HIGH);
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,3,HIGH);
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	63 e0       	ldi	r22, 0x03	; 3
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,4,HIGH);
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	64 e0       	ldi	r22, 0x04	; 4
     444:	41 e0       	ldi	r20, 0x01	; 1
     446:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,5,HIGH);
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	65 e0       	ldi	r22, 0x05	; 5
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,2,LOW); // Activate third 7 segment
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		HSEVSEG_voidWrite(DIOB,Minutes_counter%10);
     45e:	80 91 bf 00 	lds	r24, 0x00BF
     462:	6d 2f       	mov	r22, r29
     464:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodqi4>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 2f       	mov	r22, r25
     46c:	0e 94 ac 07 	call	0xf58	; 0xf58 <HSEVSEG_voidWrite>
		Delay_ms(5); // For multiplexing
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 ea       	ldi	r24, 0xA0	; 160
     476:	90 e4       	ldi	r25, 0x40	; 64
     478:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		
		MDIO_voidSetPinValue(DIOC,0,HIGH);
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,1,HIGH);
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,2,HIGH);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	62 e0       	ldi	r22, 0x02	; 2
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,4,HIGH);
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	64 e0       	ldi	r22, 0x04	; 4
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,5,HIGH);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	65 e0       	ldi	r22, 0x05	; 5
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,3,LOW); // Activate fourth 7 segment
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	63 e0       	ldi	r22, 0x03	; 3
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		HSEVSEG_voidWrite(DIOB,Minutes_counter/10);
     4b8:	80 91 bf 00 	lds	r24, 0x00BF
     4bc:	6d 2f       	mov	r22, r29
     4be:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodqi4>
     4c2:	68 2f       	mov	r22, r24
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 ac 07 	call	0xf58	; 0xf58 <HSEVSEG_voidWrite>
		Delay_ms(5); // For multiplexing
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	80 ea       	ldi	r24, 0xA0	; 160
     4d0:	90 e4       	ldi	r25, 0x40	; 64
     4d2:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		
		MDIO_voidSetPinValue(DIOC,0,HIGH);
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,1,HIGH);
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,2,HIGH);
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,3,HIGH);
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	63 e0       	ldi	r22, 0x03	; 3
     4f8:	41 e0       	ldi	r20, 0x01	; 1
     4fa:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,5,HIGH);
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	65 e0       	ldi	r22, 0x05	; 5
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,4,LOW); // Activate fifth 7 segment
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	64 e0       	ldi	r22, 0x04	; 4
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		HSEVSEG_voidWrite(DIOB,Hours_counter%10);
     512:	80 91 be 00 	lds	r24, 0x00BE
     516:	6d 2f       	mov	r22, r29
     518:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodqi4>
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	69 2f       	mov	r22, r25
     520:	0e 94 ac 07 	call	0xf58	; 0xf58 <HSEVSEG_voidWrite>
		Delay_ms(5); // For multiplexing						
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	80 ea       	ldi	r24, 0xA0	; 160
     52a:	90 e4       	ldi	r25, 0x40	; 64
     52c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

		MDIO_voidSetPinValue(DIOC,0,HIGH);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,1,HIGH);
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,2,HIGH);
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	62 e0       	ldi	r22, 0x02	; 2
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,3,HIGH);
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	41 e0       	ldi	r20, 0x01	; 1
     554:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,4,HIGH);
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(DIOC,5,LOW); // Activate sixth 7 segment 
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	65 e0       	ldi	r22, 0x05	; 5
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
		HSEVSEG_voidWrite(DIOB,Hours_counter/10);
     56c:	80 91 be 00 	lds	r24, 0x00BE
     570:	6d 2f       	mov	r22, r29
     572:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodqi4>
     576:	68 2f       	mov	r22, r24
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 ac 07 	call	0xf58	; 0xf58 <HSEVSEG_voidWrite>
		Delay_ms(5); // For multiplexing
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	80 ea       	ldi	r24, 0xA0	; 160
     584:	90 e4       	ldi	r25, 0x40	; 64
     586:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		
		if (Seconds_counter>=60)
     58a:	80 91 c0 00 	lds	r24, 0x00C0
     58e:	8c 33       	cpi	r24, 0x3C	; 60
     590:	38 f0       	brcs	.+14     	; 0x5a0 <main+0x46a>
		{
			Seconds_counter=0;
     592:	10 92 c0 00 	sts	0x00C0, r1
			Minutes_counter++;
     596:	80 91 bf 00 	lds	r24, 0x00BF
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 bf 00 	sts	0x00BF, r24
		}
		if (Minutes_counter>=60)
     5a0:	80 91 bf 00 	lds	r24, 0x00BF
     5a4:	8c 33       	cpi	r24, 0x3C	; 60
     5a6:	38 f0       	brcs	.+14     	; 0x5b6 <main+0x480>
		{
			Minutes_counter=0;
     5a8:	10 92 bf 00 	sts	0x00BF, r1
			Hours_counter++;
     5ac:	80 91 be 00 	lds	r24, 0x00BE
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	80 93 be 00 	sts	0x00BE, r24
		}
		if (Hours_counter>=24)
     5b6:	80 91 be 00 	lds	r24, 0x00BE
     5ba:	88 31       	cpi	r24, 0x18	; 24
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <main+0x48a>
     5be:	15 ce       	rjmp	.-982    	; 0x1ea <main+0xb4>
		{
			Hours_counter=0;
     5c0:	10 92 be 00 	sts	0x00BE, r1
     5c4:	12 ce       	rjmp	.-988    	; 0x1ea <main+0xb4>

000005c6 <__vector_5>:
    }
}

void __vector_5(void)__attribute__((signal,used));
void __vector_5(void)
{
     5c6:	1f 92       	push	r1
     5c8:	0f 92       	push	r0
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	0f 92       	push	r0
     5ce:	11 24       	eor	r1, r1
     5d0:	8f 93       	push	r24
	Seconds_counter++;
     5d2:	80 91 c0 00 	lds	r24, 0x00C0
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	80 93 c0 00 	sts	0x00C0, r24
     5dc:	8f 91       	pop	r24
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <MDIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    switch(Copy_u8Port)
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	49 f1       	breq	.+82     	; 0x63e <MDIO_voidSetPinDirection+0x56>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	38 f0       	brcs	.+14     	; 0x5fe <MDIO_voidSetPinDirection+0x16>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <MDIO_voidSetPinDirection+0xe>
     5f4:	44 c0       	rjmp	.+136    	; 0x67e <MDIO_voidSetPinDirection+0x96>
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	09 f0       	breq	.+2      	; 0x5fc <MDIO_voidSetPinDirection+0x14>
     5fa:	7e c0       	rjmp	.+252    	; 0x6f8 <MDIO_voidSetPinDirection+0x110>
     5fc:	5f c0       	rjmp	.+190    	; 0x6bc <MDIO_voidSetPinDirection+0xd4>
	{
		case DIOA : 
		if (Copy_u8Direction==INPUT)
     5fe:	44 23       	and	r20, r20
     600:	71 f4       	brne	.+28     	; 0x61e <MDIO_voidSetPinDirection+0x36>
		{
			CLR_BIT(DDRA,Copy_u8Pin);
     602:	2a b3       	in	r18, 0x1a	; 26
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	ac 01       	movw	r20, r24
     60a:	02 c0       	rjmp	.+4      	; 0x610 <MDIO_voidSetPinDirection+0x28>
     60c:	44 0f       	add	r20, r20
     60e:	55 1f       	adc	r21, r21
     610:	6a 95       	dec	r22
     612:	e2 f7       	brpl	.-8      	; 0x60c <MDIO_voidSetPinDirection+0x24>
     614:	ba 01       	movw	r22, r20
     616:	60 95       	com	r22
     618:	62 23       	and	r22, r18
     61a:	6a bb       	out	0x1a, r22	; 26
     61c:	08 95       	ret
		} 
		else if (Copy_u8Direction==OUTPUT)
     61e:	41 30       	cpi	r20, 0x01	; 1
     620:	09 f0       	breq	.+2      	; 0x624 <MDIO_voidSetPinDirection+0x3c>
     622:	6a c0       	rjmp	.+212    	; 0x6f8 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRA,Copy_u8Pin);
     624:	2a b3       	in	r18, 0x1a	; 26
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	ac 01       	movw	r20, r24
     62c:	02 c0       	rjmp	.+4      	; 0x632 <MDIO_voidSetPinDirection+0x4a>
     62e:	44 0f       	add	r20, r20
     630:	55 1f       	adc	r21, r21
     632:	6a 95       	dec	r22
     634:	e2 f7       	brpl	.-8      	; 0x62e <MDIO_voidSetPinDirection+0x46>
     636:	ba 01       	movw	r22, r20
     638:	62 2b       	or	r22, r18
     63a:	6a bb       	out	0x1a, r22	; 26
     63c:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOB :
		if (Copy_u8Direction==INPUT)
     63e:	44 23       	and	r20, r20
     640:	71 f4       	brne	.+28     	; 0x65e <MDIO_voidSetPinDirection+0x76>
		{
			CLR_BIT(DDRB,Copy_u8Pin);
     642:	27 b3       	in	r18, 0x17	; 23
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	ac 01       	movw	r20, r24
     64a:	02 c0       	rjmp	.+4      	; 0x650 <MDIO_voidSetPinDirection+0x68>
     64c:	44 0f       	add	r20, r20
     64e:	55 1f       	adc	r21, r21
     650:	6a 95       	dec	r22
     652:	e2 f7       	brpl	.-8      	; 0x64c <MDIO_voidSetPinDirection+0x64>
     654:	ba 01       	movw	r22, r20
     656:	60 95       	com	r22
     658:	62 23       	and	r22, r18
     65a:	67 bb       	out	0x17, r22	; 23
     65c:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
     65e:	41 30       	cpi	r20, 0x01	; 1
     660:	09 f0       	breq	.+2      	; 0x664 <MDIO_voidSetPinDirection+0x7c>
     662:	4a c0       	rjmp	.+148    	; 0x6f8 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRB,Copy_u8Pin);
     664:	27 b3       	in	r18, 0x17	; 23
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	ac 01       	movw	r20, r24
     66c:	02 c0       	rjmp	.+4      	; 0x672 <MDIO_voidSetPinDirection+0x8a>
     66e:	44 0f       	add	r20, r20
     670:	55 1f       	adc	r21, r21
     672:	6a 95       	dec	r22
     674:	e2 f7       	brpl	.-8      	; 0x66e <MDIO_voidSetPinDirection+0x86>
     676:	ba 01       	movw	r22, r20
     678:	62 2b       	or	r22, r18
     67a:	67 bb       	out	0x17, r22	; 23
     67c:	08 95       	ret
			/* error */
		}
		break;
		
		case DIOC :
		if (Copy_u8Direction==INPUT)
     67e:	44 23       	and	r20, r20
     680:	71 f4       	brne	.+28     	; 0x69e <MDIO_voidSetPinDirection+0xb6>
		{
			CLR_BIT(DDRC,Copy_u8Pin);
     682:	24 b3       	in	r18, 0x14	; 20
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	ac 01       	movw	r20, r24
     68a:	02 c0       	rjmp	.+4      	; 0x690 <MDIO_voidSetPinDirection+0xa8>
     68c:	44 0f       	add	r20, r20
     68e:	55 1f       	adc	r21, r21
     690:	6a 95       	dec	r22
     692:	e2 f7       	brpl	.-8      	; 0x68c <MDIO_voidSetPinDirection+0xa4>
     694:	ba 01       	movw	r22, r20
     696:	60 95       	com	r22
     698:	62 23       	and	r22, r18
     69a:	64 bb       	out	0x14, r22	; 20
     69c:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
     69e:	41 30       	cpi	r20, 0x01	; 1
     6a0:	59 f5       	brne	.+86     	; 0x6f8 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRC,Copy_u8Pin);
     6a2:	24 b3       	in	r18, 0x14	; 20
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	ac 01       	movw	r20, r24
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <MDIO_voidSetPinDirection+0xc8>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	6a 95       	dec	r22
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <MDIO_voidSetPinDirection+0xc4>
     6b4:	ba 01       	movw	r22, r20
     6b6:	62 2b       	or	r22, r18
     6b8:	64 bb       	out	0x14, r22	; 20
     6ba:	08 95       	ret
			/* error */
		}
		break;
			
		case DIOD :
		if (Copy_u8Direction==INPUT)
     6bc:	44 23       	and	r20, r20
     6be:	71 f4       	brne	.+28     	; 0x6dc <MDIO_voidSetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,Copy_u8Pin);
     6c0:	21 b3       	in	r18, 0x11	; 17
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	ac 01       	movw	r20, r24
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <MDIO_voidSetPinDirection+0xe6>
     6ca:	44 0f       	add	r20, r20
     6cc:	55 1f       	adc	r21, r21
     6ce:	6a 95       	dec	r22
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <MDIO_voidSetPinDirection+0xe2>
     6d2:	ba 01       	movw	r22, r20
     6d4:	60 95       	com	r22
     6d6:	62 23       	and	r22, r18
     6d8:	61 bb       	out	0x11, r22	; 17
     6da:	08 95       	ret
		}
		else if (Copy_u8Direction==OUTPUT)
     6dc:	41 30       	cpi	r20, 0x01	; 1
     6de:	61 f4       	brne	.+24     	; 0x6f8 <MDIO_voidSetPinDirection+0x110>
		{
			SET_BIT(DDRD,Copy_u8Pin);
     6e0:	21 b3       	in	r18, 0x11	; 17
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	ac 01       	movw	r20, r24
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <MDIO_voidSetPinDirection+0x106>
     6ea:	44 0f       	add	r20, r20
     6ec:	55 1f       	adc	r21, r21
     6ee:	6a 95       	dec	r22
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <MDIO_voidSetPinDirection+0x102>
     6f2:	ba 01       	movw	r22, r20
     6f4:	62 2b       	or	r22, r18
     6f6:	61 bb       	out	0x11, r22	; 17
     6f8:	08 95       	ret

000006fa <MDIO_voidSetPortDirection>:
	}
}
void MDIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{

  switch(Copy_u8Port)
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	81 f0       	breq	.+32     	; 0x71e <MDIO_voidSetPortDirection+0x24>
     6fe:	81 30       	cpi	r24, 0x01	; 1
     700:	28 f0       	brcs	.+10     	; 0x70c <MDIO_voidSetPortDirection+0x12>
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	a9 f0       	breq	.+42     	; 0x730 <MDIO_voidSetPortDirection+0x36>
     706:	83 30       	cpi	r24, 0x03	; 3
     708:	21 f5       	brne	.+72     	; 0x752 <MDIO_voidSetPortDirection+0x58>
     70a:	1b c0       	rjmp	.+54     	; 0x742 <MDIO_voidSetPortDirection+0x48>
  {
	  case DIOA :
	  if (Copy_u8Direction==INPUT)
     70c:	66 23       	and	r22, r22
     70e:	11 f4       	brne	.+4      	; 0x714 <MDIO_voidSetPortDirection+0x1a>
	  {
		  DDRA=0x00;
     710:	1a ba       	out	0x1a, r1	; 26
     712:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     714:	61 30       	cpi	r22, 0x01	; 1
     716:	e9 f4       	brne	.+58     	; 0x752 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRA=0xFF;
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	8a bb       	out	0x1a, r24	; 26
     71c:	08 95       	ret
	  {
	    /* error */
	  }
	  break;
	  case DIOB :
	  if (Copy_u8Direction==INPUT)
     71e:	66 23       	and	r22, r22
     720:	11 f4       	brne	.+4      	; 0x726 <MDIO_voidSetPortDirection+0x2c>
	  {
		  DDRB=0x00;
     722:	17 ba       	out	0x17, r1	; 23
     724:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     726:	61 30       	cpi	r22, 0x01	; 1
     728:	a1 f4       	brne	.+40     	; 0x752 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRB=0xFF;
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	87 bb       	out	0x17, r24	; 23
     72e:	08 95       	ret
	  {
		  /* error */
	  }
	  break;	
	  case DIOC :
	  if (Copy_u8Direction==INPUT)
     730:	66 23       	and	r22, r22
     732:	11 f4       	brne	.+4      	; 0x738 <MDIO_voidSetPortDirection+0x3e>
	  {
		  DDRC=0x00;
     734:	14 ba       	out	0x14, r1	; 20
     736:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     738:	61 30       	cpi	r22, 0x01	; 1
     73a:	59 f4       	brne	.+22     	; 0x752 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRC=0xFF;
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	84 bb       	out	0x14, r24	; 20
     740:	08 95       	ret
	  {
		  /* error */
	  }
	  break;
	  case DIOD :
	  if (Copy_u8Direction==INPUT)
     742:	66 23       	and	r22, r22
     744:	11 f4       	brne	.+4      	; 0x74a <MDIO_voidSetPortDirection+0x50>
	  {
		  DDRD=0x00;
     746:	11 ba       	out	0x11, r1	; 17
     748:	08 95       	ret
	  }
	  else if (Copy_u8Direction==OUTPUT)
     74a:	61 30       	cpi	r22, 0x01	; 1
     74c:	11 f4       	brne	.+4      	; 0x752 <MDIO_voidSetPortDirection+0x58>
	  {
		  DDRD=0xFF;
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	81 bb       	out	0x11, r24	; 17
     752:	08 95       	ret

00000754 <MDIO_voidSetPinValue>:

}

void MDIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    switch(Copy_u8Port)
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	49 f1       	breq	.+82     	; 0x7aa <MDIO_voidSetPinValue+0x56>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	38 f0       	brcs	.+14     	; 0x76a <MDIO_voidSetPinValue+0x16>
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	09 f4       	brne	.+2      	; 0x762 <MDIO_voidSetPinValue+0xe>
     760:	44 c0       	rjmp	.+136    	; 0x7ea <MDIO_voidSetPinValue+0x96>
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	09 f0       	breq	.+2      	; 0x768 <MDIO_voidSetPinValue+0x14>
     766:	7e c0       	rjmp	.+252    	; 0x864 <__stack+0x5>
     768:	5f c0       	rjmp	.+190    	; 0x828 <MDIO_voidSetPinValue+0xd4>
    {
	    case DIOA :
	    if (Copy_u8Value==LOW)
     76a:	44 23       	and	r20, r20
     76c:	71 f4       	brne	.+28     	; 0x78a <MDIO_voidSetPinValue+0x36>
	    {
		    CLR_BIT(PORTA,Copy_u8Pin);
     76e:	2b b3       	in	r18, 0x1b	; 27
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	ac 01       	movw	r20, r24
     776:	02 c0       	rjmp	.+4      	; 0x77c <MDIO_voidSetPinValue+0x28>
     778:	44 0f       	add	r20, r20
     77a:	55 1f       	adc	r21, r21
     77c:	6a 95       	dec	r22
     77e:	e2 f7       	brpl	.-8      	; 0x778 <MDIO_voidSetPinValue+0x24>
     780:	ba 01       	movw	r22, r20
     782:	60 95       	com	r22
     784:	62 23       	and	r22, r18
     786:	6b bb       	out	0x1b, r22	; 27
     788:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     78a:	41 30       	cpi	r20, 0x01	; 1
     78c:	09 f0       	breq	.+2      	; 0x790 <MDIO_voidSetPinValue+0x3c>
     78e:	6a c0       	rjmp	.+212    	; 0x864 <__stack+0x5>
	    {
		    SET_BIT(PORTA,Copy_u8Pin);
     790:	2b b3       	in	r18, 0x1b	; 27
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	ac 01       	movw	r20, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <MDIO_voidSetPinValue+0x4a>
     79a:	44 0f       	add	r20, r20
     79c:	55 1f       	adc	r21, r21
     79e:	6a 95       	dec	r22
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <MDIO_voidSetPinValue+0x46>
     7a2:	ba 01       	movw	r22, r20
     7a4:	62 2b       	or	r22, r18
     7a6:	6b bb       	out	0x1b, r22	; 27
     7a8:	08 95       	ret
		    /* error */
	    }
	    break;
	    
	    case DIOB :
	    if (Copy_u8Value==LOW)
     7aa:	44 23       	and	r20, r20
     7ac:	71 f4       	brne	.+28     	; 0x7ca <MDIO_voidSetPinValue+0x76>
	    {
		    CLR_BIT(PORTB,Copy_u8Pin);
     7ae:	28 b3       	in	r18, 0x18	; 24
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	ac 01       	movw	r20, r24
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <MDIO_voidSetPinValue+0x68>
     7b8:	44 0f       	add	r20, r20
     7ba:	55 1f       	adc	r21, r21
     7bc:	6a 95       	dec	r22
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <MDIO_voidSetPinValue+0x64>
     7c0:	ba 01       	movw	r22, r20
     7c2:	60 95       	com	r22
     7c4:	62 23       	and	r22, r18
     7c6:	68 bb       	out	0x18, r22	; 24
     7c8:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     7ca:	41 30       	cpi	r20, 0x01	; 1
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <MDIO_voidSetPinValue+0x7c>
     7ce:	4a c0       	rjmp	.+148    	; 0x864 <__stack+0x5>
	    {
		    SET_BIT(PORTB,Copy_u8Pin);
     7d0:	28 b3       	in	r18, 0x18	; 24
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ac 01       	movw	r20, r24
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <MDIO_voidSetPinValue+0x8a>
     7da:	44 0f       	add	r20, r20
     7dc:	55 1f       	adc	r21, r21
     7de:	6a 95       	dec	r22
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <MDIO_voidSetPinValue+0x86>
     7e2:	ba 01       	movw	r22, r20
     7e4:	62 2b       	or	r22, r18
     7e6:	68 bb       	out	0x18, r22	; 24
     7e8:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOC :
	    if (Copy_u8Value==LOW)
     7ea:	44 23       	and	r20, r20
     7ec:	71 f4       	brne	.+28     	; 0x80a <MDIO_voidSetPinValue+0xb6>
	    {
		    CLR_BIT(PORTC,Copy_u8Pin);
     7ee:	25 b3       	in	r18, 0x15	; 21
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	ac 01       	movw	r20, r24
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <MDIO_voidSetPinValue+0xa8>
     7f8:	44 0f       	add	r20, r20
     7fa:	55 1f       	adc	r21, r21
     7fc:	6a 95       	dec	r22
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <MDIO_voidSetPinValue+0xa4>
     800:	ba 01       	movw	r22, r20
     802:	60 95       	com	r22
     804:	62 23       	and	r22, r18
     806:	65 bb       	out	0x15, r22	; 21
     808:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     80a:	41 30       	cpi	r20, 0x01	; 1
     80c:	59 f5       	brne	.+86     	; 0x864 <__stack+0x5>
	    {
		    SET_BIT(PORTC,Copy_u8Pin);
     80e:	25 b3       	in	r18, 0x15	; 21
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	ac 01       	movw	r20, r24
     816:	02 c0       	rjmp	.+4      	; 0x81c <MDIO_voidSetPinValue+0xc8>
     818:	44 0f       	add	r20, r20
     81a:	55 1f       	adc	r21, r21
     81c:	6a 95       	dec	r22
     81e:	e2 f7       	brpl	.-8      	; 0x818 <MDIO_voidSetPinValue+0xc4>
     820:	ba 01       	movw	r22, r20
     822:	62 2b       	or	r22, r18
     824:	65 bb       	out	0x15, r22	; 21
     826:	08 95       	ret
	    {
		    /* error */
	    }
	    break;
	    case DIOD :
	    if (Copy_u8Value==LOW)
     828:	44 23       	and	r20, r20
     82a:	71 f4       	brne	.+28     	; 0x848 <MDIO_voidSetPinValue+0xf4>
	    {
		    CLR_BIT(PORTD,Copy_u8Pin);
     82c:	22 b3       	in	r18, 0x12	; 18
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	ac 01       	movw	r20, r24
     834:	02 c0       	rjmp	.+4      	; 0x83a <MDIO_voidSetPinValue+0xe6>
     836:	44 0f       	add	r20, r20
     838:	55 1f       	adc	r21, r21
     83a:	6a 95       	dec	r22
     83c:	e2 f7       	brpl	.-8      	; 0x836 <MDIO_voidSetPinValue+0xe2>
     83e:	ba 01       	movw	r22, r20
     840:	60 95       	com	r22
     842:	62 23       	and	r22, r18
     844:	62 bb       	out	0x12, r22	; 18
     846:	08 95       	ret
	    }
	    else if (Copy_u8Value==HIGH)
     848:	41 30       	cpi	r20, 0x01	; 1
     84a:	61 f4       	brne	.+24     	; 0x864 <__stack+0x5>
	    {
		    SET_BIT(PORTD,Copy_u8Pin);
     84c:	22 b3       	in	r18, 0x12	; 18
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	ac 01       	movw	r20, r24
     854:	02 c0       	rjmp	.+4      	; 0x85a <MDIO_voidSetPinValue+0x106>
     856:	44 0f       	add	r20, r20
     858:	55 1f       	adc	r21, r21
     85a:	6a 95       	dec	r22
     85c:	e2 f7       	brpl	.-8      	; 0x856 <MDIO_voidSetPinValue+0x102>
     85e:	ba 01       	movw	r22, r20
     860:	62 2b       	or	r22, r18
     862:	62 bb       	out	0x12, r22	; 18
     864:	08 95       	ret

00000866 <MDIO_u8GetPinValue>:
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
	 switch(Copy_u8Port)
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	89 f0       	breq	.+34     	; 0x88c <MDIO_u8GetPinValue+0x26>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	28 f0       	brcs	.+10     	; 0x878 <MDIO_u8GetPinValue+0x12>
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	b9 f0       	breq	.+46     	; 0x8a0 <MDIO_u8GetPinValue+0x3a>
     872:	83 30       	cpi	r24, 0x03	; 3
     874:	49 f5       	brne	.+82     	; 0x8c8 <MDIO_u8GetPinValue+0x62>
     876:	1e c0       	rjmp	.+60     	; 0x8b4 <MDIO_u8GetPinValue+0x4e>
	 {
		 case DIOA :
		 Local_u8value=GET_BIT(PINA,Copy_u8Pin);
     878:	29 b3       	in	r18, 0x19	; 25
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	c9 01       	movw	r24, r18
     87e:	02 c0       	rjmp	.+4      	; 0x884 <MDIO_u8GetPinValue+0x1e>
     880:	95 95       	asr	r25
     882:	87 95       	ror	r24
     884:	6a 95       	dec	r22
     886:	e2 f7       	brpl	.-8      	; 0x880 <MDIO_u8GetPinValue+0x1a>
     888:	81 70       	andi	r24, 0x01	; 1
		 break;
     88a:	08 95       	ret
		 case DIOB :
		 Local_u8value=GET_BIT(PINB,Copy_u8Pin);
     88c:	26 b3       	in	r18, 0x16	; 22
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	c9 01       	movw	r24, r18
     892:	02 c0       	rjmp	.+4      	; 0x898 <MDIO_u8GetPinValue+0x32>
     894:	95 95       	asr	r25
     896:	87 95       	ror	r24
     898:	6a 95       	dec	r22
     89a:	e2 f7       	brpl	.-8      	; 0x894 <MDIO_u8GetPinValue+0x2e>
     89c:	81 70       	andi	r24, 0x01	; 1
		 break;
     89e:	08 95       	ret
		 case DIOC :
		 Local_u8value=GET_BIT(PINC,Copy_u8Pin);
     8a0:	23 b3       	in	r18, 0x13	; 19
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	c9 01       	movw	r24, r18
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <MDIO_u8GetPinValue+0x46>
     8a8:	95 95       	asr	r25
     8aa:	87 95       	ror	r24
     8ac:	6a 95       	dec	r22
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <MDIO_u8GetPinValue+0x42>
     8b0:	81 70       	andi	r24, 0x01	; 1
		 break;
     8b2:	08 95       	ret
		 case DIOD :
		 Local_u8value=GET_BIT(PIND,Copy_u8Pin);
     8b4:	20 b3       	in	r18, 0x10	; 16
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	c9 01       	movw	r24, r18
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <MDIO_u8GetPinValue+0x5a>
     8bc:	95 95       	asr	r25
     8be:	87 95       	ror	r24
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <MDIO_u8GetPinValue+0x56>
     8c4:	81 70       	andi	r24, 0x01	; 1
		 break;		 		 
     8c6:	08 95       	ret
	    
    }
}
u8 MDIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	 u8 Local_u8value=0;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
		 break;		 		 
		 default: break;
		 
	 }
	 return Local_u8value;
}
     8ca:	08 95       	ret

000008cc <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	switch(Copy_u8Port)
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	49 f0       	breq	.+18     	; 0x8e2 <MDIO_voidSetPortValue+0x16>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	28 f0       	brcs	.+10     	; 0x8de <MDIO_voidSetPortValue+0x12>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	39 f0       	breq	.+14     	; 0x8e6 <MDIO_voidSetPortValue+0x1a>
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	41 f4       	brne	.+16     	; 0x8ec <MDIO_voidSetPortValue+0x20>
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <MDIO_voidSetPortValue+0x1e>
	{
		case DIOA :
		PORTA=Copy_u8Value;
     8de:	6b bb       	out	0x1b, r22	; 27
		break;
     8e0:	08 95       	ret
		case DIOB :
		PORTB=Copy_u8Value;
     8e2:	68 bb       	out	0x18, r22	; 24
		break;	
     8e4:	08 95       	ret
		case DIOC :
		PORTC=Copy_u8Value;
     8e6:	65 bb       	out	0x15, r22	; 21
		break;
     8e8:	08 95       	ret
		case DIOD :
		PORTD=Copy_u8Value;
     8ea:	62 bb       	out	0x12, r22	; 18
     8ec:	08 95       	ret

000008ee <MDIO_voidTogglePin>:
	}
}

void MDIO_voidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	a1 f0       	breq	.+40     	; 0x91a <MDIO_voidTogglePin+0x2c>
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	28 f0       	brcs	.+10     	; 0x900 <MDIO_voidTogglePin+0x12>
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	e9 f0       	breq	.+58     	; 0x934 <MDIO_voidTogglePin+0x46>
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	a1 f5       	brne	.+104    	; 0x966 <MDIO_voidTogglePin+0x78>
     8fe:	27 c0       	rjmp	.+78     	; 0x94e <MDIO_voidTogglePin+0x60>
	{
		
		case DIOA :
		TOG_BIT(PORTA,Copy_u8Pin);
     900:	2b b3       	in	r18, 0x1b	; 27
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	ac 01       	movw	r20, r24
     908:	02 c0       	rjmp	.+4      	; 0x90e <MDIO_voidTogglePin+0x20>
     90a:	44 0f       	add	r20, r20
     90c:	55 1f       	adc	r21, r21
     90e:	6a 95       	dec	r22
     910:	e2 f7       	brpl	.-8      	; 0x90a <MDIO_voidTogglePin+0x1c>
     912:	ba 01       	movw	r22, r20
     914:	62 27       	eor	r22, r18
     916:	6b bb       	out	0x1b, r22	; 27
		break;
     918:	08 95       	ret
		case DIOB :
		TOG_BIT(PORTB,Copy_u8Pin);
     91a:	28 b3       	in	r18, 0x18	; 24
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	ac 01       	movw	r20, r24
     922:	02 c0       	rjmp	.+4      	; 0x928 <MDIO_voidTogglePin+0x3a>
     924:	44 0f       	add	r20, r20
     926:	55 1f       	adc	r21, r21
     928:	6a 95       	dec	r22
     92a:	e2 f7       	brpl	.-8      	; 0x924 <MDIO_voidTogglePin+0x36>
     92c:	ba 01       	movw	r22, r20
     92e:	62 27       	eor	r22, r18
     930:	68 bb       	out	0x18, r22	; 24
		break;
     932:	08 95       	ret
		case DIOC :
		TOG_BIT(PORTC,Copy_u8Pin);
     934:	25 b3       	in	r18, 0x15	; 21
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	ac 01       	movw	r20, r24
     93c:	02 c0       	rjmp	.+4      	; 0x942 <MDIO_voidTogglePin+0x54>
     93e:	44 0f       	add	r20, r20
     940:	55 1f       	adc	r21, r21
     942:	6a 95       	dec	r22
     944:	e2 f7       	brpl	.-8      	; 0x93e <MDIO_voidTogglePin+0x50>
     946:	ba 01       	movw	r22, r20
     948:	62 27       	eor	r22, r18
     94a:	65 bb       	out	0x15, r22	; 21
		break;
     94c:	08 95       	ret
		case DIOD :
		TOG_BIT(PORTD,Copy_u8Pin);
     94e:	22 b3       	in	r18, 0x12	; 18
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	ac 01       	movw	r20, r24
     956:	02 c0       	rjmp	.+4      	; 0x95c <MDIO_voidTogglePin+0x6e>
     958:	44 0f       	add	r20, r20
     95a:	55 1f       	adc	r21, r21
     95c:	6a 95       	dec	r22
     95e:	e2 f7       	brpl	.-8      	; 0x958 <MDIO_voidTogglePin+0x6a>
     960:	ba 01       	movw	r22, r20
     962:	62 27       	eor	r22, r18
     964:	62 bb       	out	0x12, r22	; 18
     966:	08 95       	ret

00000968 <MDIO_voidTogglePort>:
	}
}

void MDIO_voidTogglePort(u8 Copy_u8Port)
{
	    switch(Copy_u8Port)
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	59 f0       	breq	.+22     	; 0x982 <MDIO_voidTogglePort+0x1a>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	28 f0       	brcs	.+10     	; 0x97a <MDIO_voidTogglePort+0x12>
     970:	82 30       	cpi	r24, 0x02	; 2
     972:	59 f0       	breq	.+22     	; 0x98a <MDIO_voidTogglePort+0x22>
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	81 f4       	brne	.+32     	; 0x998 <MDIO_voidTogglePort+0x30>
     978:	0c c0       	rjmp	.+24     	; 0x992 <MDIO_voidTogglePort+0x2a>
		{
		case DIOA :
		PORTA=~PORTA;
     97a:	8b b3       	in	r24, 0x1b	; 27
     97c:	80 95       	com	r24
     97e:	8b bb       	out	0x1b, r24	; 27
		break;
     980:	08 95       	ret
		case DIOB :
		PORTB=~PORTB;
     982:	88 b3       	in	r24, 0x18	; 24
     984:	80 95       	com	r24
     986:	88 bb       	out	0x18, r24	; 24
		break;
     988:	08 95       	ret
		case DIOC :
		PORTC=~PORTC;
     98a:	85 b3       	in	r24, 0x15	; 21
     98c:	80 95       	com	r24
     98e:	85 bb       	out	0x15, r24	; 21
		break;
     990:	08 95       	ret
		case DIOD :
		PORTD=~PORTD;
     992:	82 b3       	in	r24, 0x12	; 18
     994:	80 95       	com	r24
     996:	82 bb       	out	0x12, r24	; 18
     998:	08 95       	ret

0000099a <MDIO_voidEnablePullUp>:
		}			
}

void MDIO_voidEnablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
	switch(Copy_u8Port)
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	a1 f0       	breq	.+40     	; 0x9c6 <MDIO_voidEnablePullUp+0x2c>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <MDIO_voidEnablePullUp+0x12>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	e9 f0       	breq	.+58     	; 0x9e0 <MDIO_voidEnablePullUp+0x46>
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	a1 f5       	brne	.+104    	; 0xa12 <MDIO_voidEnablePullUp+0x78>
     9aa:	27 c0       	rjmp	.+78     	; 0x9fa <MDIO_voidEnablePullUp+0x60>
	{
		case DIOA : 
		SET_BIT(PORTA,Copy_u8Pin);
     9ac:	2b b3       	in	r18, 0x1b	; 27
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	ac 01       	movw	r20, r24
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <MDIO_voidEnablePullUp+0x20>
     9b6:	44 0f       	add	r20, r20
     9b8:	55 1f       	adc	r21, r21
     9ba:	6a 95       	dec	r22
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <MDIO_voidEnablePullUp+0x1c>
     9be:	ba 01       	movw	r22, r20
     9c0:	62 2b       	or	r22, r18
     9c2:	6b bb       	out	0x1b, r22	; 27
		break;
     9c4:	08 95       	ret
		case DIOB :
		SET_BIT(PORTB,Copy_u8Pin);
     9c6:	28 b3       	in	r18, 0x18	; 24
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	ac 01       	movw	r20, r24
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <MDIO_voidEnablePullUp+0x3a>
     9d0:	44 0f       	add	r20, r20
     9d2:	55 1f       	adc	r21, r21
     9d4:	6a 95       	dec	r22
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <MDIO_voidEnablePullUp+0x36>
     9d8:	ba 01       	movw	r22, r20
     9da:	62 2b       	or	r22, r18
     9dc:	68 bb       	out	0x18, r22	; 24
		break;
     9de:	08 95       	ret
		case DIOC :
		SET_BIT(PORTC,Copy_u8Pin);
     9e0:	25 b3       	in	r18, 0x15	; 21
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	ac 01       	movw	r20, r24
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <MDIO_voidEnablePullUp+0x54>
     9ea:	44 0f       	add	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	6a 95       	dec	r22
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <MDIO_voidEnablePullUp+0x50>
     9f2:	ba 01       	movw	r22, r20
     9f4:	62 2b       	or	r22, r18
     9f6:	65 bb       	out	0x15, r22	; 21
		break;
     9f8:	08 95       	ret
		case DIOD :
		SET_BIT(PORTD,Copy_u8Pin);
     9fa:	22 b3       	in	r18, 0x12	; 18
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	ac 01       	movw	r20, r24
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <MDIO_voidEnablePullUp+0x6e>
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	6a 95       	dec	r22
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <MDIO_voidEnablePullUp+0x6a>
     a0c:	ba 01       	movw	r22, r20
     a0e:	62 2b       	or	r22, r18
     a10:	62 bb       	out	0x12, r22	; 18
     a12:	08 95       	ret

00000a14 <MDIO_voidDisablePullUp>:
	}
}

void MDIO_voidDisablePullUp(u8 Copy_u8Port,u8 Copy_u8Pin)
{
		switch(Copy_u8Port)
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	a9 f0       	breq	.+42     	; 0xa42 <MDIO_voidDisablePullUp+0x2e>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <MDIO_voidDisablePullUp+0x12>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	f9 f0       	breq	.+62     	; 0xa5e <MDIO_voidDisablePullUp+0x4a>
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	c1 f5       	brne	.+112    	; 0xa94 <MDIO_voidDisablePullUp+0x80>
     a24:	2a c0       	rjmp	.+84     	; 0xa7a <MDIO_voidDisablePullUp+0x66>
		{
			case DIOA :
			CLR_BIT(PORTA,Copy_u8Pin);
     a26:	2b b3       	in	r18, 0x1b	; 27
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	ac 01       	movw	r20, r24
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <MDIO_voidDisablePullUp+0x20>
     a30:	44 0f       	add	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <MDIO_voidDisablePullUp+0x1c>
     a38:	ba 01       	movw	r22, r20
     a3a:	60 95       	com	r22
     a3c:	62 23       	and	r22, r18
     a3e:	6b bb       	out	0x1b, r22	; 27
			break;
     a40:	08 95       	ret
			case DIOB :
			CLR_BIT(PORTB,Copy_u8Pin);
     a42:	28 b3       	in	r18, 0x18	; 24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	ac 01       	movw	r20, r24
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <MDIO_voidDisablePullUp+0x3c>
     a4c:	44 0f       	add	r20, r20
     a4e:	55 1f       	adc	r21, r21
     a50:	6a 95       	dec	r22
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <MDIO_voidDisablePullUp+0x38>
     a54:	ba 01       	movw	r22, r20
     a56:	60 95       	com	r22
     a58:	62 23       	and	r22, r18
     a5a:	68 bb       	out	0x18, r22	; 24
			break;
     a5c:	08 95       	ret
			case DIOC :
			CLR_BIT(PORTC,Copy_u8Pin);
     a5e:	25 b3       	in	r18, 0x15	; 21
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	ac 01       	movw	r20, r24
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <MDIO_voidDisablePullUp+0x58>
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	6a 95       	dec	r22
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <MDIO_voidDisablePullUp+0x54>
     a70:	ba 01       	movw	r22, r20
     a72:	60 95       	com	r22
     a74:	62 23       	and	r22, r18
     a76:	65 bb       	out	0x15, r22	; 21
			break;
     a78:	08 95       	ret
			case DIOD :
			CLR_BIT(PORTD,Copy_u8Pin);
     a7a:	22 b3       	in	r18, 0x12	; 18
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	ac 01       	movw	r20, r24
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <MDIO_voidDisablePullUp+0x74>
     a84:	44 0f       	add	r20, r20
     a86:	55 1f       	adc	r21, r21
     a88:	6a 95       	dec	r22
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <MDIO_voidDisablePullUp+0x70>
     a8c:	ba 01       	movw	r22, r20
     a8e:	60 95       	com	r22
     a90:	62 23       	and	r22, r18
     a92:	62 bb       	out	0x12, r22	; 18
     a94:	08 95       	ret

00000a96 <MDIO_voidWriteLowNibble>:
		}
}

void MDIO_voidWriteLowNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value&=0x0f;
     a96:	6f 70       	andi	r22, 0x0F	; 15
	switch(Copy_u8Port)
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	71 f0       	breq	.+28     	; 0xab8 <MDIO_voidWriteLowNibble+0x22>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	28 f0       	brcs	.+10     	; 0xaaa <MDIO_voidWriteLowNibble+0x14>
     aa0:	82 30       	cpi	r24, 0x02	; 2
     aa2:	89 f0       	breq	.+34     	; 0xac6 <MDIO_voidWriteLowNibble+0x30>
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	e1 f4       	brne	.+56     	; 0xae0 <MDIO_voidWriteLowNibble+0x4a>
     aa8:	15 c0       	rjmp	.+42     	; 0xad4 <MDIO_voidWriteLowNibble+0x3e>
	{
		case DIOA :
		PORTA&=0xf0;
     aaa:	8b b3       	in	r24, 0x1b	; 27
     aac:	80 7f       	andi	r24, 0xF0	; 240
     aae:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
     ab0:	8b b3       	in	r24, 0x1b	; 27
     ab2:	68 2b       	or	r22, r24
     ab4:	6b bb       	out	0x1b, r22	; 27
		break;
     ab6:	08 95       	ret
		case DIOB :
		PORTB&=0xf0;
     ab8:	88 b3       	in	r24, 0x18	; 24
     aba:	80 7f       	andi	r24, 0xF0	; 240
     abc:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
     abe:	88 b3       	in	r24, 0x18	; 24
     ac0:	68 2b       	or	r22, r24
     ac2:	68 bb       	out	0x18, r22	; 24
		break;
     ac4:	08 95       	ret
		case DIOC :
		PORTC&=0xf0;
     ac6:	85 b3       	in	r24, 0x15	; 21
     ac8:	80 7f       	andi	r24, 0xF0	; 240
     aca:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
     acc:	85 b3       	in	r24, 0x15	; 21
     ace:	68 2b       	or	r22, r24
     ad0:	65 bb       	out	0x15, r22	; 21
		break;
     ad2:	08 95       	ret
		case DIOD :
		PORTD&=0xf0;
     ad4:	82 b3       	in	r24, 0x12	; 18
     ad6:	80 7f       	andi	r24, 0xF0	; 240
     ad8:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
     ada:	82 b3       	in	r24, 0x12	; 18
     adc:	68 2b       	or	r22, r24
     ade:	62 bb       	out	0x12, r22	; 18
     ae0:	08 95       	ret

00000ae2 <MDIO_voidWriteHighNibble>:
	
}

void MDIO_voidWriteHighNibble(u8 Copy_u8Port,u8 Copy_u8Value)
{
	Copy_u8Value<<=4;
     ae2:	62 95       	swap	r22
     ae4:	60 7f       	andi	r22, 0xF0	; 240
	switch(Copy_u8Port)
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	71 f0       	breq	.+28     	; 0xb06 <MDIO_voidWriteHighNibble+0x24>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	28 f0       	brcs	.+10     	; 0xaf8 <MDIO_voidWriteHighNibble+0x16>
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	89 f0       	breq	.+34     	; 0xb14 <MDIO_voidWriteHighNibble+0x32>
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	e1 f4       	brne	.+56     	; 0xb2e <MDIO_voidWriteHighNibble+0x4c>
     af6:	15 c0       	rjmp	.+42     	; 0xb22 <MDIO_voidWriteHighNibble+0x40>
	{
		case DIOA :
		PORTA&=0x0f;
     af8:	8b b3       	in	r24, 0x1b	; 27
     afa:	8f 70       	andi	r24, 0x0F	; 15
     afc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=Copy_u8Value;
     afe:	8b b3       	in	r24, 0x1b	; 27
     b00:	68 2b       	or	r22, r24
     b02:	6b bb       	out	0x1b, r22	; 27
		break;
     b04:	08 95       	ret
		case DIOB :
		PORTB&=0x0f;
     b06:	88 b3       	in	r24, 0x18	; 24
     b08:	8f 70       	andi	r24, 0x0F	; 15
     b0a:	88 bb       	out	0x18, r24	; 24
		PORTB|=Copy_u8Value;
     b0c:	88 b3       	in	r24, 0x18	; 24
     b0e:	68 2b       	or	r22, r24
     b10:	68 bb       	out	0x18, r22	; 24
		break;
     b12:	08 95       	ret
		case DIOC :
		PORTC&=0x0f;
     b14:	85 b3       	in	r24, 0x15	; 21
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	85 bb       	out	0x15, r24	; 21
		PORTC|=Copy_u8Value;
     b1a:	85 b3       	in	r24, 0x15	; 21
     b1c:	68 2b       	or	r22, r24
     b1e:	65 bb       	out	0x15, r22	; 21
		break;
     b20:	08 95       	ret
		case DIOD :
		PORTD&=0x0f;
     b22:	82 b3       	in	r24, 0x12	; 18
     b24:	8f 70       	andi	r24, 0x0F	; 15
     b26:	82 bb       	out	0x12, r24	; 18
		PORTD|=Copy_u8Value;
     b28:	82 b3       	in	r24, 0x12	; 18
     b2a:	68 2b       	or	r22, r24
     b2c:	62 bb       	out	0x12, r22	; 18
     b2e:	08 95       	ret

00000b30 <MINT_voidSetGlobalInterrupt>:

#include "Interupt_interface.h"
#include "Interrupt_private.h"
void MINT_voidSetGlobalInterrupt(void)
{
	SET_BIT(SREG,7);
     b30:	8f b7       	in	r24, 0x3f	; 63
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	8f bf       	out	0x3f, r24	; 63
}
     b36:	08 95       	ret

00000b38 <MINT_voidClrGlobalInterrupt>:

void MINT_voidClrGlobalInterrupt(void)
{
	CLR_BIT(SREG,7);
     b38:	8f b7       	in	r24, 0x3f	; 63
     b3a:	8f 77       	andi	r24, 0x7F	; 127
     b3c:	8f bf       	out	0x3f, r24	; 63
}
     b3e:	08 95       	ret

00000b40 <MINT_voidEnableExtInterrupt>:

void MINT_voidEnableExtInterrupt(u8 Copy_u8INTNumber)
{
	switch(Copy_u8INTNumber)
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	49 f0       	breq	.+18     	; 0xb56 <MINT_voidEnableExtInterrupt+0x16>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	18 f0       	brcs	.+6      	; 0xb4e <MINT_voidEnableExtInterrupt+0xe>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	61 f4       	brne	.+24     	; 0xb64 <MINT_voidEnableExtInterrupt+0x24>
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <MINT_voidEnableExtInterrupt+0x1e>
	{
		case 0 : SET_BIT(GICR,6); break;
     b4e:	8b b7       	in	r24, 0x3b	; 59
     b50:	80 64       	ori	r24, 0x40	; 64
     b52:	8b bf       	out	0x3b, r24	; 59
     b54:	08 95       	ret
		case 1 : SET_BIT(GICR,7); break;
     b56:	8b b7       	in	r24, 0x3b	; 59
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8b bf       	out	0x3b, r24	; 59
     b5c:	08 95       	ret
		case 2 : SET_BIT(GICR,5); break;
     b5e:	8b b7       	in	r24, 0x3b	; 59
     b60:	80 62       	ori	r24, 0x20	; 32
     b62:	8b bf       	out	0x3b, r24	; 59
     b64:	08 95       	ret

00000b66 <MINT_voidDisableExtInterrupt>:
		default: break;
	}
}
void MINT_voidDisableExtInterrupt(u8 Copy_u8INTNumber)
{
		switch(Copy_u8INTNumber)
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	49 f0       	breq	.+18     	; 0xb7c <MINT_voidDisableExtInterrupt+0x16>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	18 f0       	brcs	.+6      	; 0xb74 <MINT_voidDisableExtInterrupt+0xe>
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	61 f4       	brne	.+24     	; 0xb8a <MINT_voidDisableExtInterrupt+0x24>
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <MINT_voidDisableExtInterrupt+0x1e>
		{
			case 0 : CLR_BIT(GICR,6); break;
     b74:	8b b7       	in	r24, 0x3b	; 59
     b76:	8f 7b       	andi	r24, 0xBF	; 191
     b78:	8b bf       	out	0x3b, r24	; 59
     b7a:	08 95       	ret
			case 1 : CLR_BIT(GICR,7); break;
     b7c:	8b b7       	in	r24, 0x3b	; 59
     b7e:	8f 77       	andi	r24, 0x7F	; 127
     b80:	8b bf       	out	0x3b, r24	; 59
     b82:	08 95       	ret
			case 2 : CLR_BIT(GICR,5); break;
     b84:	8b b7       	in	r24, 0x3b	; 59
     b86:	8f 7d       	andi	r24, 0xDF	; 223
     b88:	8b bf       	out	0x3b, r24	; 59
     b8a:	08 95       	ret

00000b8c <MINT_voidSetSenseControlMode>:
			default: break;
		}
}
void MINT_voidSetSenseControlMode(u8 Copy_u8INTNumber,u8 Copy_u8Mode)
{
	if (Copy_u8INTNumber==0)
     b8c:	88 23       	and	r24, r24
     b8e:	31 f5       	brne	.+76     	; 0xbdc <MINT_voidSetSenseControlMode+0x50>
	{
		switch(Copy_u8Mode)
     b90:	61 30       	cpi	r22, 0x01	; 1
     b92:	79 f0       	breq	.+30     	; 0xbb2 <MINT_voidSetSenseControlMode+0x26>
     b94:	61 30       	cpi	r22, 0x01	; 1
     b96:	30 f0       	brcs	.+12     	; 0xba4 <MINT_voidSetSenseControlMode+0x18>
     b98:	62 30       	cpi	r22, 0x02	; 2
     b9a:	91 f0       	breq	.+36     	; 0xbc0 <MINT_voidSetSenseControlMode+0x34>
     b9c:	63 30       	cpi	r22, 0x03	; 3
     b9e:	09 f0       	breq	.+2      	; 0xba2 <MINT_voidSetSenseControlMode+0x16>
     ba0:	52 c0       	rjmp	.+164    	; 0xc46 <MINT_voidSetSenseControlMode+0xba>
     ba2:	15 c0       	rjmp	.+42     	; 0xbce <MINT_voidSetSenseControlMode+0x42>
		{
			case LOW_LEVEL_SENSE_MODE : 
			CLR_BIT(MCUCR,0);
     ba4:	85 b7       	in	r24, 0x35	; 53
     ba6:	8e 7f       	andi	r24, 0xFE	; 254
     ba8:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
     baa:	85 b7       	in	r24, 0x35	; 53
     bac:	8d 7f       	andi	r24, 0xFD	; 253
     bae:	85 bf       	out	0x35, r24	; 53
			break;
     bb0:	08 95       	ret
			case ANY_LOGICAL_CHANGE_MODE :
			SET_BIT(MCUCR,0);
     bb2:	85 b7       	in	r24, 0x35	; 53
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
     bb8:	85 b7       	in	r24, 0x35	; 53
     bba:	8d 7f       	andi	r24, 0xFD	; 253
     bbc:	85 bf       	out	0x35, r24	; 53
			break;			
     bbe:	08 95       	ret
			case FALLING_EDGE_MODE :
			CLR_BIT(MCUCR,0);
     bc0:	85 b7       	in	r24, 0x35	; 53
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
     bc6:	85 b7       	in	r24, 0x35	; 53
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	85 bf       	out	0x35, r24	; 53
			break;
     bcc:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCR,0);
     bce:	85 b7       	in	r24, 0x35	; 53
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
     bd4:	85 b7       	in	r24, 0x35	; 53
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	85 bf       	out	0x35, r24	; 53
			break;
     bda:	08 95       	ret
			default: break;					
		}
	}
	else if (Copy_u8INTNumber==1)
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	29 f5       	brne	.+74     	; 0xc2a <MINT_voidSetSenseControlMode+0x9e>
	{
		switch(Copy_u8Mode)
     be0:	61 30       	cpi	r22, 0x01	; 1
     be2:	71 f0       	breq	.+28     	; 0xc00 <MINT_voidSetSenseControlMode+0x74>
     be4:	61 30       	cpi	r22, 0x01	; 1
     be6:	28 f0       	brcs	.+10     	; 0xbf2 <MINT_voidSetSenseControlMode+0x66>
     be8:	62 30       	cpi	r22, 0x02	; 2
     bea:	89 f0       	breq	.+34     	; 0xc0e <MINT_voidSetSenseControlMode+0x82>
     bec:	63 30       	cpi	r22, 0x03	; 3
     bee:	59 f5       	brne	.+86     	; 0xc46 <MINT_voidSetSenseControlMode+0xba>
     bf0:	15 c0       	rjmp	.+42     	; 0xc1c <MINT_voidSetSenseControlMode+0x90>
		{
			case LOW_LEVEL_SENSE_MODE :
			CLR_BIT(MCUCR,2);
     bf2:	85 b7       	in	r24, 0x35	; 53
     bf4:	8b 7f       	andi	r24, 0xFB	; 251
     bf6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
     bf8:	85 b7       	in	r24, 0x35	; 53
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	85 bf       	out	0x35, r24	; 53
			break;
     bfe:	08 95       	ret
			case ANY_LOGICAL_CHANGE_MODE :
			SET_BIT(MCUCR,2);
     c00:	85 b7       	in	r24, 0x35	; 53
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
     c06:	85 b7       	in	r24, 0x35	; 53
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	85 bf       	out	0x35, r24	; 53
			break;
     c0c:	08 95       	ret
			case FALLING_EDGE_MODE :
			CLR_BIT(MCUCR,2);
     c0e:	85 b7       	in	r24, 0x35	; 53
     c10:	8b 7f       	andi	r24, 0xFB	; 251
     c12:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
     c14:	85 b7       	in	r24, 0x35	; 53
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	85 bf       	out	0x35, r24	; 53
			break;
     c1a:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCR,2);
     c1c:	85 b7       	in	r24, 0x35	; 53
     c1e:	84 60       	ori	r24, 0x04	; 4
     c20:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
     c22:	85 b7       	in	r24, 0x35	; 53
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	85 bf       	out	0x35, r24	; 53
			break;
     c28:	08 95       	ret
			default: break;
		}		

	}
	else if (Copy_u8INTNumber==2)
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	61 f4       	brne	.+24     	; 0xc46 <MINT_voidSetSenseControlMode+0xba>
	{
		switch(Copy_u8Mode)
     c2e:	62 30       	cpi	r22, 0x02	; 2
     c30:	19 f0       	breq	.+6      	; 0xc38 <MINT_voidSetSenseControlMode+0xac>
     c32:	63 30       	cpi	r22, 0x03	; 3
     c34:	41 f4       	brne	.+16     	; 0xc46 <MINT_voidSetSenseControlMode+0xba>
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <MINT_voidSetSenseControlMode+0xb4>
		{
			case FALLING_EDGE_MODE : 
			CLR_BIT(MCUCSR,6);
     c38:	84 b7       	in	r24, 0x34	; 52
     c3a:	8f 7b       	andi	r24, 0xBF	; 191
     c3c:	84 bf       	out	0x34, r24	; 52
			break;
     c3e:	08 95       	ret
			case RISING_EDGE_MODE :
			SET_BIT(MCUCSR,6);
     c40:	84 b7       	in	r24, 0x34	; 52
     c42:	80 64       	ori	r24, 0x40	; 64
     c44:	84 bf       	out	0x34, r24	; 52
     c46:	08 95       	ret

00000c48 <HKEYPAD_voidInit>:


void HKEYPAD_voidInit(void)
{
   /* define first four pins as output pins */
   MDIO_voidSetPinDirection(KEYPAD_PORT,0,OUTPUT);	
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	41 e0       	ldi	r20, 0x01	; 1
     c4e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,1,OUTPUT);
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,2,OUTPUT);
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	62 e0       	ldi	r22, 0x02	; 2
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,3,OUTPUT);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	63 e0       	ldi	r22, 0x03	; 3
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   /* define second four pins as input pins */
   MDIO_voidSetPinDirection(KEYPAD_PORT,4,INPUT);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,5,INPUT);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	65 e0       	ldi	r22, 0x05	; 5
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,6,INPUT);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	66 e0       	ldi	r22, 0x06	; 6
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(KEYPAD_PORT,7,INPUT); 
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	67 e0       	ldi	r22, 0x07	; 7
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   /* Enable internal pull up for input pins */
   MDIO_voidEnablePullUp(KEYPAD_PORT,4);  
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	64 e0       	ldi	r22, 0x04	; 4
     c9c:	0e 94 cd 04 	call	0x99a	; 0x99a <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,5); 
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	65 e0       	ldi	r22, 0x05	; 5
     ca4:	0e 94 cd 04 	call	0x99a	; 0x99a <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,6); 
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	66 e0       	ldi	r22, 0x06	; 6
     cac:	0e 94 cd 04 	call	0x99a	; 0x99a <MDIO_voidEnablePullUp>
   MDIO_voidEnablePullUp(KEYPAD_PORT,7); 
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	67 e0       	ldi	r22, 0x07	; 7
     cb4:	0e 94 cd 04 	call	0x99a	; 0x99a <MDIO_voidEnablePullUp>
}
     cb8:	08 95       	ret

00000cba <HKEYPAD_u8Read>:

u8 HKEYPAD_u8Read(void)
{
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	60 97       	sbiw	r28, 0x10	; 16
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     cd2:	de 01       	movw	r26, r28
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	e4 ea       	ldi	r30, 0xA4	; 164
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 e1       	ldi	r24, 0x10	; 16
     cdc:	01 90       	ld	r0, Z+
     cde:	0d 92       	st	X+, r0
     ce0:	81 50       	subi	r24, 0x01	; 1
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <HKEYPAD_u8Read+0x22>
 u8 row,coloumn,x;
 u8 returnval=0xff;
 for(row=0;row<4;row++)
     ce4:	00 e0       	ldi	r16, 0x00	; 0
 {
	 MDIO_voidSetPinValue(DIOD,0,1);
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,1,1);
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,2,1);
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	62 e0       	ldi	r22, 0x02	; 2
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,3,1);
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(DIOD,row,0);
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	60 2f       	mov	r22, r16
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	 
	 for(coloumn=0;coloumn<4;coloumn++)
     d18:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 x=MDIO_u8GetPinValue(DIOD,(coloumn+4));
     d1a:	61 2f       	mov	r22, r17
     d1c:	6c 5f       	subi	r22, 0xFC	; 252
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	0e 94 33 04 	call	0x866	; 0x866 <MDIO_u8GetPinValue>
		 if(x==0)
     d24:	88 23       	and	r24, r24
     d26:	61 f4       	brne	.+24     	; 0xd40 <HKEYPAD_u8Read+0x86>
		 {
			 returnval=arr[row][coloumn];
     d28:	e0 2f       	mov	r30, r16
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e1 0f       	add	r30, r17
     d36:	f1 1d       	adc	r31, r1
     d38:	ec 0f       	add	r30, r28
     d3a:	fd 1f       	adc	r31, r29
     d3c:	81 81       	ldd	r24, Z+1	; 0x01
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <HKEYPAD_u8Read+0x8e>
	 MDIO_voidSetPinValue(DIOD,1,1);
	 MDIO_voidSetPinValue(DIOD,2,1);
	 MDIO_voidSetPinValue(DIOD,3,1);
	 MDIO_voidSetPinValue(DIOD,row,0);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
     d40:	1f 5f       	subi	r17, 0xFF	; 255
     d42:	14 30       	cpi	r17, 0x04	; 4
     d44:	51 f7       	brne	.-44     	; 0xd1a <HKEYPAD_u8Read+0x60>
     d46:	0b c0       	rjmp	.+22     	; 0xd5e <HKEYPAD_u8Read+0xa4>
		 break;
	 }
 }
 return returnval ;
		
     d48:	60 96       	adiw	r28, 0x10	; 16
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	08 95       	ret
u8 HKEYPAD_u8Read(void)
{
 u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 u8 row,coloumn,x;
 u8 returnval=0xff;
 for(row=0;row<4;row++)
     d5e:	0f 5f       	subi	r16, 0xFF	; 255
     d60:	04 30       	cpi	r16, 0x04	; 4
     d62:	09 f6       	brne	.-126    	; 0xce6 <HKEYPAD_u8Read+0x2c>
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	f0 cf       	rjmp	.-32     	; 0xd48 <HKEYPAD_u8Read+0x8e>

00000d68 <HLCD_voidSendFallingEdge>:
   #endif
   
}

 void HLCD_voidSendFallingEdge(u8 Copy_u8Port)
{
     d68:	cf 93       	push	r28
     d6a:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(Copy_u8Port,EN,HIGH);
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	Delay_ms(4);
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	90 e4       	ldi	r25, 0x40	; 64
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	MDIO_voidSetPinValue(Copy_u8Port,EN,LOW);
     d80:	8c 2f       	mov	r24, r28
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	Delay_ms(4);	
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e8       	ldi	r24, 0x80	; 128
     d90:	90 e4       	ldi	r25, 0x40	; 64
     d92:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8Command)
{
     d9a:	cf 93       	push	r28
     d9c:	c8 2f       	mov	r28, r24
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Command);
	MDIO_voidSetPinValue(DIOB,RS,LOW);
	HLCD_voidSendFallingEdge(DIOB);
	
	#else LCD_MODE == FOUR_BITS_MODE
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Command>>4);
     d9e:	68 2f       	mov	r22, r24
     da0:	62 95       	swap	r22
     da2:	6f 70       	andi	r22, 0x0F	; 15
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	0e 94 71 05 	call	0xae2	; 0xae2 <MDIO_voidWriteHighNibble>
	MDIO_voidSetPinValue(DIOA,RS,LOW);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOA);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 b4 06 	call	0xd68	; 0xd68 <HLCD_voidSendFallingEdge>
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Command);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	6c 2f       	mov	r22, r28
     dbe:	0e 94 71 05 	call	0xae2	; 0xae2 <MDIO_voidWriteHighNibble>
	HLCD_voidSendFallingEdge(DIOA);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0e 94 b4 06 	call	0xd68	; 0xd68 <HLCD_voidSendFallingEdge>
	Delay_ms(2);
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e4       	ldi	r25, 0x40	; 64
     dd0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	#endif
}
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <HLCD_voidInit>:
#include "LCD_config.h"

void HLCD_voidInit(void)
{
	/* WAIT 400MS */
	Delay_ms(400);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	93 e4       	ldi	r25, 0x43	; 67
     de0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/* define EN , RS , RW as output pins */
    MDIO_voidSetPinDirection(DIOA,EN,OUTPUT);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOA,RS,OUTPUT);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	41 e0       	ldi	r20, 0x01	; 1
     df4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOA,RW,OUTPUT);
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	62 e0       	ldi	r22, 0x02	; 2
     dfc:	41 e0       	ldi	r20, 0x01	; 1
     dfe:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   Delay_ms(20);
   HLCD_voidSendCommand(ENTRY_MODE_CMD);
   Delay_ms(4);  
 
   #else LCD_MODE == FOUR_BITS_MODE
   MDIO_voidSetPinDirection(LCD_PORT,4,OUTPUT);
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	64 e0       	ldi	r22, 0x04	; 4
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(LCD_PORT,5,OUTPUT);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	65 e0       	ldi	r22, 0x05	; 5
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(LCD_PORT,6,OUTPUT);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	66 e0       	ldi	r22, 0x06	; 6
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinDirection(LCD_PORT,7,OUTPUT);
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	67 e0       	ldi	r22, 0x07	; 7
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
   MDIO_voidSetPinValue(DIOA,RW,LOW); // set RW BIN WITH 0 TO WRITE
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	62 e0       	ldi	r22, 0x02	; 2
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
   HLCD_voidSendCommand(RETURN_HOME_CMD);
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
   Delay_ms(20);
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 ea       	ldi	r24, 0xA0	; 160
     e40:	91 e4       	ldi	r25, 0x41	; 65
     e42:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(FOUR_BITS_CMD);
     e46:	88 e2       	ldi	r24, 0x28	; 40
     e48:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
   Delay_ms(4);
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e8       	ldi	r24, 0x80	; 128
     e52:	90 e4       	ldi	r25, 0x40	; 64
     e54:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(DISPLAY_ON_CURSOR_ON);
     e58:	8e e0       	ldi	r24, 0x0E	; 14
     e5a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
   Delay_ms(4);
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	90 e4       	ldi	r25, 0x40	; 64
     e66:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(CLR_SCREEN_CMD);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
   Delay_ms(20);
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 ea       	ldi	r24, 0xA0	; 160
     e76:	91 e4       	ldi	r25, 0x41	; 65
     e78:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   HLCD_voidSendCommand(ENTRY_MODE_CMD);
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
   Delay_ms(4);
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	90 e4       	ldi	r25, 0x40	; 64
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
   
   
   #endif
   
}
     e8e:	08 95       	ret

00000e90 <HLCD_voidSendChar>:
	Delay_ms(2);
	#endif
}

void HLCD_voidSendChar(u8 Copy_u8Char)
{
     e90:	cf 93       	push	r28
     e92:	c8 2f       	mov	r28, r24
	MDIO_voidSetPortValue(LCD_PORT,Copy_u8Char); // Write char on port
	MDIO_voidSetPinValue(DIOB,RS,HIGH);      // set RS pin to write data
	HLCD_voidSendFallingEdge(DIOB);    // enable LCD
	
	#else LCD_MODE== FOUR_BITS_MODE
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Char>>4);
     e94:	68 2f       	mov	r22, r24
     e96:	62 95       	swap	r22
     e98:	6f 70       	andi	r22, 0x0F	; 15
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	0e 94 71 05 	call	0xae2	; 0xae2 <MDIO_voidWriteHighNibble>
	MDIO_voidSetPinValue(LCD_PORT,RS,HIGH);      // set RS pin to write data
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	0e 94 aa 03 	call	0x754	; 0x754 <MDIO_voidSetPinValue>
	HLCD_voidSendFallingEdge(DIOA);
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	0e 94 b4 06 	call	0xd68	; 0xd68 <HLCD_voidSendFallingEdge>
	MDIO_voidWriteHighNibble(LCD_PORT,Copy_u8Char);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	6c 2f       	mov	r22, r28
     eb4:	0e 94 71 05 	call	0xae2	; 0xae2 <MDIO_voidWriteHighNibble>
	HLCD_voidSendFallingEdge(DIOA);	
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 b4 06 	call	0xd68	; 0xd68 <HLCD_voidSendFallingEdge>
	Delay_ms(2);
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e4       	ldi	r25, 0x40	; 64
     ec6:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	#endif
	
}
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8pString)
{
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	8c 01       	movw	r16, r24
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	51 f0       	breq	.+20     	; 0xef2 <HLCD_voidSendString+0x24>
     ede:	c0 e0       	ldi	r28, 0x00	; 0
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
     ee0:	0e 94 48 07 	call	0xe90	; 0xe90 <HLCD_voidSendChar>
}

void HLCD_voidSendString(u8 *Copy_u8pString)
{
	u8 Local_u8Counter;
	for (Local_u8Counter=0;Copy_u8pString[Local_u8Counter]!='\0';Local_u8Counter++)
     ee4:	cf 5f       	subi	r28, 0xFF	; 255
     ee6:	f8 01       	movw	r30, r16
     ee8:	ec 0f       	add	r30, r28
     eea:	f1 1d       	adc	r31, r1
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	b9 f7       	brne	.-18     	; 0xee0 <HLCD_voidSendString+0x12>
	{
		HLCD_voidSendChar(Copy_u8pString[Local_u8Counter]);
	}
}
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <HLCD_voidClearScreen>:

void HLCD_voidClearScreen(void)
{
	HLCD_voidSendCommand(CLR_SCREEN_CMD);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
	Delay_ms(20);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 ea       	ldi	r24, 0xA0	; 160
     f06:	91 e4       	ldi	r25, 0x41	; 65
     f08:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     f0c:	08 95       	ret

00000f0e <HLCD_voidMoveCursor>:

void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
     f0e:	28 2f       	mov	r18, r24
     f10:	21 50       	subi	r18, 0x01	; 1
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	70 f4       	brcc	.+28     	; 0xf32 <HLCD_voidMoveCursor+0x24>
     f16:	66 23       	and	r22, r22
     f18:	71 f0       	breq	.+28     	; 0xf36 <HLCD_voidMoveCursor+0x28>
     f1a:	61 31       	cpi	r22, 0x11	; 17
     f1c:	70 f4       	brcc	.+28     	; 0xf3a <HLCD_voidMoveCursor+0x2c>
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
	}
	else if(Copy_u8Row==1)
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	19 f4       	brne	.+6      	; 0xf28 <HLCD_voidMoveCursor+0x1a>
	{
		Local_u8ReqLocation=0x80+Copy_u8Col-1;
     f22:	96 2f       	mov	r25, r22
     f24:	91 58       	subi	r25, 0x81	; 129
     f26:	0a c0       	rjmp	.+20     	; 0xf3c <HLCD_voidMoveCursor+0x2e>
	}
	else if (Copy_u8Row==2)
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	41 f4       	brne	.+16     	; 0xf3c <HLCD_voidMoveCursor+0x2e>
	{
		Local_u8ReqLocation=0xc0+Copy_u8Col-1;
     f2c:	96 2f       	mov	r25, r22
     f2e:	91 54       	subi	r25, 0x41	; 65
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <HLCD_voidMoveCursor+0x2e>
void HLCD_voidMoveCursor(u8 Copy_u8Row,u8 Copy_u8Col)
{
	u8 Local_u8ReqLocation;
	if(Copy_u8Row<1 || Copy_u8Row>2 || Copy_u8Col<1 ||Copy_u8Col>16)
	{
		Local_u8ReqLocation=0x80; // put the cursor on the first line
     f32:	90 e8       	ldi	r25, 0x80	; 128
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <HLCD_voidMoveCursor+0x2e>
     f36:	90 e8       	ldi	r25, 0x80	; 128
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <HLCD_voidMoveCursor+0x2e>
     f3a:	90 e8       	ldi	r25, 0x80	; 128
	}
	else
	{
		// do nothing
	}
	HLCD_voidSendCommand(Local_u8ReqLocation);
     f3c:	89 2f       	mov	r24, r25
     f3e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <HLCD_voidSendCommand>
	Delay_ms(2);
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e4       	ldi	r25, 0x40	; 64
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	
     f4e:	08 95       	ret

00000f50 <HSEVSEG_voidInit>:
#include "DIO_interface.h"
#include "Sevensegment_interface.h"
#include "Sevensegment_config.h"
void HSEVSEG_voidInit(u8 Copy_u8Port)
{
	MDIO_voidSetPortDirection(Copy_u8Port,OUTPUT);
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 7d 03 	call	0x6fa	; 0x6fa <MDIO_voidSetPortDirection>
}
     f56:	08 95       	ret

00000f58 <HSEVSEG_voidWrite>:

void HSEVSEG_voidWrite(u8 Copy_u8Port,u8 Copy_u8Value)
{
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	2a 97       	sbiw	r28, 0x0a	; 10
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
 #if   SEVEN_SEG_TYPE == SEVEN_SEGMENT_CC 
 u8 numbers[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
     f6c:	de 01       	movw	r26, r28
     f6e:	11 96       	adiw	r26, 0x01	; 1
     f70:	e4 eb       	ldi	r30, 0xB4	; 180
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	9a e0       	ldi	r25, 0x0A	; 10
     f76:	01 90       	ld	r0, Z+
     f78:	0d 92       	st	X+, r0
     f7a:	91 50       	subi	r25, 0x01	; 1
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <HSEVSEG_voidWrite+0x1e>
 MDIO_voidSetPortValue(Copy_u8Port,numbers[Copy_u8Value]);
     f7e:	fe 01       	movw	r30, r28
     f80:	e6 0f       	add	r30, r22
     f82:	f1 1d       	adc	r31, r1
     f84:	61 81       	ldd	r22, Z+1	; 0x01
     f86:	0e 94 66 04 	call	0x8cc	; 0x8cc <MDIO_voidSetPortValue>
 #elif SEVEN_SEG_TYPE == SEVEN_SEGMENT_CA
 u8 numbers[10]={~0x3f,~0x06,~0x5b,~0x4f,~0x66,~0x6d,~0x7d,~0x47,~0x7f,~0x6f};
 MDIO_voidSetPortValue(Copy_u8Port,numbers[Copy_u8Value]);
 #endif 
}
     f8a:	2a 96       	adiw	r28, 0x0a	; 10
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <HBCD_TO_SEVSEG_voidInit>:

void HBCD_TO_SEVSEG_voidInit(u8 Copy_u8Port)
{
     f9c:	cf 93       	push	r28
     f9e:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinDirection(Copy_u8Port,0,OUTPUT);
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8Port,1,OUTPUT);
     fa8:	8c 2f       	mov	r24, r28
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8Port,2,OUTPUT);
     fb2:	8c 2f       	mov	r24, r28
     fb4:	62 e0       	ldi	r22, 0x02	; 2
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(Copy_u8Port,3,OUTPUT);
     fbc:	8c 2f       	mov	r24, r28
     fbe:	63 e0       	ldi	r22, 0x03	; 3
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <MDIO_voidSetPinDirection>
}
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <HBCD_TO_SEVSEG_voidWrite>:
void HBCD_TO_SEVSEG_voidWrite(u8 Copy_u8Port,u8 Copy_u8Value)
{
	MDIO_voidWriteLowNibble(Copy_u8Port,Copy_u8Value);
     fca:	0e 94 4b 05 	call	0xa96	; 0xa96 <MDIO_voidWriteLowNibble>
     fce:	08 95       	ret

00000fd0 <MTIMER0_voidInit>:
  #elif TIMER0_CLOCK == CPU_DIV_BY_256
  CLR_BIT(TCCR0,0);
  CLR_BIT(TCCR0,1);
  SET_BIT(TCCR0,2);  
  #elif TIMER0_CLOCK == CPU_DIV_BY_1024
  SET_BIT(TCCR0,0);
     fd0:	83 b7       	in	r24, 0x33	; 51
     fd2:	81 60       	ori	r24, 0x01	; 1
     fd4:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,1);
     fd6:	83 b7       	in	r24, 0x33	; 51
     fd8:	8d 7f       	andi	r24, 0xFD	; 253
     fda:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,2);  
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,2);  
  #endif
  
  /* configure timer0 mode */
  #if   TIMER0_MODE == OVER_FLOW_MODE
  CLR_BIT(TCCR0,6);
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,3);
     fe8:	83 b7       	in	r24, 0x33	; 51
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	83 bf       	out	0x33, r24	; 51
  CLR_BIT(TCCR0,5);
  #elif  COMPARE_OUT_MODE== TOGG_OC0_ON_COMP_MATCH
  SET_BIT(TCCR0,4);
  CLR_BIT(TCCR0,5);  
  #elif  COMPARE_OUT_MODE== CLR_OC0_ON_COMP_MATCH
  CLR_BIT(TCCR0,4);
     fee:	83 b7       	in	r24, 0x33	; 51
     ff0:	8f 7e       	andi	r24, 0xEF	; 239
     ff2:	83 bf       	out	0x33, r24	; 51
  SET_BIT(TCCR0,5);  
     ff4:	83 b7       	in	r24, 0x33	; 51
     ff6:	80 62       	ori	r24, 0x20	; 32
     ff8:	83 bf       	out	0x33, r24	; 51
  #if OC0_STATUS == OC0_ENABLED
  MDIO_voidSetPinDirection(DIOB,3,OUTPUT); // set PB3 as output pin
  #endif 
  /* Set OCR0 with a value if needed   */
  
}
     ffa:	08 95       	ret

00000ffc <MTIMER0_voidEnableInterrupt>:

void MTIMER0_voidEnableInterrupt(void)
{
	MINT_voidSetGlobalInterrupt(); 
     ffc:	0e 94 98 05 	call	0xb30	; 0xb30 <MINT_voidSetGlobalInterrupt>
	
  #if   TIMER0_MODE == OVER_FLOW_MODE
  SET_BIT(TIMSK,0);  //enable interrupt in case of overflow
    1000:	89 b7       	in	r24, 0x39	; 57
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	89 bf       	out	0x39, r24	; 57
  #elif TIMER0_MODE == CTC_MODE
  SET_BIT(TIMSK,1); //enable interrupt in case of compare match
  #endif	
}
    1006:	08 95       	ret

00001008 <MTIMER2_voidInit>:
void MTIMER2_voidInit(void)
{
	#if    TIMER2_CLOCK_SOURCE_TYPE == CPU_CLOCK
	CLR_BIT(ASSR,3);
	#elif  TIMER2_CLOCK_SOURCE_TYPE == EXTERNAL_CRYSTAL_ON_TOSC1
	SET_BIT(ASSR,3);
    1008:	82 b5       	in	r24, 0x22	; 34
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	82 bd       	out	0x22, r24	; 34
	#elif TIMER2_CLOCK == TIMER2_SOURCE_CLOCK_DIV_BY_64
	CLR_BIT(TCCR2,0);
	CLR_BIT(TCCR2,1);
	SET_BIT(TCCR2,2);
	#elif TIMER2_CLOCK == TIMER2_SOURCE_CLOCK_DIV_BY_128
	SET_BIT(TCCR2,0);
    100e:	85 b5       	in	r24, 0x25	; 37
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,1);
    1014:	85 b5       	in	r24, 0x25	; 37
    1016:	8d 7f       	andi	r24, 0xFD	; 253
    1018:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,2);
    101a:	85 b5       	in	r24, 0x25	; 37
    101c:	84 60       	ori	r24, 0x04	; 4
    101e:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,2);
	#endif	
	
  /* configure timer2 mode */
  #if   TIMER2_MODE == OVER_FLOW_MODE
  CLR_BIT(TCCR2,6);
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	8f 7b       	andi	r24, 0xBF	; 191
    1024:	85 bd       	out	0x25, r24	; 37
  CLR_BIT(TCCR2,3);
    1026:	85 b5       	in	r24, 0x25	; 37
    1028:	87 7f       	andi	r24, 0xF7	; 247
    102a:	85 bd       	out	0x25, r24	; 37
  CLR_BIT(TCCR2,5);
  #elif  COMPARE_OUT_MODE== TOGG_OC2_ON_COMP_MATCH
  SET_BIT(TCCR2,4);
  CLR_BIT(TCCR2,5);
  #elif  COMPARE_OUT_MODE== CLR_OC2_ON_COMP_MATCH
  CLR_BIT(TCCR2,4);
    102c:	85 b5       	in	r24, 0x25	; 37
    102e:	8f 7e       	andi	r24, 0xEF	; 239
    1030:	85 bd       	out	0x25, r24	; 37
  SET_BIT(TCCR2,5);
    1032:	85 b5       	in	r24, 0x25	; 37
    1034:	80 62       	ori	r24, 0x20	; 32
    1036:	85 bd       	out	0x25, r24	; 37
  #endif  
  
/* Set OCR2 with a value if needed   */  


}
    1038:	08 95       	ret

0000103a <MTIMER2_voidEnableInterrupt>:

void MTIMER2_voidEnableInterrupt(void)
{
	MINT_voidSetGlobalInterrupt();
    103a:	0e 94 98 05 	call	0xb30	; 0xb30 <MINT_voidSetGlobalInterrupt>
	
	#if   TIMER2_MODE == OVER_FLOW_MODE
	SET_BIT(TIMSK,6);  //enable interrupt in case of overflow
    103e:	89 b7       	in	r24, 0x39	; 57
    1040:	80 64       	ori	r24, 0x40	; 64
    1042:	89 bf       	out	0x39, r24	; 57
	#elif TIMER0_MODE == CTC_MODE
	SET_BIT(TIMSK,7); //enable interrupt in case of compare match
	#endif
    1044:	08 95       	ret

00001046 <__divsf3>:
    1046:	0c d0       	rcall	.+24     	; 0x1060 <__divsf3x>
    1048:	a9 c0       	rjmp	.+338    	; 0x119c <__fp_round>
    104a:	a1 d0       	rcall	.+322    	; 0x118e <__fp_pscB>
    104c:	40 f0       	brcs	.+16     	; 0x105e <__divsf3+0x18>
    104e:	98 d0       	rcall	.+304    	; 0x1180 <__fp_pscA>
    1050:	30 f0       	brcs	.+12     	; 0x105e <__divsf3+0x18>
    1052:	21 f4       	brne	.+8      	; 0x105c <__divsf3+0x16>
    1054:	5f 3f       	cpi	r21, 0xFF	; 255
    1056:	19 f0       	breq	.+6      	; 0x105e <__divsf3+0x18>
    1058:	8a c0       	rjmp	.+276    	; 0x116e <__fp_inf>
    105a:	51 11       	cpse	r21, r1
    105c:	d3 c0       	rjmp	.+422    	; 0x1204 <__fp_szero>
    105e:	8d c0       	rjmp	.+282    	; 0x117a <__fp_nan>

00001060 <__divsf3x>:
    1060:	ae d0       	rcall	.+348    	; 0x11be <__fp_split3>
    1062:	98 f3       	brcs	.-26     	; 0x104a <__divsf3+0x4>

00001064 <__divsf3_pse>:
    1064:	99 23       	and	r25, r25
    1066:	c9 f3       	breq	.-14     	; 0x105a <__divsf3+0x14>
    1068:	55 23       	and	r21, r21
    106a:	b1 f3       	breq	.-20     	; 0x1058 <__divsf3+0x12>
    106c:	95 1b       	sub	r25, r21
    106e:	55 0b       	sbc	r21, r21
    1070:	bb 27       	eor	r27, r27
    1072:	aa 27       	eor	r26, r26
    1074:	62 17       	cp	r22, r18
    1076:	73 07       	cpc	r23, r19
    1078:	84 07       	cpc	r24, r20
    107a:	38 f0       	brcs	.+14     	; 0x108a <__divsf3_pse+0x26>
    107c:	9f 5f       	subi	r25, 0xFF	; 255
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	44 1f       	adc	r20, r20
    1086:	aa 1f       	adc	r26, r26
    1088:	a9 f3       	breq	.-22     	; 0x1074 <__divsf3_pse+0x10>
    108a:	33 d0       	rcall	.+102    	; 0x10f2 <__divsf3_pse+0x8e>
    108c:	0e 2e       	mov	r0, r30
    108e:	3a f0       	brmi	.+14     	; 0x109e <__divsf3_pse+0x3a>
    1090:	e0 e8       	ldi	r30, 0x80	; 128
    1092:	30 d0       	rcall	.+96     	; 0x10f4 <__divsf3_pse+0x90>
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	e6 95       	lsr	r30
    109a:	00 1c       	adc	r0, r0
    109c:	ca f7       	brpl	.-14     	; 0x1090 <__divsf3_pse+0x2c>
    109e:	29 d0       	rcall	.+82     	; 0x10f2 <__divsf3_pse+0x8e>
    10a0:	fe 2f       	mov	r31, r30
    10a2:	27 d0       	rcall	.+78     	; 0x10f2 <__divsf3_pse+0x8e>
    10a4:	66 0f       	add	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	bb 1f       	adc	r27, r27
    10ac:	26 17       	cp	r18, r22
    10ae:	37 07       	cpc	r19, r23
    10b0:	48 07       	cpc	r20, r24
    10b2:	ab 07       	cpc	r26, r27
    10b4:	b0 e8       	ldi	r27, 0x80	; 128
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__divsf3_pse+0x56>
    10b8:	bb 0b       	sbc	r27, r27
    10ba:	80 2d       	mov	r24, r0
    10bc:	bf 01       	movw	r22, r30
    10be:	ff 27       	eor	r31, r31
    10c0:	93 58       	subi	r25, 0x83	; 131
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	2a f0       	brmi	.+10     	; 0x10d0 <__divsf3_pse+0x6c>
    10c6:	9e 3f       	cpi	r25, 0xFE	; 254
    10c8:	51 05       	cpc	r21, r1
    10ca:	68 f0       	brcs	.+26     	; 0x10e6 <__divsf3_pse+0x82>
    10cc:	50 c0       	rjmp	.+160    	; 0x116e <__fp_inf>
    10ce:	9a c0       	rjmp	.+308    	; 0x1204 <__fp_szero>
    10d0:	5f 3f       	cpi	r21, 0xFF	; 255
    10d2:	ec f3       	brlt	.-6      	; 0x10ce <__divsf3_pse+0x6a>
    10d4:	98 3e       	cpi	r25, 0xE8	; 232
    10d6:	dc f3       	brlt	.-10     	; 0x10ce <__divsf3_pse+0x6a>
    10d8:	86 95       	lsr	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	b7 95       	ror	r27
    10e0:	f7 95       	ror	r31
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__divsf3_pse+0x74>
    10e6:	88 0f       	add	r24, r24
    10e8:	91 1d       	adc	r25, r1
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	97 f9       	bld	r25, 7
    10f0:	08 95       	ret
    10f2:	e1 e0       	ldi	r30, 0x01	; 1
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	bb 1f       	adc	r27, r27
    10fc:	62 17       	cp	r22, r18
    10fe:	73 07       	cpc	r23, r19
    1100:	84 07       	cpc	r24, r20
    1102:	ba 07       	cpc	r27, r26
    1104:	20 f0       	brcs	.+8      	; 0x110e <__divsf3_pse+0xaa>
    1106:	62 1b       	sub	r22, r18
    1108:	73 0b       	sbc	r23, r19
    110a:	84 0b       	sbc	r24, r20
    110c:	ba 0b       	sbc	r27, r26
    110e:	ee 1f       	adc	r30, r30
    1110:	88 f7       	brcc	.-30     	; 0x10f4 <__divsf3_pse+0x90>
    1112:	e0 95       	com	r30
    1114:	08 95       	ret

00001116 <__fixunssfsi>:
    1116:	5b d0       	rcall	.+182    	; 0x11ce <__fp_splitA>
    1118:	88 f0       	brcs	.+34     	; 0x113c <__fixunssfsi+0x26>
    111a:	9f 57       	subi	r25, 0x7F	; 127
    111c:	90 f0       	brcs	.+36     	; 0x1142 <__fixunssfsi+0x2c>
    111e:	b9 2f       	mov	r27, r25
    1120:	99 27       	eor	r25, r25
    1122:	b7 51       	subi	r27, 0x17	; 23
    1124:	a0 f0       	brcs	.+40     	; 0x114e <__fixunssfsi+0x38>
    1126:	d1 f0       	breq	.+52     	; 0x115c <__fixunssfsi+0x46>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	1a f0       	brmi	.+6      	; 0x1138 <__fixunssfsi+0x22>
    1132:	ba 95       	dec	r27
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__fixunssfsi+0x12>
    1136:	12 c0       	rjmp	.+36     	; 0x115c <__fixunssfsi+0x46>
    1138:	b1 30       	cpi	r27, 0x01	; 1
    113a:	81 f0       	breq	.+32     	; 0x115c <__fixunssfsi+0x46>
    113c:	62 d0       	rcall	.+196    	; 0x1202 <__fp_zero>
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	08 95       	ret
    1142:	5f c0       	rjmp	.+190    	; 0x1202 <__fp_zero>
    1144:	67 2f       	mov	r22, r23
    1146:	78 2f       	mov	r23, r24
    1148:	88 27       	eor	r24, r24
    114a:	b8 5f       	subi	r27, 0xF8	; 248
    114c:	39 f0       	breq	.+14     	; 0x115c <__fixunssfsi+0x46>
    114e:	b9 3f       	cpi	r27, 0xF9	; 249
    1150:	cc f3       	brlt	.-14     	; 0x1144 <__fixunssfsi+0x2e>
    1152:	86 95       	lsr	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	b3 95       	inc	r27
    115a:	d9 f7       	brne	.-10     	; 0x1152 <__fixunssfsi+0x3c>
    115c:	3e f4       	brtc	.+14     	; 0x116c <__fixunssfsi+0x56>
    115e:	90 95       	com	r25
    1160:	80 95       	com	r24
    1162:	70 95       	com	r23
    1164:	61 95       	neg	r22
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	8f 4f       	sbci	r24, 0xFF	; 255
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	08 95       	ret

0000116e <__fp_inf>:
    116e:	97 f9       	bld	r25, 7
    1170:	9f 67       	ori	r25, 0x7F	; 127
    1172:	80 e8       	ldi	r24, 0x80	; 128
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	08 95       	ret

0000117a <__fp_nan>:
    117a:	9f ef       	ldi	r25, 0xFF	; 255
    117c:	80 ec       	ldi	r24, 0xC0	; 192
    117e:	08 95       	ret

00001180 <__fp_pscA>:
    1180:	00 24       	eor	r0, r0
    1182:	0a 94       	dec	r0
    1184:	16 16       	cp	r1, r22
    1186:	17 06       	cpc	r1, r23
    1188:	18 06       	cpc	r1, r24
    118a:	09 06       	cpc	r0, r25
    118c:	08 95       	ret

0000118e <__fp_pscB>:
    118e:	00 24       	eor	r0, r0
    1190:	0a 94       	dec	r0
    1192:	12 16       	cp	r1, r18
    1194:	13 06       	cpc	r1, r19
    1196:	14 06       	cpc	r1, r20
    1198:	05 06       	cpc	r0, r21
    119a:	08 95       	ret

0000119c <__fp_round>:
    119c:	09 2e       	mov	r0, r25
    119e:	03 94       	inc	r0
    11a0:	00 0c       	add	r0, r0
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <__fp_round+0xc>
    11a4:	88 23       	and	r24, r24
    11a6:	52 f0       	brmi	.+20     	; 0x11bc <__fp_round+0x20>
    11a8:	bb 0f       	add	r27, r27
    11aa:	40 f4       	brcc	.+16     	; 0x11bc <__fp_round+0x20>
    11ac:	bf 2b       	or	r27, r31
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <__fp_round+0x18>
    11b0:	60 ff       	sbrs	r22, 0
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <__fp_round+0x20>
    11b4:	6f 5f       	subi	r22, 0xFF	; 255
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	08 95       	ret

000011be <__fp_split3>:
    11be:	57 fd       	sbrc	r21, 7
    11c0:	90 58       	subi	r25, 0x80	; 128
    11c2:	44 0f       	add	r20, r20
    11c4:	55 1f       	adc	r21, r21
    11c6:	59 f0       	breq	.+22     	; 0x11de <__fp_splitA+0x10>
    11c8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ca:	71 f0       	breq	.+28     	; 0x11e8 <__fp_splitA+0x1a>
    11cc:	47 95       	ror	r20

000011ce <__fp_splitA>:
    11ce:	88 0f       	add	r24, r24
    11d0:	97 fb       	bst	r25, 7
    11d2:	99 1f       	adc	r25, r25
    11d4:	61 f0       	breq	.+24     	; 0x11ee <__fp_splitA+0x20>
    11d6:	9f 3f       	cpi	r25, 0xFF	; 255
    11d8:	79 f0       	breq	.+30     	; 0x11f8 <__fp_splitA+0x2a>
    11da:	87 95       	ror	r24
    11dc:	08 95       	ret
    11de:	12 16       	cp	r1, r18
    11e0:	13 06       	cpc	r1, r19
    11e2:	14 06       	cpc	r1, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	f2 cf       	rjmp	.-28     	; 0x11cc <__fp_split3+0xe>
    11e8:	46 95       	lsr	r20
    11ea:	f1 df       	rcall	.-30     	; 0x11ce <__fp_splitA>
    11ec:	08 c0       	rjmp	.+16     	; 0x11fe <__fp_splitA+0x30>
    11ee:	16 16       	cp	r1, r22
    11f0:	17 06       	cpc	r1, r23
    11f2:	18 06       	cpc	r1, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	f1 cf       	rjmp	.-30     	; 0x11da <__fp_splitA+0xc>
    11f8:	86 95       	lsr	r24
    11fa:	71 05       	cpc	r23, r1
    11fc:	61 05       	cpc	r22, r1
    11fe:	08 94       	sec
    1200:	08 95       	ret

00001202 <__fp_zero>:
    1202:	e8 94       	clt

00001204 <__fp_szero>:
    1204:	bb 27       	eor	r27, r27
    1206:	66 27       	eor	r22, r22
    1208:	77 27       	eor	r23, r23
    120a:	cb 01       	movw	r24, r22
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret

00001210 <__mulsf3>:
    1210:	0b d0       	rcall	.+22     	; 0x1228 <__mulsf3x>
    1212:	c4 cf       	rjmp	.-120    	; 0x119c <__fp_round>
    1214:	b5 df       	rcall	.-150    	; 0x1180 <__fp_pscA>
    1216:	28 f0       	brcs	.+10     	; 0x1222 <__mulsf3+0x12>
    1218:	ba df       	rcall	.-140    	; 0x118e <__fp_pscB>
    121a:	18 f0       	brcs	.+6      	; 0x1222 <__mulsf3+0x12>
    121c:	95 23       	and	r25, r21
    121e:	09 f0       	breq	.+2      	; 0x1222 <__mulsf3+0x12>
    1220:	a6 cf       	rjmp	.-180    	; 0x116e <__fp_inf>
    1222:	ab cf       	rjmp	.-170    	; 0x117a <__fp_nan>
    1224:	11 24       	eor	r1, r1
    1226:	ee cf       	rjmp	.-36     	; 0x1204 <__fp_szero>

00001228 <__mulsf3x>:
    1228:	ca df       	rcall	.-108    	; 0x11be <__fp_split3>
    122a:	a0 f3       	brcs	.-24     	; 0x1214 <__mulsf3+0x4>

0000122c <__mulsf3_pse>:
    122c:	95 9f       	mul	r25, r21
    122e:	d1 f3       	breq	.-12     	; 0x1224 <__mulsf3+0x14>
    1230:	95 0f       	add	r25, r21
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	55 1f       	adc	r21, r21
    1236:	62 9f       	mul	r22, r18
    1238:	f0 01       	movw	r30, r0
    123a:	72 9f       	mul	r23, r18
    123c:	bb 27       	eor	r27, r27
    123e:	f0 0d       	add	r31, r0
    1240:	b1 1d       	adc	r27, r1
    1242:	63 9f       	mul	r22, r19
    1244:	aa 27       	eor	r26, r26
    1246:	f0 0d       	add	r31, r0
    1248:	b1 1d       	adc	r27, r1
    124a:	aa 1f       	adc	r26, r26
    124c:	64 9f       	mul	r22, r20
    124e:	66 27       	eor	r22, r22
    1250:	b0 0d       	add	r27, r0
    1252:	a1 1d       	adc	r26, r1
    1254:	66 1f       	adc	r22, r22
    1256:	82 9f       	mul	r24, r18
    1258:	22 27       	eor	r18, r18
    125a:	b0 0d       	add	r27, r0
    125c:	a1 1d       	adc	r26, r1
    125e:	62 1f       	adc	r22, r18
    1260:	73 9f       	mul	r23, r19
    1262:	b0 0d       	add	r27, r0
    1264:	a1 1d       	adc	r26, r1
    1266:	62 1f       	adc	r22, r18
    1268:	83 9f       	mul	r24, r19
    126a:	a0 0d       	add	r26, r0
    126c:	61 1d       	adc	r22, r1
    126e:	22 1f       	adc	r18, r18
    1270:	74 9f       	mul	r23, r20
    1272:	33 27       	eor	r19, r19
    1274:	a0 0d       	add	r26, r0
    1276:	61 1d       	adc	r22, r1
    1278:	23 1f       	adc	r18, r19
    127a:	84 9f       	mul	r24, r20
    127c:	60 0d       	add	r22, r0
    127e:	21 1d       	adc	r18, r1
    1280:	82 2f       	mov	r24, r18
    1282:	76 2f       	mov	r23, r22
    1284:	6a 2f       	mov	r22, r26
    1286:	11 24       	eor	r1, r1
    1288:	9f 57       	subi	r25, 0x7F	; 127
    128a:	50 40       	sbci	r21, 0x00	; 0
    128c:	8a f0       	brmi	.+34     	; 0x12b0 <__mulsf3_pse+0x84>
    128e:	e1 f0       	breq	.+56     	; 0x12c8 <__mulsf3_pse+0x9c>
    1290:	88 23       	and	r24, r24
    1292:	4a f0       	brmi	.+18     	; 0x12a6 <__mulsf3_pse+0x7a>
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	bb 1f       	adc	r27, r27
    129a:	66 1f       	adc	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	91 50       	subi	r25, 0x01	; 1
    12a2:	50 40       	sbci	r21, 0x00	; 0
    12a4:	a9 f7       	brne	.-22     	; 0x1290 <__mulsf3_pse+0x64>
    12a6:	9e 3f       	cpi	r25, 0xFE	; 254
    12a8:	51 05       	cpc	r21, r1
    12aa:	70 f0       	brcs	.+28     	; 0x12c8 <__mulsf3_pse+0x9c>
    12ac:	60 cf       	rjmp	.-320    	; 0x116e <__fp_inf>
    12ae:	aa cf       	rjmp	.-172    	; 0x1204 <__fp_szero>
    12b0:	5f 3f       	cpi	r21, 0xFF	; 255
    12b2:	ec f3       	brlt	.-6      	; 0x12ae <__mulsf3_pse+0x82>
    12b4:	98 3e       	cpi	r25, 0xE8	; 232
    12b6:	dc f3       	brlt	.-10     	; 0x12ae <__mulsf3_pse+0x82>
    12b8:	86 95       	lsr	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f7 95       	ror	r31
    12c2:	e7 95       	ror	r30
    12c4:	9f 5f       	subi	r25, 0xFF	; 255
    12c6:	c1 f7       	brne	.-16     	; 0x12b8 <__mulsf3_pse+0x8c>
    12c8:	fe 2b       	or	r31, r30
    12ca:	88 0f       	add	r24, r24
    12cc:	91 1d       	adc	r25, r1
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	97 f9       	bld	r25, 7
    12d4:	08 95       	ret

000012d6 <__udivmodqi4>:
    12d6:	99 1b       	sub	r25, r25
    12d8:	79 e0       	ldi	r23, 0x09	; 9
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <__udivmodqi4_ep>

000012dc <__udivmodqi4_loop>:
    12dc:	99 1f       	adc	r25, r25
    12de:	96 17       	cp	r25, r22
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__udivmodqi4_ep>
    12e2:	96 1b       	sub	r25, r22

000012e4 <__udivmodqi4_ep>:
    12e4:	88 1f       	adc	r24, r24
    12e6:	7a 95       	dec	r23
    12e8:	c9 f7       	brne	.-14     	; 0x12dc <__udivmodqi4_loop>
    12ea:	80 95       	com	r24
    12ec:	08 95       	ret

000012ee <_exit>:
    12ee:	f8 94       	cli

000012f0 <__stop_program>:
    12f0:	ff cf       	rjmp	.-2      	; 0x12f0 <__stop_program>
